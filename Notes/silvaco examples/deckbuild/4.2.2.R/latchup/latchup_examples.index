

{section} LATCHUP : CMOS Latchup Application Examples



{subsection} latchex01.in : Transient Simulation of CMOS Latch-Up 

Requires: MaskViews/SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.26.1.R

This example demonstrates a latch-up transient in an npnp structure
typical of CMOS processes. The stages of this examples are:

{bullet} Definition of a CMOS layout to include a parasitic npnp structure
{newline}
{bullet} Interface of the layout information to Athena
{newline}
{bullet} Process simulation of the npnp structure
{newline}
{bullet} Interface of the structure to Atlas with automatic electrode specification
{newline}
{bullet} Setting of a transient negative voltage pulse on the Vss contact to trigger latch-up.

The process simulation for this example is defined using MASKVIEWS.
Users not familiar with the MASKVIEWS/Athena interface should read the
description under the ATHENA_SSUPREM4 examples section. Along with the
input file that can be seen by loading this example in to DeckBuild is
a layout file. The layout is of a CMOS well boundary with n+ and p+
contact layers. An n-p-n-p structure is formed by these layers. By
modifying the layers it is possible to misalign the contacts with
respect to the well boundary and repeat this latch-up simulation. Using
the MASKVIEWS/Athena interface avoids having to set etch coordinates
manually.

Along with the layout file, a MASKVIEWS cross-section file is copied to
the user's current working directory when 'Load' is selected.
For this example, the cross-section information is indicated on the
{bold} go athena
line at the top of the input file.  This is a cross section drawn by the
user through the layout. In this layout it is drawn through the center
of the n+ and p+ contacts.

The key syntax in Athena that load the mask edge coordinates are
{bold} mask  
statements. A syntax sequence such as:

deposit alum thickness=0.05 div=2 
{newline}
mask name="MET" 
{newline}
etch alum dry thickness=0.06 
{newline}
strip

will deposit a metal layer, deposit photoresist, load the etch
coordinates of the layer defined in the cross section file as 'MET',
etch the photoresist pattern, etch the exposed metal with the specified
thickness, and then finally strip off all photoresist.

In the layout file, each area of metal (layer MET) was defined with a
name to be used as the name of the electrode associated with that area
of metal. Each of the n+ and p+ contacts were defined in this manner.
The statement
{bold} autoelectrode 
at the end of the Athena run will automatically define the electrodes
for Atlas.

In Atlas the material and model parameters are set first as usual.
Carrier lifetimes are set in the
{bold} material 
statement. These lifetimes will affect the gain of the parasitic
bipolar devices in this structure. Typical bipolar models are set. Here
all models are listed individually, but they could be replaced by the
macro
{bold} models bip. 
For latch-up, impact ionization must also be included. Two DC solve
statements are required to bias the device into the correct initial
voltage with 5V reverse bias between nwell and pwell.

Latch-up in this example will be caused by a transient pulse on the Vss
contact. This is defined by two solve statements. The first defines the
ramp to the negative voltage and the time at that voltage. The second
sets the time for the ramp down and the final simulation time.  If no
latch-up occurs, the device should return at the end of this transient
to the same state as at the beginning of the transient. 

Latch-up is seen in the terminal characteristics as the current rises
during the negative pulse, begins to fall, but in the end keeps rising.
At the final simulation point the current is still rising and
eventually burn-out of the device would occur. The time taken for this
to occur could also be simulated by including lattice heating (using
GIGA) into this simulation.

Latch-up can also be seen in the internal distributions of carriers and
current density in the solution files generated by this example.

To load and run this example, select the
{bold} Load  
button in DeckBuild. This will copy the input file and any support
files to your current working directory. You
{bold} cannot 
run this file until the cross-section file is loaded. To do this go to
the DeckBuild menu
{bold} Tools->MaskViews->Cutlines 
Then select the name of the cross-section file from the list. The name
will be <file>.sec where <file> is the name of this example. Then press
{bold} Load 
on this Cutline menu. Once the cross-section file is loaded, select
{bold} Run 
in DeckBuild to execute the example



{subsection} latchex02.in : CMOS Latch-Up By Positive Voltage on Vdd

Requires: MaskViews/SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.26.1.R

This example demonstrates a latch-up caused by a DC ramp in an npnp
structure typical of CMOS processes . The stages of this examples are:

{bullet} Definition of a CMOS layout to include a parasitic npnp structure
{newline}
{bullet} Interface of the layout information to Athena
{newline}
{bullet} Process simulation of the npnp structure
{newline}
{bullet} Interface of the structure to Atlas with automatic electrode specification
{newline}
{bullet} Ramp of Vdd to cause latch-up using curve tracing algorithm.

The parasitic npnp device used is identical to the device in the
previous example. The use of MASKVIEWS and Athena to create this
structure is given in the description of that example. The initial part
of the Atlas run is also identical.

This file differs only in the manner of triggering the latch-up. A DC
ramp of the p+ contact in the n-well (named Vdd) is used as the
trigger. Once the voltage on Vdd exceeds the 5.0V on the nwell, the
p+/n-well junction is forward biased and latch-up may be triggered.  

To
allow the complete holding voltage and current to be extracted simply,
the curve tracing algorithm in Atlas is used. The key command
is the 
{bold} curvetrace 
statement coupled with 'solve curvetrace'. The parameters on the trace
statement are used to set initial conditions and limits on the curve
tracing.  A detailed description of the use of this technique in tracing
IV curves with turning points can be found in the description of the
MOS snapback example.


The latch-up characteristic can be seen in the stored log file. It is
important to plot the current versus
{bold} vdd int. bias 
rather then 'vdd bias', since the former is the voltage actually
applied to the semiconductor and the latter includes the effect of the
load line used during the curve trace.



To load and run this example, select the
{bold} Load  
button in DeckBuild. This will copy the input file and any support
files to your current working directory. You
{bold} cannot 
run this file until the cross-section file is loaded. To do this go to
the DeckBuild menu
{bold} Tools->MaskViews->Cutlines 
Then select the name of the cross-section file from the list. The name
will be "file".sec where "file" is the name of this example. Then press
{bold} Load 
on this Cutline menu. Once the cross-section file is loaded, select
{bold} run 
in DeckBuild to execute the example


{subsection} latchex03.in : CMOS Latch-Up By Negative Voltage on Vss

Requires: MaskViews/SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.26.1.R

This example demonstrates a latch-up caused by a DC ramp in an npnp
structure typical of CMOS processes . The stages of this examples are:

{bullet} Definition of a CMOS layout to include a parasitic npnp structure
{newline}
{bullet} Interface of the layout information to Athena
{newline}
{bullet} Process simulation of the npnp structure
{newline}
{bullet} Interface of the structure to Atlas with automatic electrode specification
{newline}
{bullet} Negative ramp of Vss to cause latch-up using curve tracing algorithm.

The parasitic npnp device used is identical to the device in the
previous example. The use of MASKVIEWS and Athena to create this
structure is given in the description of that example. The initial part
of the Atlas run is also identical.

This file differs only in the manner of triggering the latch-up. A DC
ramp of the n+ contact in the p-well (named Vss) is used as the
trigger. Once the voltage on Vss becomes less than the 0.0V on the pwell, the
n+/p-well junction is forward biased and latch-up may be triggered.  

To
allow the complete holding voltage and current to be extracted simply,
the curve tracing algorithm in Atlas is used. The key command
is the 
{bold} curvetrace 
statement coupled with 'solve curvetrace'. The parameters on the trace
statement are used to set initial conditions and limits on the curve
tracing. In particular the 
{bold} step.init 
parameter is given as a negative voltage step. This is all that is
required to select the polarity of the voltage sweep. A detailed
description of the use of this technique in tracing IV curves with
turning points can be found in the description of the MOS snapback
example.


The latch-up characteristic can be seen in the stored log file. It is
important to plot the current versus
{bold} vss int. bias 
rather then 'vss bias', since the former is the voltage actually
applied to the semiconductor and the latter includes the effect of the
load line used during the curve trace.



To load and run this example, select the
{bold} Load  
button in DeckBuild. This will copy the input file and any support
files to your current working directory. You
{bold} cannot 
run this file until the cross-section file is loaded. To do this go to
the DeckBuild menu
{bold} Tools->MaskViews->Cutlines 
Then select the name of the cross-section file from the list. The name
will be <file>.sec where <file> is the name of this example. Then press
{bold} Load 
on this Cutline menu. Once the cross-section file is loaded, select
{bold} run 
in DeckBuild to execute the example.



{subsection} latchex04.in : Transient 3D CMOS Latch-Up 

Requires: DevEdit 3D/Device 3D
{newline}
Minimum Versions: Atlas 5.26.1.R

This example demonstrates transient latch-up in a three-dimensional
npnp structure typical of CMOS processes. The stages of this examples
are:

{bullet} Definition of npnp structure in DEVEDIT3D
{newline}
{bullet} Setting of a transient negative voltage pulse on the Vss contact to trigger latch-up

The npnp  structure defined by DEVEDIT3D is a three dimensional one. The
n+ and p+ contacts do not fall in one 2D plane as in the previous
examples. They are arranged in a rectangle. The DEVICE3D module of
Atlas is required to simulate latch-up in this structure.

The structure is created using DEVEDIT3D either graphically or using the
command menus in DeckBuild. The most common technique is to form the
structure graphically, then save an input file containing all the
commands required to reproduce this structure. This input file can be
loaded into DeckBuild, and Atlas runs can be appended to it to create a file
similar to this one.

In Atlas, no special syntax is required to enter the DEVICE3D module as
opposed to 2D SPISCES. On reading a mesh file, Atlas will automatically
detect if it is two or three dimensional. The syntax for specifying
bipolar models and setting up the initial bias state are identical to
the two-dimensional cases described in the previous examples.

The command
{bold} method halfimpl 
chooses the half-implicit scheme for transient simulation. This scheme
significantly reduces the simulation time for many 3D transient
problems. In difficult cases more robust but slower methods might be
required. The transient pulse applied to the n+ contact in the pwell is
similar to the first example in this section. 

Results from the log file show latch-up occurs as the device does not
return to its initial state after the pulse is over. The current is
still increasing at the end of the simulation which will eventually
cause device failure. It is possible to repeat this experiment varying
the the parameter 
{bold} t.final 
in the statement:
{newline}
solve v4=-2.0 tfinal=4.5e-9 tstep=10.e-12
{newline}
If the voltage is held at -2.0V for shorter times latch-up may not occur.


To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.








