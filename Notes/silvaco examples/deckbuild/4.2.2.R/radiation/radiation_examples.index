{section} Radiation : Radiation Application Examples
{subsection} radex01.in : SEU in a Reverse-Biased Diode

Requires: DevEdit 3D/Device 3D
{newline}
Minimum Versions: Atlas 5.26.1.R

This examples demonstrates SEU simulation in a reversed biased three
dimensional diode.

In this example, a diode structure is constructed using DevEdit 3D. The 
structure is then passed to Atlas. The input file consists of the following 
parts:

{bullet} Construction of the 3D device in DevEdit 3D
{newline}
{bullet} Transfer of the structure to Atlas by the DeckBuild autointerface feature
{newline}
{bullet} Setting of the physical models 
{newline}
{bullet} Perform DC bias solution 
{newline}
{bullet} Specification of parameters for the charge track
{newline}
{bullet} Simulation of the effects of SEU

The first stage of the input constructs the diode geometry, material regions,
doping profiles, and electrodes in DevEdit 3D. The structure was created in 
DevEdit 3D by drawing the device regions in interactive mode and specifying 3D
doping distribution. Finally, the mesh was generated automatically by specifying 
basic mesh constraints and refining in the important areas of the device.

The Atlas simulation begins by reading the structure from DevEdit 3D.
DeckBuild provides autointerface between DevEdit 3D and Atlas so that the
structure produced by DevEdit 3D is transferred to Atlas without having to
indicate the mesh statement.

The 
{bold} models 
statement is used to select a set of physical models for this simulation.
In this case, these models are SRH recombination, bandgap narrowing, 
concentration and field dependent mobility model. 

After the initial solution, the emitter voltage is ramped up to 3V in
DC mode,  thereby giving the initial condition of the structure for
transient analysis. The Newton algorithm is used for these
calculations. 

The key syntax in any SEU simulation is the 
{bold} singleeventupset 
statement, which is used to specify entry and exit points, radius and density
of the electron-hole pair distribution generated by the particle track.

Transient analysis is then performed to simulate charge
collection in the device due to the SEU. The
{bold} method halfimpl 
statement indicates that the half implicit scheme is to be used in the transient 
simulation. In this scheme the Poisson's, two continuity, and the total
current equations are solved in sequence. This method ensures efficient and fast convergence in transient mode. 

The results of the simulation are saved in the log file and then displayed using TonyPlot.

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.



 


{subsection} radex02.in : Multiple Ion Tracks

Requires: DevEdit 3D/Device 3D
{newline}
Minimum Versions: Atlas 5.26.1.R

This examples demonstrates SEU simulation in a diode structure in three
dimensions initiated by multiple tracks. Time dependence of the carrier
generation  is also included in the specification of the second
particle track. The input file consists of the following parts:

{bullet} Construction of the 3D device in DevEdit 3D
{newline}
{bullet} Transfer of the structure to Atlas by DeckBuild autointerface feature
{newline}
{bullet} Physical models specification
{newline}
{bullet} SEU parameter specification
{newline}
{bullet} Simulation of the effects of SEU

The diode structure under consideration is the same as in the previous
example and is constructed with the same DevEdit 3D run. The structure is
then passed to Atlas for electrical calculations using the
autointerface feature in DevEdit 3D. The same set of physical models
is applied.

The two
{bold} singleeventupset 
statements are now used to specify entry and exit points, radius and
density of generated electron-hole pairs due to  two alpha particle
tracks. Different from the first track where the generation rate is
position dependent, only the second track includes position and time
dependent generation. Parameters tc and t0 in the second statement
specify the characteristic time of the Gaussian time dependency, and
the time instant of the peak of generation.

The emitter voltage is ramped here again up to 3V in the DC mode, and then the transient analysis is performed to simulate charge collection in the device.
The numerical algorithms that are used repeat those of the previous example.

The results of the simulation are saved in the log file and then displayed using TonyPlot.

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.






{subsection} radex03.in : Single Event Upset in a 3D MOSFET 

Requires: DevEdit 3D/Device 3D
{newline}
Minimum Versions: Atlas 5.26.1.R

This example demonstrates simulation of the effects of different angles
of incidence of an SEU in a MOSFET structure. The MOSFET structure is
constructed using DevEdit 3D. The structure is then passed to Atlas for
electrical testing. The input file consists of the following parts:

{bullet} Construction of the device in DevEdit 3D
{newline}
{bullet} SEU simulation in Atlas: particle with normal incidence
{newline}
{bullet} SEU simulation in Atlas: particle with oblique incidence

Atlas contains many features to enable the simulation of Single Event Upset
(SEU) phenomena. Models for charge generation exist both in 2D, 3D and quasi-3D
cylindrical coordinates. It is also possible for the users to add their own
position and time dependent charge generation using the C-Interpreter and
incorporate these into Atlas simulations.

The first stage of the input file constructs the MOSFET geometry,
material regions, doping profiles, electrodes, and subsequently generates the mesh
in 3D. This is perfromed in DevEdit 3D by drawing the device regions in
interactive mode, and specifying 3D doping distributions. The mesh was
generated automatically by specifying basic mesh parameters and
constraints with subsequent refinement based on the doping
distribution. 

DevEdit 3D generates 2 types of files: DevEdit 3D input file and the
structure file. The first can be run in the DeckBuild to produce the
corresponding structure file and is included here as the first portion
of the input file. The second can be read in directly by Atlas in the
MESH statement. Note that the DevEdit 3D input file can be edited as any
other input file.  It is straightforward to change type and value of
the doping associated with each region or resize regions.  More
importantly DevEdit 3D input files can also be read directly into the
graphical user interface of DevEdit 3D to provide all the menu options
used to construct the structure.

The Atlas simulation begins by reading the structure from
DevEdit 3D.  DeckBuild provides an autointerface between DevEdit 3D and Atlas so
that the structure produced by DevEdit 3D is transferred to Atlas without
having to indicate the 
{bold} mesh 
statement (commented out in this example).
Without the automatic DevEdit 3D/Atlas interface under DeckBuild the MESH
statement is needed to load the structure and the mesh.

The first active statements in the Atlas portion of the input file are contact
and model definitions. In the 
{bold} contact 
statement, the workfunction is specified
for the gate contact to reflect the properties of polysilicon. The set of 
physical models used in the simulation includes Shockley-Read-Hall and Auger
recombination as well as the CVT mobility model accounting for doping, parallel and
transverse electric field mobility dependencies. The 
{bold} material 
statement and its
parameters are not defined in the input file implying that the default values 
for silicon are used. A two-carrier solution of the problem is indicated through
the parameter 
{bold} carrier=2 
in the 
{bold} method 
statement. However, this parameter is
omitted here since it represents the default setting.

In practical applications, while simulating the latched state of a
transistor in a memory cell, a large lumped resistor must be
attached to the drain since the latter is in the floating state. This
should adequately represent the MOSFET in either a high or low state that
may be used in the SRAM cell. However, this lies beyond the scope of the
example considered here. The purpose of this example is to
demonstrate general capabilities in simulating the SEU by analyzing the
reaction of the device in the off state to the charge generation of the
SEU.

The simulation is first performed to obtain the condition of the
structure prior to the particle hit. This condition is with the drain
voltage of 5V, and all other electrodes grounded. This condition of the
structure is saved in a solution file for the
use in the second atlas run.
 
The parameters of the charge track are specified in the 
{bold}singleeventupset 
 statement.
The general description of the SEU physical model employed in Atlas 3D mode
as well as the description of all of the parameters for specifying position
and time dependent generation is given in the Appendix to this example's
description.

The first SEU simulation is performed for a normal particle incidence through
the drain region (along Y direction) with a maximum carrier density generated
of 1.e18 cm-3. The characteristic radius of the track was defined to be 0.05 
micron, the characteristic time of the Gaussian time dependency - 2 ps, and
the time instant of the peak of generation - 4 ps. 

The transient simulation is performed to monitor the effects of SEU
generation. The initial time steps in the solve statements are defined
by the user (eg. 0.05 ps in the first solve statement), while the subsequent
time steps are selected automatically. The simulation is performed up
to 0.1 microsecond of physical time. To analyze the effect of carrier generation
on internal physical distributions, an output structure file 
is saved for the instant of the peak of generation (t=4 ps).

The external terminals transient characteristics are saved in the .log
file. The MOSFET transient response in the form of drain current
transient characteristic is displayed using TonyPlot.

The simulation then proceeds to the second Atlas input file for
simulating oblique particle incidence. This input file contains the
same CONTACT and MODELS definitions as the previous one. The SEU
definition of the particle hitting the device along its longer diagonal
through the drain region (far left top corner) down to the
near right bottom corner of the structure is specified in the SINGLE
statement. All other parameters of the SEU are the same as in the
previous Atlas simulation. The condition of the structure of Vds=5 V is
loaded and the transient response of the SEU is simulated for the second
SEU conditions.

The external terminals transient characteristics are saved in the .log file
, and the structure information is saved in the solution file 
at the peak of generation.

Both drain transient current characteristics corresponding to the different SEU
conditions are then displayed in TonyPlot. The peak of the current associated
with the drift collection is achieved at approximately 6 - 7 ps. Note that 
the peak of generation is taking place at 4 ps. The drift collection continues
for about ~100 ps when the charge in the depletion region is practically 
collected. The peak of the current for the diagonal incidence is calculated to
be slightly higher than for the normal incidence. The decrease in current is
however slower for the normal incidence making the total extracted charge 
greater. 

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.




{subsection} radex04.in : Arbitrary Charge Generation using C-Interpreter 

Requires: Device 3D/C-Interpreter
{newline}
Minimum Versions: Atlas 5.26.1.R

This examples demonstrates the use of the C interpreter function
{bold} F3.RADIATE.  
This function allows the user to specify arbitrary
electron hole pair generation as a function of position and time.
This example illustrates the functionality using a simple block 
function for the charge. Other template files are loaded along
with the input file. These can be substituted in the line:

{bold} beam num=1 f3.radiate=(filename)

{bold} Note 
that a generation value calculated by the C function for each XYZ
location in the device. This value is multiplied by the value of the
{bold} b1 
of the 
{bold} solve 
statement before being applied.

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.





{subsection} radex05.in : Defining a Sphere of Charge using C-Interpreter

Requires: Device 3D/Luminous 3D/C-Interpreter
{newline}
Minimum Versions: Atlas 5.26.1.R

This examples demonstrates the f3.radiate function by generating a 
sphere of charge inside a cube of semiconductor material.


Note that a generation value calculated by the C function for each XYZ
location in the device. This value is multiplied by the value of the
{bold} b1 
of the 
{bold} solve 
statement before being applied.

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.




  





{subsection} radex06.in : SEU in Memory Cell Transistor

Requires: DevEdit 3D/Device 3D
{newline}
Minimum Versions: Atlas 5.26.1.R

This example demonstrates SEU in a MOSFET with an external resistor and capacitor emulating a RAM cell.  The example shows:

{bullet} Formation of structure in DevEdit 3D
{newline}
{bullet} Parameterized structural and doping parameters 
{newline}
{bullet} Automatic interface from DevEdit 3D to Device 3D
{newline}
{bullet} Setting of external resistor and capacitor on the 
{bold} drain
contact
{newline}
{bullet} Definition of the SEU pulse
{newline}
{bullet} DC simulation to bias MOSFET in initial cell condition
{newline}
{bullet} Transient simulation of SEU strike
{newline}
{bullet} Analysis of voltage drop at the drain contact

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.



{subsection} radex07.in : Total Dose X-Ray Effects in an n-MOS Gate Oxide

Requires: Victory Device/SEE
{newline}
Minimum Versions: Victory Device 1.12.1.R

This examples demonstrates positive charge build up and
{bold} radiation induced charge de-trapping
in an n-MOS gate oxide as a result of
{bold} 10keV X-Ray irradiation.

A physical effect missing in previous total dose models is radiation induced 
de-trapping of previously trapped oxide charge, as a result of the 
{bold} trapped charge being released after absorbing energy quanta from the
{bold} geminate recombination process.
Geminate recombination occurs when an electron-hole pair created from 
absorbtion of radiation, recombine again before an electric field can 
accelerate the pair in opposite directions.  Clearly the probability of 
geminate recombination increases with reducing electric field.  Thus 
{bold} the rate of hole de-trapping in the oxide also increases with a 
{bold} reduction in electric field,
as discussed in the reference for this model from Kimpton et al.,
{bold} "A Simple Trap-Detrap Model for Accurate Prediction of Radiation Induced
{bold} Threshold Voltage Shifts in Radiation Tolerant Oxides, for All Static or
{bold} Time Variant Oxide Fields" 
Solid-State Electronics, Vol. 37, No. 1, pp.153-158, 1994

To demonstrate both the radiation induced hole trapping and de-trapping 
phenomenon, a positive bias is applied to the gate of an n-MOSFET and is
irradiated with 10keV X-Rays. Positive oxide charge builds up during irradiaton
as is monitored using the
{bold} probe material=oxide p.conc
statement and by comparing the 
{bold} pre and post irradiation threshold voltage.
After irradiation to 1MRad, the gate bias is changed to -0.9 volts to minimise
the gate oxide field.  The device is then re-irradiated with another 1MRad dose
and the trapped hole concentration in the gate oxide is monitored.  

The greatly reduced oxide field resulting from the change in gate bias 
increases the geminate recombination process which also greatly increases the
rate of hole de-trapping in the oxide, such that it now becomes even greater
than the hole trapping rate.  It can be seen from this example that rather than
increasing the trapped hole concentration with radiation dose, now all the
additional energy released from the increased rate of gemnate recombination,
now decreases the trapped hole concentration with radiation dose.  It should be
emphasized here that the
{bold} hole de-trapping is NOT a result of hole recombination with electrons,
{bold} but is a direct result of trapped holes absorbing energy quanta from the
{bold} geminate recombination process.

Finaly, after the second irradiation with low electric field on the gate, the 
threshold voltage is simulated again, and shows a recovery from the shift
observed after the first irtradiation with a high gate oxide field.

To simulate total dose effects in insulators, the oxides are converted to large
bandgap semiconductors with the
{bold} material material=oxide semiconductor
statement.  Then the concentrations and characteristics of the bulk oxide and
interface traps are defined in accordance with the referenced paper above, 
using the
{bold} oxidecharging
and
{bold} intoxidecharging
statements respectively.  Finally the characteristics of the radiation are 
defined using the
{bold} radiation doserate=1 XRay
statement.  Then on any transient solve statement the parameter "radiation" is
specified to invoke the time dependent irradiation process.

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.


{subsection} radex08.in : Multiple SEU Strikes in a 6 Transistor 22nm SRAM

Requires: Victory Process/Victory Mesh/Victory Device/SEE
{newline}
Minimum Versions: Victory Process 7.22.3.R, Victory Mesh 1.2.4.R, Victory Device 1.12.1.R

This examples demonstrates Multiple Strike SEU Simulation in a 6 Transistor
22nm SRAM Cell.

Victory Process in Cell Mode is used to create the 6 transistor SRAM cell
structure.  The 4 layers of metal interconnect are left off in this example in
an effort to speed up the device simulation.  A mixture of mask features and
traditional "line" statements are used to create the structure mesh.  Monte-
Carlo implant is used extensively in the process flow, so the process
simulation run time can be greatly reduced by taking advantage of the mult-
threaded option on the "go victoryprocess" line.

In the device simulation, a large number of "contact" statements are required
to connect the various parts of the circuit, that would have been connected by
the 4 layers of interconnect, that were omitted from the original design, in
the interests of device simulation speed.  Also of note is the
{bold} "seu.integrate"
parameter in the method statement that ensures correct total charge integration
in the SEU charge track, reducing still further the required mesh count in the
vicinity of the strike locations.

The device simulation hits the nMOS devices in the main Flip-Flop of the SRAM
with SEU strikes, staggered in time to allow for circuit recovery before the
next strike.  Striking each nMOS device in turn ensures that at least one of
the strikes will occur to an nMOS device in an "off state" ensuring that the
SRAM will change state at least once as a result of the strikes.

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.

{subsection} radex09.in : Single Event Burnout (SEB) in a High Voltage PiN Diode

Requires: Victory Device/SEE
{newline}
Minimum Versions: Victory Device 1.12.1.R

This examples demonstrates Single Event Burnout (SEB) in a High Voltage PiN Diode

The structure of the 3D PiN diode is simple enough to be emulated directly in 
the device simulator without the need to resort to a full process simulator.
Further simplification is afforded by the 
{bold} circular symmetry 
of the diode allowing the diode to be simulated in two dimensions with 
cylindrical corrections to correctly predict 3D device characteristics.  For 
the simulation of single events, only a central and vertical strike is a valid
candidate for correctly simulating 3D effects using this 2 dimensional circular
symetry method.  This method is invoked using the
{bold} cylindrical
parameter, on the mesh statement

There are two important requirements for simulating Single Event Burnout (SEB).
Firstly, the device IV characteristics must display a 
{bold} "snapback"
characteristic, where, for at least a range of voltages, there exists two 
possible corresponding stable current conditions, one a low current "off" state
and a second high current "on" state.  At high voltages, the "on" state 
dissipates sufficient power to over heat the device.
 
Secondly, self heating plays a leading role in greatly reducing the current 
density in a PiN diode at which the snapback IV characteristic occurs, allowing
a significantly lower 
{bold} Linear Energy Transfer (LET)
strike to transfer the diode from an "off" state, to a stable "on" state, where
continuous heating eventually burns the device to destruction, hence the name
of the phenomenon, "Single Event Burnout". 

This example, first biases the PiN diode close to it's breakdown voltage of 
{bold} 3,500 volts.
Then a
{bold} LOOP, L.END
statement is used to start the simulation with a strike of 4 MeV-cm2/mg LET.
The LOOP then doubles the LET strike value until the current pulse from the 
strike is sufficient to transfer the IV characteristics to a stable "on" state,
whereupon the device burns out in short order afterwards.

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.


{subsection} radex10.in : Inter Device Leakage from Total Dose XRay Photonic Exposure

Requires: Victory Process, Victory Mesh, Victory Device/REM
{newline}
Minimum Versions: Victory Process 7.22.3.R, Victory Mesh 1.2.4.R, Victory Device 1.12.1.R

This examples demonstrates Inter Device Leakage from XRay Total Dose Exposure

For older technologies, one of the main effects of 
{bold} Total Dose Irradiation
was the accumulation of positive charge in the gate oxide, resulting in 
threshold voltage shifts that either reduced current drive or increased off 
state leakage, depending on whether the device was a p- or n-MOS device
respectively.  For more agressive technologies, the gate oxides are so thin,
that the major effect of Total Dose Irradiation is the trapping of positive 
charge in the trench isolation oxides, creating a parasitic current leakage 
path between trench isolated devices.  The leakage path could be between the
Source/Drain contacts of two seperate nMOS devices, or could be between the 
Source/Drain contact of an nMOS device and the n-Well isolation of a p-MOS 
device.  In this example, we demonstrate the creation of a current leakage path
between two nMOS devices.  Leakage betwen an nMOS and pMOS n-Well is 
essentially the same phenomenon.

Victory Process is used to create the two nMOS devices, seperated and 
electrically isolated by a trench and p-well with associated trench implants.

There are several basic input file set up requirements for simulating total 
dose effects in Victory Device:
{newline}
{bullet} the effected insulators must be simulated as wide bandgap semiconductors
{newline}
{bullet} any doping in the insulator therefore needs to be removed
{newline}
{bullet} insulator trap densities, characteristics and locations need to be defined
{newline}
{bullet} the radiation source and dose rate needs to be defined 
{newline}
{bullet} the parameter "radiation" needs to be invoked on the solve statement

To convert an insulator to a wide bandgap semiconductor, the material statement
is used.  For example:
{newline}
{bold} material material=oxide semiconductor
{newline}

To remove any existing doping from the insulator, which would cause erroneous 
conduction, the "doping replace" syntax is used.  For example:
{newline}
{bold} doping material=oxide replace uniform net concentration=-1
{newline}

Two types of insulator traps can be defined, bulk insulator traps, using the
{bold} oxidecharging
statement and interface insulator traps, using the
{bold} intoxidecharging
statement in a direct analagy to defect and intdefect statements.  Two model
implementations are also available, the 
{bold} "Jmodel" 
and the 
{bold} "Vmodel".
The user is directed to the manual to gain a full understanding of the meaning
of all the parameters in these statements and the model implementation, as a
full description is too lengthy for this brief example description.

The radiation source and dose rate are defined in the radiation statement.  
Here a 10keV XRay source and a dose rate of 1 Rad per second is defined, using
the radiation statement:
{bold} radiation doserate=1 XRay

The convenience of defining a dose rate of 1 Rad per second is that the total 
dose will be the same as the elapsed transient time in the solve statement, if
the parameter "radiation" was invoked in the transient from the start.

The simulation shows how the leakage between the two trench isolated nMOS
devices, increases after a total dose of 3 MRads.

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.


{subsection} radex11.in : Single Event gate Rupture (SEGR) in a Power MOSFET

Requires: Victory Process/Devedit/Victory Mesh/Victory Device/SEE
{newline}
Minimum Versions: Victory Process 7.22.3.R, Devedit 2.8.26.R, Victory Mesh 1.2.4.R, Victory Device 1.12.1.R

This examples demonstrates Single Event gate Rupture (SEGR) in a Power MOSFET

The structure of the 3D Power MOSFET in this example is conveniently 
cylindrically symmetric allowing the 3D structure to be simulated accurately
using only two dimensions with cylindrical co-ordinates.  For the simulation of
single events, only a central and vertical strike is a valid candidate for 
correctly simulating 3D effects using this 2 dimensional circular symetry 
method.  This method is invoked using the
{bold} cylindrical
parameter, on the mesh statement.

After the 2 dimensional Victory Process simulation of the power MOSFET, the 
structure was exported to
{bold} Devedit 
to create a mesh suitable for device simulation.

In the device simulator, the power MOSFET is biased to a condition where the
drain voltage is approximately twice the gate voltage, which is known to 
make such a device more susceptible to gate rupture after a single event.

A single event, with an LET value of 37.2 MeV-cm2/mg corresponding to a bromine
ion, was allowed to strike the power MOSFET and the evolution of the gate oxide
electric field was monitored using the
{bold} probe
statement.  It is observed that the gate oxide electric field suffered a 3 fold
increase, just after the strike, taking it close to the bulk dielectric 
breakdown field strength and therefore vulnerable to an irreversible di-
electric breakdown event.  The gate oxide Fowler Nordheim current was also
monitored and exceeded one tenth of a nano Amp.

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.


{subsection} radex12.in : Proton Irradiation Damage in a CMOS Image Sensor

Requires: Victory Process/Victory Mesh/Victory Device/REM
{newline}
Minimum Versions: Victory Process 7.22.3.R, Victory Mesh 1.2.4.R, Victory Device 1.12.1.R

This examples demonstrates Proton Irradiation Damage in a CMOS Image Sensor

This example uses Victory Process Cell mode to create a CMOS image sensor (CIS) 
complete with two pass transistors.  The image sensor was then irradiated with
a damaging fluence of protons in several stages, and the damage effects on the
performance of the image sensor were monitored.

In order to speed up the process simulation, initially 1D Monte-Carlo implant
simulations were stored as data files and imported into Victory Process Cell 
mode using the
{bold} Profile
statement.  Other implants used the 3D Monte-Carlo BCA simulator in the normal
way.

During Device simulations, the level of electron depletion in the active
section of the image sensor was monitored using the
{bold} Probe n.conc
statement.  Electrostatic potentials were also monitored using this method.

The image sensor was pulsed into deep electron depletion, and then monitored
with time, to see how long it took for thermal generation to re-fill the active
region of the image sensor.   The longer the time for thermal generation to 
refill the depleted active region, the more versitile the image sensor will be.

Once a baseline time was established for the un-damaged image sensor, the 
sensor was subject to proton fluxes of 1e10, 1e11 and 1e12 proton/cm2 and the
dark recovery time was re-tested to observe the effects of the proton induced
damage.  In this example, rather than use LOOP statements, the internal
{bold} Design of Experiments (DoE)
feature of deckbuild was used, using the
{bold} sweep
parameter to define the levels of proton irradiation per cm2.  It was found
that the damage was slight but noticable for a flux of 1e10 protons/cm2 but the
final proton flux of 1e12/cm2 was sufficient to render the image sensor non
operational.  When viewing the electrical results, it must be bourne in mind
that the proton damage also damages the pass transistors, which effects the
whole operation of the sensor.

The proton flux is set up using the
{bold} radiation proton energy=1.8 fluence=<p/cm2>
statement, with the total fluence being the variable in the Design of 
Experiments.  The damage rate and non ionizing energy loss are set on the
{bold} material dam.proton=1e3 dam.niel=3.1
statement.  The capture cross sections for the proton damage created defects is
set using the
{bold} defects fluence.model
statement.

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.


{subsection} radex13.in : High Dose Rate Radiation Detector Circuit

Requires: Victory Process/Victory Mesh/Victory Device/MixedMode/REM
{newline}
Minimum Versions: Victory Process 7.22.3.R, Victory Mesh 1.2.4.R, Victory Device 1.12.1.R

This examples demonstrates High Dose Rate Effects and uses MixedMode to 
Demonstrate Operation of a Radiation Detector Circuit.  The active device used
as the radiation detector is a PiN diode incorporating a field reducing edge 
termination contact which is created in Victory Process in 2D mode.  The PiN 
diode exhibits
{bold} circular symmetry, 
so full 3D effects can be simulated using a 2D structure with cylindrical 
symmetry corrections.

Once the PiN diode was created, the structure is loaded into the device 
simulator, and  SPICE circuit is included using
{bold} MIXEDMODE
syntax.  Two greatly differing prompt dose rates of 1e8 and 1e12 Rads/second
were simulated to test the versitility of the radiation detector circuit.  The
timing of the radiation bursts is determined by the
{bold} .RAD
statement in the MixedMode SPICE like syntax.

It is found that the radiation detector circuit gives a consistent detection 
output pulse for these two widely differing does rates and therefore total 
doses, validating the circuit design.

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.




{subsection} radex14.in : TCAD to SPICE - 6T SRAM SEU Simulation

Requires: Deckbuild / Victory Process2D / DevEdit 3D / Victory Mesh / Victory Device3D / SmartSpice
{newline}
Minimum Versions: Deckbuild 4.4.1.R / Victory Process 7.22.3.R / 
Devedit 2.8.26.R / Victory Mesh 1.2.4.R / Victory Device 1.12.1.R / SmartSpice 4.28.0.R

This examples demonstrates how the response of a single transistor to a Single
Event Strike, can first be simulated and calibrated using physics based TCAD 
simulation, and then how this exact response can be extracted into a data file
and incorporated directly into user specified circuit nodes of a Spice circuit 
simulation, for fast Spice analysis of a circuit to Single Event Upsets.

The example demonstrates how this entire TCAD to SPICE flow can be simulated
with just a single input file, executed in it's entirety in the deckbuild run 
time environment, without any intermediate input required from the user.

The example simulates the response of a single 65nm n-channel MOSFET to a 
Single Event Strike using physically based TCAD simulation.  The terminal
response from this TCAD simulation, is then captured in a data file.  This 
MOSFET response to the Single Event Strike can then be passed to a 100% 
SmartSPICE simulation to evaluate the whole circuit response to a strike.
Since the simulation is now 100% Spice, the total circuit simulation time of a
Single Event Strike is just a few seconds for a logic cell sized circuit.  This
allows many simulations of multiple Single Events, occurring in any transistor
in any circuit, occurring at any time, once the response to a particular strike
has been calibrated using physics based TCAD.

The 65nm SRAM is simulated in it's low power state, where the supply voltage is
reduced to 0.85 volts, as this represents the SRAM's most sensitive 
configuration to a Single Event Effect. 

The data flow in this particular example occurs in the following sequence:

{bullet} Start with a trusted Spice model from the foundry PDK that you are 
               currently using.
{newline}
{bullet} Using this PDK Spice model, simulate basic DC characteristics of the
               device type that is to be tested using a Single Event Strike, 
               such as unsaturated and saturated threshold voltage, IdVd curve
               sets etc.
{newline}
{bullet} Create a TCAD model of the device to be tested, and use the Spice 
               generated DC characteristics above, to ensure that the TCAD 
               simulations are a reasonable match to the Spice generated curves.
{newline}
{bullet} In TCAD, then simulate one or more strike events and capture the 
               device response by extracting a data file of time/current pairs.
{newline}
{bullet} The time/current pairs data file captured above, is then loaded into a
               pure Spice simulation as a time dependent current source at the
               circuit node under test, so the response of the whole circuit to 
               a Single Event Strike can now be simulated directly in Spice. 
               Multiple strikes at different times on different devices in the
               circuit can also be simulated using the same data file.
{newline}

With the data flow above in mind, the input file below goes through the
following simulation steps:

First, a two dimensional, 65nm nMOS device is simulated in Victory Process,
which enables a faster simulation than creating a full 3D structure.  The 2D 
structure is then extended into the third dimension using Devedit.  The 3D 
structure is now loaded into Victory Device, where several DC simulations, 
characterise the basic device electrical behaviour, which can then be compared
with the Spice model, to validate that similar behaviour has been obtained.

The energy of the Single Event Strike is characterized by a parameter called 
the 
{bold} "Linear Energy Transfer",
 or 
{bold} LET.  
The higher the LET, the greater the energy of the incoming particle or photon.
In this example, the LET value of the incoming strike is set up as a variable, 
by the line 
{bold} "set LET=1",
which creates a variable called 
{bold} "$LET"
and assigns it a unity value.  In order to convert the units of LET into units 
of pico Coulombs/um of track charge density, the 
{bold} LET value needs to be multiplied by 0.01035 for silicon material.
A second variable called 
{bold} "$density" 
is assigned this converted pico coulomb value.  Lastly, the units of the strike
are specified to be these same pico coulomb units, by the parameter 
{bold} "pcunits" 
in the 
{bold} "singleeventupset" 
statement that describes the time and track positional properties of the strike.

Once the Single Event Strike has been simulated, the time versus current data
is extracted using an extract statement, into a file called 
{bold} radex14.dat.  
An important part of this extract statement is the 
{bold} new "no.header" option, 
which strips off the normal header associated with a standard Silvaco data 
file format, which is a requirement for the data file to be read directly by 
SmartSpice.

Simulation of a 6 transistor SRAM cell, with a Single Event Strike on one of 
the nMOS transistors, can now be simulated directly in SmartSpice using the
newly creted data file.  The strike can also be associated with a time delay
before the strike occurs.  This delay is implemented in the 
{bold} "VSEU" 
line of the SmartSpice section of the input file, and is specified using the 
{bold} "TD" 
parameter.  In this simulation, the delay before the Single Event Strike is set
to be 0.5 micro-seconds by setting the parameter 
{bold} "TD=0.5u" 
on the 
{bold} "VSEU" 
statement.  

The huge advantage of importing the TCAD generated data file of the Single
Event Strike, directly into Spice, is that each Spice simulation, now only 
takes a couple of seconds, so many strikes at different times and for different
transistors, allows fast characterization of a circuit sensitivity to SEU upset
events.

 To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.




{subsection} radex15.in : 6T SRAM SEU Simulation using MixedMode3D

Requires: Victory Process2D / DevEdit 3D / Victory Mesh / Victory Device3D / MixedMode3D
{newline}
Minimum Versions: Victory Process 7.22.3.R / Devedit 2.8.26.R / 
Victory Mesh 1.2.4.R / Victory Device 1.12.1.R

This example is a variant of radex14, where instead of using pure Spice to 
simulate an SEU strike on a 65nm SRAM cell, the SEU simulation section uses 
MixedMode3D instead.

The Mixedmode3D simulation uses the same 65nm nMOS TACD structure that was
calibrated against a PDK Spice model in radex14, and wraps the rest of the SRAM
circuit around this TCAD structure using Mixedmode3D's Spice syntax.
The TCAD structure is struck with a 1 LET single event when it is in it's low 
power configuration with an applied supply voltage of 0.85 volts, which 
represents the state of highest sensitivity to being upset by a single event.

The data flow in this particular example occurs in the following sequence:

{bullet} The calibrated 65nm nMOS TCAD structure is the same one used in 
                the previous radex14 example
{newline}
{bullet} The 65nm nMOS TCAD only structure is biased into it's high sensitivity,
                low power off state, with Vd=0.85 Volts and Vs,Vg=0 Volts.  
                This TCAD only structure, in this biased state, is then saved.
{newline}
{bullet} A new device simulation, this time in MixedMode3D, which contains the
                rest of the SRAM circuit, is then specified, and the previously
                saved biased TCAD structure is loaded, and it's biased condition
                initializes the circuit state.  The line which loads the TCAD 
                structure intial state is:
{bold} .OPTIONS loadsolutions
{newline}
{bullet} After the MixedMode3D simulation is complete, the solutions are 
                plotted at the end.
{newline}

The energy of the Single Event Strike is characterized by a parameter called 
the 
{bold} "Linear Energy Transfer",
 or 
{bold} LET.  
The higher the LET, the greater the energy of the incoming particle or photon.
In this example, the LET value of the incoming strike is set up as a variable, 
by the line 
{bold} "set LET=1",
which creates a variable called 
{bold} "$LET"
and assigns it a unity value.  In order to convert the units of LET into units 
of pico Coulombs/um of track charge density, the 
{bold} LET value needs to be multiplied by 0.01035 for silicon material.
A second variable called 
{bold} "$density" 
is assigned this converted pico coulomb value.  Lastly, the units of the strike
are specified to be these same pico coulomb units, by the parameter 
{bold} "pcunits" 
in the 
{bold} "singleeventupset" 
statement that describes the time and track positional properties of the strike.

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.




{subsection} radex16.in : 6T SRAM SEU Simulation using SPICE only

Requires: SmartSpice
{newline}
Minimum Versions: SmartSpice 4.19.27.C

This example is a variant of radex14, where instead simulating the drain
current response from an SEU strike using TCAD, and then importing this SEU data
into a SmartSpice simulation, here we use an internal SmartSpice algorithm to
calculate the total track charge created by the strike which is then converted
into current time pairs internally at a specified device node and time.

The obvious advantage of using Spice to calculate the SEU track charge versus
time, instead of using TCAD, is simulation speed.  The downside is that the
calculation is a worst case calculation, since it is assumed that all of the
generated charge is actually collected by the device node, which is not usually
the case.  In reality, the actual fraction of charge collected depends on
strike angle and strike location and whether any carrier multiplication occurs
from high electric fields and internal gain etc.

The SEU event is struck at the same nMOS drain node, in the same SRAM circuit
as in radex14 example, and with the same Linear Energy Transfer value of unity,
which is now set in the
{bold} .PARAM DLET=1
statement.  The total charge in the charge track is calculated by integrating
over the SEU track length, which is set by the
{bold} .PARAM F_LENGTH=0.5u
statement.  Other timing parameters are also set on .PARAM statement lines.

For simulation method comparisons, the SRAM operation point is set to it's low
power configuration with an applied supply voltage of 0.85 volts, which
represents the state of highest sensitivity to being upset by a single event.

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.


{subsection} radex17.in : Single Event Latchup of a 3D 65nm CMOS Inverter

Requires: Victory Process Cell Mode / Victory Mesh / Victory Device
{newline}
Minimum Versions: Victory Process 7.22.3.R / Victory Mesh 1.2.4.R / Victory Device 1.12.1.R

A common issue for any CMOS circuit is the existance of a parasitic thyristor
resulting from the NPNP structure that exists between any complementary pair
source/drain contacts.  The four regions creating the NPNP thyristor, are the 
N-channel drain, N-channel Well, P-channed well, and P-channel drain 
respectively.  

In order for the parasitic thyristor to trigger, the NPN and PNP transistors,
making up the parasitic thyristor, must have a multiplied bipolar gain of at
least unity at the operating condition of the circuit.  Negating the triggering
of this parasitic thyristor is simply a matter of ensuring that this condition 
almost never happens.  There are two main ways to do this:

{indent}(i) Reduce the bipolar gain of the parasitic bipolars by heavily doping the
         respective base regions (the N and Pwell regions)  This is most often
        done by doping the bottom of the trench.  Careful consideration of 
        where this doping is placed is required so as to not increase any 
        parasitic capacitance significantly, which would slow the circuit 
        response time.
{newline}

{indent}(ii) use body tie contacts to connect the N-channel well to ground and the
        p-channel well to supply.  What this does is to short the two bipolar 
        base regions to their respective emitters, such that the parasitic 
        bipolar transistors can never reach a conducting state.  However, these
        body ties take up valuable circuit area, and so are used as sparsely as
        is practical.  If these body ties are too far apart, the voltage drop 
        can become sufficient for thyristor action to start.

In this example, body ties and implanting the base of the trench,  are 
deliberatly omitted, making this CMOS inverter particularly vulnerable to
thyristor action.  So much so that and SEU with an LET of unity, is sufficient
to trigger the CMOS inverter into a permanant conducting state, that can
be reset, as with any thyristor, by temporary removal of the supply voltage.

This example can be used as a starting point to investigate how the placement
of body ties and trench implantation techniques, will greatly increase the LET
value of an SEU strike that is required to make the circuit latch up.  The 
higher the LET value required to make the circuit latch up, translates 
directly, with an inverse relationship, into how often this will happen for any
given level of background cosmic or local radiation.

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.


{subsection} radex18.in : Proton Irradiation Damage in a 2N2222 Bipolar Transistor

Requires: Athena Atlas
{newline}
Minimum Versions: Athena 5.22.3.R  Atlas 5.26.1.R

This examples demonstrates the simulation of proton irradiation damage in a
2N2222 bipolar transistor.

The 2N2222 bipolar transistor is one of the most common devices found in 
satellites, and is a standard benchmark for devices to be tested against.
There are numerous manufacturers of this part number.  In this example, 
specifications were taken from an example made by ON Semiconductor.  The ON
semiconductor device exhibits a base/emitter breakdown voltage of 6 Volts and a
collector/base breakdown voltage of 70 Volts.  The floating base 
collector/emitter breakdown voltage is 40 Volts.  The minimum gain was 
specified at 100 when Vce=10 Volts.

Not shown in this example, the base doing was simulated such that Veb=6 Volts
with solid solubility doping in the emitter.  Once this base doping was known, 
the colletor doping was set such that Vcb>70 Volts with the previously 
extracted base doping.  The base width was set such that the current gain was
greater than 100 consistent with a floating base Vce>40 Volts.

Once the DC characteristics were satisfactory, proton irradiation was simulated
with a proton fluence of 1e11, 1e12 and 1e13/cm2, as set in the
{bold} radiation
statement using the
{bold} flence
parameter.  The physical damage created by the proton irradiation is caused by 
the
{bold} Non Ionising Energy Loss (neil)
parameter, since it is presumed that the ionising part of the energy loss 
mechanism occurs by elastic scattering, and therefore creates no damage.
Also set is the scaling factor parameter
{bold} dam.proton
and the energy of the in-coming protons.

For each fluence simulation, the simulator creates bulk defects in proportion
to the specified fluence, whose capture cross sections are specified in the
{bold} defects
statement, together with the
{bold} fluence.model
switch parameter.  The other defects statement in the input file is there 
because in this example, we are using a polysilicon emitter doping source, so a
further defect statement is required to specify the defects in the polysilicon
which obviously existed prior to irradiation.

To load and run this example, select the
{bold} Load
button in DeckBuild > Examples. This will copy the input file and any support files to your current working directory. Select the
{bold} Run
button in DeckBuild to execute the example.
