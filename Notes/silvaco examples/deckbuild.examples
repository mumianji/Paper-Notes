
{section} MOS1 : MOS Application Examples
 
{subsection} mos1ex01.in : NMOS : Id/Vgs and Threshold Voltage Extraction  


Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

Basic MOS Athena to Atlas interface example simulating an Id/Vgs curve
and extracting threshold voltage and other SPICE parameters.  No
advanced features are used in this example so as to demonstrate simple
functionality. This example demonstrates:

{bullet} Process simulation of a MOS transistor in Athena
{newline}
{bullet} Process parameter extraction (eg. oxide thicknesses)
{newline}
{bullet} Autointerface between Athena and Atlas
{newline}
{bullet} Aimple Id/Vgs curve generation with Vds=0.1V
{newline}
{bullet} Parameter extraction for Vt, linear gain (beta) and mobility
rolloff (theta)

The process simulation in SSuprem 4 follows a standard LDD MOS process.
The process steps are simplified and default models are used to give a
fast runtime. The polysilicon gate is formed by a simple geometrical
etch. Before this point the simulation is essentially one dimensional
and hence is run in Athena's 1D mode. After the poly etch, the structure
converts to 2D.
 
The grid used in this example is defined quite tightly. However the statement
{bold} init ...  spac.mult=3 
relaxes the mesh in X and Y directions by a factor of three. A more
typical mesh for MOS simulation can be obtained by setting
{bold} spac.mult=1
.


Using DeckBuild's auto-interface, the process simulation structure will
be passed into Atlas automatically. This auto-interface therefore
allows global optimization from process simulation to device simulation
to SPICE model parameter extraction.

The 
{bold} extract 
statement at the end of the file is used
to calculate the oxide thickness at that point. The value returned here
may be used as an optimization target for calibration. Refer to the
{bold} Interactive Tools of the Virtual Wafer Fab 
manual for instruction in the use of the
{bold} Optimizer
. This value will be appended to a file in the current working directory called 
{bold} results.final. 
When using the VWF automation tools,  
{bold} extract 
values are logged to the worksheet for RSM modeling.  Significant use of
{bold} extract 
statements is strongly recommended, especially at points where in-line
Fab measurements are taken. 

Electrodes are defined at the end of the process simulation. Metal is
deposited and patterned. Then
{bold} electrode 
statements are used to define the metal regions plus the polysilicon as
electrodes for use in Atlas.

In Atlas the first task is to define the models and material parameters
for the simulation. The 
{bold} contact 
statement is used to define the
workfunction of the gate electrodes, while the 
{bold} interface 
statement defines the fixed charge at the silicon/oxide interface. 
For simple MOS simulation the parameters CVT and SRH define the 
recommended models.
{bold} CVT 
sets a
general purpose mobility model including concentration, temperature,
parallel field and transverse field dependence. For more complete MOS
simulations of short channel lengths, energy balance simulation might
be used.

The statement
{bold} solve init 
is used to solve the thermal equilibrium case. After this the voltages
can be ramped. It is recommended to use small steps at first when
ramping voltages. Once two non-zero biases have been obtained, the
program uses a projection as initial guesses to further bias points.
The projection method allows larger voltage steps to be taken. The syntax
{bold} method trap 
enables Atlas to cut
user-defined voltage steps in half if convergence is not obtained.
This is a highly recommended option and is turned on by default.

The unique feature of this example is the IV data simulated and the
extraction syntax used. The model, interface and  contact 
statements in
Atlas are also as in the previous example.

The sequence of 
{bold} solve  
statements is set to ramp the gate bias with the
drain voltage at 0.1V. Solutions are obtained at 0.25V intervals up to
3.0V. All terminal characteristics are saved to the file mos1ex02_1.log
as specified in the 
{bold} log 
statement.

The 
{bold} extract 
statements at the end of the file are used to measure the threshold
voltage and other SPICE parameters. The results from the extract
statements are printed in the run-time output, saved to a file called
results.final and optionally used in the optimizer or VWF automation
tools. The syntax used in these statements is freely composed of
operators such as maximum value (max) and simulation results such as
drain current (i."drain"). The
{bold} name 
parameter specifies only a user-defined label. The routines are not
hard-coded to these names. Thus the first extraction statement reads:
extract the value called nvt found by taking the x intercept of the
maximum slope to the curve of drain voltage vs. drain current and
subtracting half the drain voltage. This is just one possible definition of
threshold voltage. Current search methods are also possible and are
described under the DIBL example later in this section. The VWF
interactive tools manual has details of the extract syntax.

The second extract statement measures the gain (or Beta). This is
defined as the value of the steepest slope to the Id/Vgs curve divided
by the drain voltage. The final extraction is for the SPICE level 3
mobility roll-off parameter (or Theta). This syntax shows the use of
the syntax:
{bold} $"nvt" 
and
{bold} $"nbeta"
. This tells DeckBuild to substitute the previously extracted values of
threshold and beta into this places in the equation.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.





{subsection} mos1ex02.in : NMOS : Family of Id/Vds Curves  


Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

Basic MOS Athena to Atlas interface example demonstrating the
simulation of a family of Id/Vds curves. The maximum drive current and
saturation slope are extracted.  No advanced features are used in this
example so as to demonstrate simple functionality. This example
demonstrates:

{bullet} Process simulation of a MOS transistor in Athena
{newline}
{bullet} Process parameter extraction (eg. oxide thicknesses)
{newline}
{bullet} Autointerface between Athena and Atlas
{newline}
{bullet} Id/Vds curve generation with Vgs=1.1, 2.2 and 3.3V
{newline}
{bullet} IV Curve parameter extraction for Idmax and saturation slope

The process simulation, process parameter extraction and electrode
definition for this example are exactly as described in the first
example in this section.

A more advanced sequence of solve statements is used for this example.
Three Id/Vds curves are required at different gate voltages. The first
part of the solve sequence sets up the initial point of the three
curves. For each of the the three gate voltages a solution with Vds=0.0
is simulated and the results saved to a solution file. 

Then each of these three solution files is loaded in turn into Atlas. A
log file is opened and the ramp of Vds is set. When a file is loaded the 
voltages in Atlas are reset to the values in the file. 

At the end of the simulation, 
{bold} extract 
is used to measure the peak current and the saturation slope. From the
shape of the Id/Vds curves the saturation slope is clearly the minimum
value of the gradient along the curve. Finally the three Id/Vds curves
are overlaid in TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.





{subsection} mos1ex03.in : NMOS : Sub-Threshold Slope Extraction


Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This is a basic MOS Athena to Atlas interface example simulating an Id/Vgs curve
and extracting sub-threshold slope.  No advanced features are used in
this example so as to demonstrate simple functionality. This example demonstrates:

{bullet} Process simulation of a MOS transistor in Athena
{newline}
{bullet} Process parameter extraction (eg. oxide thicknesses)
{newline}
{bullet} Autointerface between Athena and Atlas
{newline}
{bullet} Simple Id/Vgs curve generation with Vds=0.1V
{newline}
{bullet} Parameter extraction for Sub-Threshold Slope

The process simulation, process parameter extraction and electrode
definition for this example are exactly as described in the first
example in this section.

In Atlas the same sequence of statements is used as in the first
example in this section. The only difference is that the gate voltage is 
ramped from zero to 1.0V only in 0.1V steps.

The 
{bold} extract 
statement used in this example measures the sub-threshold slope of the
MOSFET. The syntax uses the operators log10(), slope() and curve() to
specify the reciprocal of the steepest slope to the curve of Vgs vs.
log(Id). Note that the operator log10() is needed here. The operator
log() specifies the function for natural logarithm.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} mos1ex04.in : NMOS : DIBL Extraction

Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

Basic MOS Athena to Atlas interface example simulating two Id/Vgs
curves at different drain biases and extracting the drain-induced
barrier lowering (DIBL) parameter. This example demonstrates:

{bullet} Process simulation of a MOS transistor in Athena
{newline}
{bullet} Process parameter extraction (eg. oxide thicknesses)
{newline}
{bullet} Autointerface between Athena and Atlas
{newline}
{bullet} Simple Id/Vgs curve generation with Vds=0.1V
{newline}
{bullet} Ramp of drain voltage
{newline}
{bullet} Simple Id/Vgs curve generation with Vds=3.0V
{newline}
{bullet} Parameter extraction for the DIBL parameter

The process simulation, process parameter extraction and electrode
definition for this example are exactly as described in the first
example in this section.

In Atlas, the models, interface and contact statements are also the same
as the first example. The extraction of the first Id/Vgs curve is very
similar to the previous threshold voltage extraction example.

One difference is the use of the syntax
{bold} compl=1.1e-7 cname=drain
. This sets a compliance limit on the drain current. Although the 
SOLVE statement calls for a ramp in gate voltage from zero to 1.5V, 
once the trigger current specified by 
{bold} compl 
is exceeded on the electrode specified by 
{bold} cname 
then the gate voltage ramp will stop and Atlas will execute the next
line of syntax.  Compliances are more commonly used in breakdown
simulations but can be used in this way to stop voltage ramps once the
area of interest is passed.


All results from the first Id/Vgs curve are saved to the file specified
by the first log statement. In Atlas, the only way to stop the IV points
being saved is either to specify another LOG statement or to use 
{bold} log off 
or exit the simulator. 
Here, 
{bold} log off 
is used to stop the output from the drain voltage ramp being
saved to the Id/Vgs logfile specified previously.

The second 'solve init' statement resets all applied voltages to zero.
Then the drain is ramped to 3.0V and the gate ramp with compliance is
repeated.

After each gate ramp the threshold voltage was extracted using a
different syntax than the NMOS threshold voltage example described
earlier in this section. In this example the threshold is determined by
looking for the voltage where the drain current reaches a user-defined
value. The syntax
{bold} x.val from curve (x,y) where y.val=<number> 
is used. At large drain biases this method is preferred for threshold
extraction over the steepest slope approach. The search value of
0.1uA/um of current is typical for channel lengths around 1um.
These thresholds are
stored as values nvt1 and nvt2 in DeckBuild. The final extract
statement is used to obtain the DIBL parameter. It is the difference in
threshold voltage divided by the difference in the drain bias.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} mos1ex05.in : NMOS : Body Effect Extraction

Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This is a basic MOS Athena to Atlas interface example simulating two Id/Vgs
curves at different substrate biases and extracting the body effect
(gamma) parameter. This example demonstrates:

{bullet} Process simulation of a MOS transistor in Athena
{newline}
{bullet} Process parameter extraction (eg. oxide thicknesses)
{newline}
{bullet} Autointerface between Athena and Atlas
{newline}
{bullet} Simple Id/Vgs curve generation with Vbs=0.0V
{newline}
{bullet} Ramp of drain voltage
{newline}
{bullet} Simple Id/Vgs curve generation with Vbs=-1.0V
{newline}
{bullet} Parameter extraction for body effect

The process simulation, process parameter extraction and electrode
definition for this example are exactly as described in the first
example in this section.

In Atlas, the whole example is very similar in syntax to the DIBL
parameter extraction example described previously in this section. The
difference is that different
substrate biases are used instead of different drain biases.

Two threshold voltages are measured using the extract syntax described
in the DIBL extraction example. The body effect parameter is derived
from the threshold voltages using the standard formula assuming 0.6V for phi. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} mos1ex06.in : NMOS : Substrate and Gate Current Extraction 

Requires: SSuprem 4/DevEdit/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This is a MOS Athena/DevEdit/Atlas interface example simulating substrate and
gate current versus gate bias using energy balance and impact
ionization models. This example demonstrates:

{bullet} Process simulation of a MOS transistor in Athena
{newline}
{bullet} Process parameter extraction (eg. oxide thicknesses)
{newline}
{bullet} Autointerface between Athena and DevEdit
{newline}
{bullet} Remeshing using DevEdit
{newline}
{bullet} Autointerface between DevEdit and Atlas
{newline}
{bullet} Solution for a Vgs ramp with Vds=3.3V
{newline}
{bullet} Parameter extraction for maximum gate and substrate currents

The process simulation, process parameter extraction and electrode
definition for this example are exactly as described in the first
example in this section.

The grid requirements for Atlas simulation of impact ionization effects
are more stringent than for the low electric field cases described
earlier. 
{bold} DevEdit 
is used to remesh the Athena structure before proceeding to Atlas.
DevEdit has two modes. The graphical mode allows users to draw and
interactively edit regions and impurities. The batch mode used here
executes structure and mesh commands similar to these. The syntax used
by DevEdit is described in the DevEdit manual. It can be constructed
from the DeckBuild Command menu, or most commonly mesh edits made during
a graphical session can be saved as a 'command file' from the SAVE menu of
DevEdit.

The imp.refine commands specify regrids on impurities. Here a regrid on
net doping is performed.  The constr.mesh command defines the base mesh. The
refine commands specify mesh refinements inside boxes specified by the
coordinates in each statement.

The Atlas simulation contains similar syntax to the simple examples
described earlier in this section. The solution of the energy balance
equations for electrons is specified by the parameter
{bold} hcte.el 
The parameter 
{bold} hei 
specifies the hot carrier injection model, which gives the gate
current.  The equivalent hcte.ho and hhi exist for holes but is not
required in NMOS simulation.

The impact ionization model is selected on the impact statement. The
parameter lrel.el sets the relaxation time for electrons in this
model.  Although the hei model is directly responsible for the gate
current, there is no 'special' model required to simulate substrate
current.  Running this sweep of gate voltage with a high drain bias and
including impact ionization and energy balance supplies all the
necessary physics. The substrate current can simply be plotted from the
log file in a similar manner to the drain current. No special extraction of
substrate current is needed.


The 
{bold} extract 
statements used in this run extract the peak value and position of the
substrate and gate currents. The value of the peak current is measured
first. This result is then used in a current search to find the gate
voltage where this current is measured.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} mos1ex07.in : NMOS : Breakdown Voltage Extraction  

Requires: SSuprem 4/DevEdit/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This is an Athena/DevEdit/Atlas interface example simulating the breakdown
voltage of an NMOS transistor. This example demonstrates:

{bullet} Process simulation of a MOS transistor in Athena
{newline}
{bullet} Process parameter extraction (eg. oxide thicknesses)
{newline}
{bullet} Autointerface between Athena and DevEdit
{newline}
{bullet} Remeshing using DevEdit
{newline}
{bullet} Autointerface between DevEdit and Atlas
{newline}
{bullet} Solution for a Vds ramp with Vgs=0.0V to get breakdown

The process simulation, process parameter extraction and electrode
definition for this example are exactly as described in the first
example in this section.

The grid requirements for Atlas simulation of impact ionization effects
are more stringent than for the low electric field cases described
earlier. 
{bold} DevEdit 
is used to remesh the Athena structure before proceeding to Atlas.
The remeshing commands are described in the previous example in this section.

The Atlas simulation contains similar syntax to the simpler examples
described earlier in this section. The models, contact and interface
parameters are the same, except that the concentration dependent SRH
model is used. This provides a more accurate simulation of the
pre-breakdown leakage current. The Selberherr impact ionization model
is also selected.

On the method statement, two parameters are chosen to restrict the use
of the current convergence criteria used in Atlas. Since the
pre-breakdown leakage current is very low it is necessary to tighten
the tolerances on current convergence. The parameter setting
{bold} method climit=1e-4 
is also recommended in cases where the mesh is not as tight as the one
used here.

The sequence of SOLVE statements shows a ramp in drain voltage. 
Small steps are taken at first, but the main simulation is done in 0.5V
steps. A compliance limit of 5.0e-8A/um is set on the drain. Compliance
limits are useful in breakdown simulations to stop the simulation once
the breakdown point is reached. 

The value used here might seems rather low compared to typical values
used in measurements. This is simply an issue of CPU time. Running the
simulation up into microamp or milliamp ranges is possible, however the
extra information gained is usually not worth the CPU time spent. 
No solutions will be possible once the voltage exceeds the breakdown voltage.
 Atlas will cut the voltage step and try again. It does this
four times resulting in a minimum step of (0.5)^4 or 0.0625V. This is
sufficient to resolve most breakdown voltages. It is possible for
users to ramp using smaller voltage steps, to use current boundary
conditions or curve tracing to further trace the IV curve to higher
values of current. However, this is usually not needed. Much extra CPU
time might be required and yet the value of breakdown voltage remains
the same to within the accuracy expected by simulation. Examples
demonstrating snapback and curve tracing are included in other
sections.

The 
{bold} extract 
syntax used to measure the breakdown voltage is of the current search
type. This is preferred over the simple max(v."drain") syntax that could
be used as it gives more consistent results.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



 

{subsection} mos1ex08.in : PMOS : Id/Vgs and Threshold Voltage Extraction  


Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This is a basic MOS Athena to Atlas interface example simulating an Id/Vgs curve
and extracting threshold voltage and other SPICE parameters.  No
advanced features are used in this example so as to demonstrate simple
functionality. This example demonstrates:

{bullet} Process simulation of a MOS transistor in Athena
{newline}
{bullet} Process parameter extraction (eg. oxide thicknesses)
{newline}
{bullet} Autointerface between Athena and Atlas
{newline}
{bullet} Simple Id/Vgs curve generation with Vds=-0.1V
{newline}
{bullet} IV Curve parameter extraction for Vt, Beta and Theta

The process simulation, process parameter extraction and electrode
definition for this example are exactly as described in the first
example in this section.

The unique feature of this example is the IV data simulated and the
extraction syntax used. The 
{bold} model, interface 
and  
{bold} contact
statements in
Atlas are also as in the previous example.

The sequence of SOLVE statements is set to ramp the gate bias with the
drain voltage at -0.1V. Solutions are obtained at -0.25V intervals up to
-3.0V. All terminal characteristics are saved to the file mos1ex02_1.log
as specified in the LOG statement.

The 
{bold} extract 
statement at the end of the file are used to measure the threshold
voltage and other SPICE parameters. The results from the extract
statements are printed in the run-time output, saved to a file called
results.final, and optionally used in the optimizer or VWF automation
tools. The syntax used in these statements is freely composed of
operators such as maximum value (max) and simulation results such as
drain current (i."drain"). One operator of particular use in PMOS device extraction is 
{bold} abs()
. This takes the absolute value of a variable and can be used to
make all PMOS and NMOS extractions equivalent.

The
{bold} name 
parameter specifies a user-defined label. The routines are not
hard-coded to these names. Thus the first extraction statement reads:
extract the value called pvt found by taking the x intercept of the
maximum slope to the curve of drain voltage vs. drain current and
subtracting half the drain voltage. This is just one definition of
threshold voltage. Current search methods are also possible and are
described under the DIBL example later in this section. The VWF
interactive tools manual has details of the EXTRACT syntax.

The second extract statement measures the gain (or Beta). This is
defined as the value of the steepest slope to the Id/Vgs curve divided
by the drain voltage. The final extraction is for the SPICE level 3
mobility roll-off parameter (or Theta). This syntax shows the use of
the syntax:
{bold} $"pvt" 
and
{bold} $"pbeta"
. This tells DeckBuild to use the previously extracted values of
threshold and beta in the equation.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} mos1ex09.in : PMOS : Family of Id/Vds Curves  


Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This is a basic MOS Athena to Atlas interface example demonstrating the
simulation of a family of Id/Vds curves. The maximum drive current and
saturation slope are extracted.  No advanced features are used in this
example so as to demonstrate simple functionality. This example
demonstrates:

{bullet} Process simulation of a MOS transistor in Athena
{newline}
{bullet} Process parameter extraction (eg. oxide thicknesses)
{newline}
{bullet} Autointerface between Athena and Atlas
{newline}
{bullet} Id/Vds curve generation with Vgs=-1.1, -2.2 and -3.3V
{newline}
{bullet} IV Curve parameter extraction for Idmax and saturation slope

The process simulation, process parameter extraction and electrode
definition for this example are exactly as described in the first
PMOS example in this section.

A more advanced sequence of solve statements is used for this example.
Three Id/Vds curves are required at different gate voltages. The first
part of the solve sequence sets up the initial point of the three
curves. For each of the three gate voltages a solution with Vds=0.0
is simulated and the results saved to a solution file. 

Each of these three solution files are then loaded in turn into Atlas. A
log file is opened and the ramp of Vds is set. When a file is loaded the 
voltages in Atlas are reset to the values in the file. 

At the end of the simulation, 
{bold} extract 
is used to measure the peak current and the saturation slope. From the
shape of the Id/Vds curves the saturation slope is clearly the minimum
value of the gradient along the curve as long as the absolute values of
current and voltage are taken. Finally the three Id/Vds curves are
overlaid in TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.







{subsection} mos1ex10.in : PMOS : Sub-Threshold Slope Extraction


Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This is a basic MOS Athena to Atlas interface example simulating an Id/Vgs curve
and extracting sub-threshold slope.  No advanced features are used in
this example so as to demonstrate simple functionality. This example demonstrates:

{bullet} Process simulation of a MOS transistor in Athena
{newline}
{bullet} Process parameter extraction (eg. oxide thicknesses)
{newline}
{bullet} Autointerface between Athena and Atlas
{newline}
{bullet} Simple Id/Vgs curve generation with Vds=-0.1V
{newline}
{bullet} Parameter extraction for Sub-Threshold Slope

The process simulation, process parameter extraction and electrode
definition for this example are exactly as described in the first
example in this section.

In Atlas the same sequence of statements is used as in the first
example in this section. The only difference is that the gate voltage 
is ramped from zero to -1.0V only in -0.1V steps.

The 
{bold} extract 
statement used in this example measures the sub-threshold slope of the
MOSFET. The syntax uses the operators log10(), slope() and curve() to
specify the reciprocal of the steepest slope to the curve of Vgs vs.
log(Id). Note that the operator log10() is needed here. The operator
log() specifies the function for the natural logarithm. It is obviously
necessary to take the absolute value of Id before the log10() operator
is used.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} mos1ex11.in : PMOS : DIBL Extraction

Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This is a basic MOS Athena to Atlas interface example simulating two Id/Vgs
curves at different drain biases and extracting the drain-induced
barrier lowering (DIBL) parameter. This example demonstrates:

{bullet} Process simulation of a MOS transistor in Athena
{newline}
{bullet} Process parameter extraction (eg. oxide thicknesses)
{newline}
{bullet} Autointerface between Athena and Atlas
{newline}
{bullet} Simple Id/Vgs curve generation with Vds=-0.1V
{newline}
{bullet} Ramp of drain voltage
{newline}
{bullet} Simple Id/Vgs curve generation with Vds=-3.0V
{newline}
{bullet} Parameter extraction for the DIBL parameter

The process simulation, process parameter extraction and electrode
definition for this example are exactly as described in the first
example in this section.

In Atlas, the models, interface and contact statements are also the same
as in the first example. The extraction of the first Id/Vgs curve is very
similar to the previous threshold voltage extraction example.

One difference is the use of the syntax
{bold} compl=1.1e-7 cname=drain
. This sets a compliance limit on the drain current.  Although the SOLVE
statement calls for a ramp in gate voltage from zero to -1.5V, once the
trigger current specified by
{bold} compl 
is exceeded on the electrode specified by 
{bold} cname 
then the gate voltage ramp will step and Atlas will execute the next
line of syntax. Note that the compliance value does not need to be
signed. A current more negative than -1.1e-7 will also trigger the
compliance limit. Compliances are more commonly used in breakdown
simulations but can be used in this way to stop voltage ramps once the
area of interest is passed. 

All results from the first Id/Vgs curve are saved to the file specified
by the first log statement. 
In Atlas the only way to stop the IV points
being saved is either to specify another LOG statement or to use
{bold} log off 
or exit the simulator.
Here, 
{bold} log off 
is used to stop the output from the drain voltage ramp being
saved to the Id/Vgs logfile specified previously.

The second 'solve init' statement resets all applied voltages to zero.
Then the drain is ramped to -3.0V and the gate ramp with compliance is
repeated.

After each gate ramp, the threshold voltage was extracted using a
different syntax than the PMOS threshold voltage example described
earlier in this section. In this example the threshold is determined by
looking for the voltage where the drain current reaches a user-defined
value. The syntax
{bold} x.val from curve (x,y) where y.val=<number> 
is used. At large drain biases this method is preferred for threshold
extraction over the steepest slope approach. The search value of
0.1uA/um of current is typical for channel lengths around 1um.
These thresholds are
stored as values pvt1 and pvt2 in DeckBuild. The final extract
statement is used to obtain the DIBL parameter. It is the difference in
threshold voltage divided by the difference in the drain bias.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} mos1ex12.in : PMOS : Body Effect Extraction

Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This is a basic MOS Athena to Atlas interface example simulating two Id/Vgs
curves at different substrate biases and extracting the body effect
(gamma) parameter. This example demonstrates:

{bullet} Process simulation of a MOS transistor in Athena
{newline}
{bullet} Process parameter extraction (eg. oxide thicknesses)
{newline}
{bullet} Autointerface between Athena and Atlas
{newline}
{bullet} Simple Id/Vgs curve generation with Vbs=0.0V
{newline}
{bullet} Ramp of drain voltage
{newline}
{bullet} Simple Id/Vgs curve generation with Vbs=1.0V
{newline}
{bullet} Parameter extraction for body effect

The process simulation, process parameter extraction and electrode
definition for this example are exactly as described in the first
example in this section.

In Atlas the whole example is very similar in syntax to the DIBL
parameter extraction example described previously in this section. The
difference is that different substrate biases are used instead of 
different drain biases.

Two threshold voltages are measured using the extract syntax described
in the DIBL extraction example. The body effect parameter is derived
from the threshold voltages using the standard formula assuming 0.6V for phi. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} mos1ex13.in : PMOS : Substrate and Gate Current Extraction 

Requires: SSuprem 4/DevEdit/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This is a MOS Athena/DevEdit/Atlas interface example simulating substrate and
gate current versus gate bias using energy balance and impact
ionization models. This example demonstrates:

{bullet} Process simulation of a MOS transistor in Athena
{newline}
{bullet} Process parameter extraction (eg. oxide thicknesses)
{newline}
{bullet} Autointerface between Athena and DevEdit
{newline}
{bullet} Remeshing using DevEdit
{newline}
{bullet} Autointerface between DevEdit and Atlas
{newline}
{bullet} Solution for a Vgs ramp with Vds=-3.3V
{newline}
{bullet} Parameter extraction for maximum gate and substrate currents

The process simulation, process parameter extraction and electrode
definition for this example are exactly as described in the first
example in this section.

The grid requirements for Atlas simulation of impact ionization effects
are more stringent than for the low electric field cases described
earlier. 
{bold} DevEdit 
is used to remesh the Athena structure before proceeding to Atlas.
DevEdit has two modes. The graphical mode allows users to draw and
interactively edit regions and impurities. The batch mode used here
executes structure and mesh commands similar to these. The syntax used
by DevEdit is described in the DevEdit manual. It can be constructed
from the DeckBuild Command menu or most commonly mesh edits made during
a graphical session can be saved as a 'command file' from the SAVE menu of
DevEdit.

The imp.refine commands specify regrids on impurities. Here a regrid on
net doping is performed.  The constr.mesh command defines the base mesh. The
refine commands specify mesh refinements inside boxes specified by the
coordinates in each statement.

The Atlas simulation contains similar syntax to the simple examples
described earlier in this section. The solution of the energy balance
equations for holes is specified by the parameter
{bold} hcte.ho
. The parameter 
{bold} hhi 
specifies the hot carrier injection model, which gives the gate
current.  The equivalent hcte.el and hei exist for electrons but are not
required in PMOS simulation.

The impact ionization model is selected on the 
{bold}impact 
statement. The
parameter lrel.ho sets the relaxation time for holes in this
model.  Although the hhi model is directly responsible for the gate
current, there is no 'special' model required to simulate substrate
current.  Running this sweep of gate voltage with a high drain bias and
including impact ionization and energy balance supplies all the
necessary physics. The substrate current can simply be plotted from the
log file in a similar manner to drain current. No special extraction of
substrate current is needed.


The 
{bold} extract 
statements used in this run extract the peak value and position of the
substrate and gate currents. The value of the peak current is measured
first. This result is then used in a current search to find the gate
voltage where this current is measured.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} mos1ex14.in : PMOS : Breakdown Voltage Extraction  

Requires: SSuprem 4/DevEdit/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This is an Athena/DevEdit/Atlas interface example simulating the breakdown
voltage of a PMOS transistor. This example demonstrates:

{bullet} Process simulation of a MOS transistor in Athena
{newline}
{bullet} Process parameter extraction (eg. oxide thicknesses)
{newline}
{bullet} Autointerface between Athena and DevEdit
{newline}
{bullet} Remeshing using DevEdit
{newline}
{bullet} Autointerface between DevEdit and Atlas
{newline}
{bullet} Solution for a Vds ramp with Vgs=0.0V to get breakdown

The process simulation, process parameter extraction and electrode
definition for this example are exactly as described in the first
example in this section.

The grid requirements for Atlas simulation of impact ionization effects
are more stringent than for the low electric field cases described
earlier. 
{bold} DevEdit 
is used to remesh the Athena structure before proceeding to Atlas.
The remeshing commands are described in the previous example in this section.

The Atlas simulation contains similar syntax to the simpler examples
described earlier in this section. The models, contact and interface
parameters are the same, except that the concentration dependent SRH
model is used. This provides a more accurate simulation of the
pre-breakdown leakage current. The Selberherr impact ionization model
is also selected.

On the method statement two parameters are chosen to restrict the use
of the current convergence criteria used in Atlas. Since the
pre-breakdown leakage current is very low, it is necessary to tighten
the tolerances on current convergence. The parameter setting
{bold} method climit=1e-4 
is also recommended in cases where the mesh is not as tight as the one
used here.

The sequence of solve statements shows a ramp in drain voltage. 
Small steps are taken at first, but the main simulation is performed in 0.5V
steps. A compliance limit of 5.0e-8A/um is set on the drain. Compliance
limits are useful in breakdown simulations to stop the simulation once
the breakdown point is reached. 

The value used here might seem rather low compared to typical values
used in measurements. This is simply an issue of CPU time. Running the
simulation up into microamp or milliamp ranges is possible, however the
extra information gained is usually not worth the CPU time spent. Once
the voltage exceeds the breakdown voltage no solutions will be
possible. Atlas will cut the voltage step and try again. It does this
four times resulting in a minimum step of (0.5)^4 or 0.0625V. This is
sufficient to resolve most breakdown voltages.  It is possible for
users to ramp using smaller voltage steps, to use current boundary
conditions, or curve tracing to further trace the IV curve to higher
values of current. However this is not usually needed. Much extra CPU
time might be required and yet the value of breakdown voltage remains
the same to within the accuracy expected by simulation. Examples
demonstrating snapback and curve tracing are included in other
sections.

The 
{bold} extract 
syntax used to measure the breakdown voltage is of the current search
type. This is preferred over the simple max(v."drain") syntax that could
be used as it gives more consistent results.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.







{subsection} mos1ex15.in : NMOS : Gate Length Scaling  


Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This is an Athena/Atlas interface example similar to the first example in this 
section. It demonstrates the setting of gate length through parameter 
substitution.

In this example an NMOS transistors length is defined with a 
{bold} set 
statement around the poly etch stage in the simulation. The 
{bold} set 
statement defines a variable used in a subsequent 
{bold} stretch 
statement to define the half length of the transistor.

Importantly, the variable $cd is also used to place the name of the
drain electrode in the subsequent 
{bold} electrode 
statement. This simplifies the position definition of the drain electrode.

Note the use of the 
{bold} right 
statement in the 
{bold} stretch 
command. This
makes sure that the coordinate system of the stretched device remains
unchanged from the original making sure that the left hand side of the
structure is in the same place as before. Both 
{bold} right|left 
flags are available.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{section} MOS2 : Advanced MOS Application Examples


{subsection} mos2ex01.in : Circuit Analysis of NMOS Inverters 

Requires: S-Pisces/MixedMode
{newline}
Minimum Versions: Atlas 5.24.1.R

This example uses the MixedMode module in Atlas to simulate the circuit
performance of two NMOS inverters in series. The first inverter is
simulated using Atlas, the second inverter using SPICE level 1 models.
This simulation shows how to:

{bullet} Create an NMOS structure using Atlas syntax
{newline}
{bullet} Calculate the initial DC state in circuit mode
{newline}
{bullet} Simulate the DC transfer curve of the inverters.
{newline}
{bullet} Simulate the transient switching curve of the inverters.

The input file consists of four separate runs, each starting with the statement 
{bold} go atlas. 
The first one uses the Atlas syntax to construct an NMOS transistor.
The mesh, regions and electrodes are specified as coordinates in the
syntax. It is compulsory to use electrode names (and not just numbers)
when the structure is used in MixedMode. The doping distribution for
the device is constructed from several gaussian and uniform analytical
functions. The final structure is saved for later use.

The second run calculates the initial operating point of the circuit.
The syntax for this run is split into two parts. The first is a
SPICE-like circuit description and control cards. This part is bounded by 
{bold} .begin 
and
{bold} .end
. The second is device
parameter syntax. The circuit netlist is written using standard SPICE
syntax. This example has two inverters composed of an NMOS transistor
and resistor connected in series feeding into a capacitor.

The two NMOS transistors are defined is different ways. The first labeled 
{bold} an 
is to be simulated in Atlas. The syntax specifies the structure file
name from the previous run, and also connects the circuit nodes to
electrode names. The other NMOS transistor labeled 'mn' is simulated
using using SPICE level 1 model labeled 'simple'.

After the .end statement the device parameter syntax is given. This
sets the models, material and contact parameters for the Atlas device.

The second run solves a single DC operating point as the initial guess
to the third run. The third run uses the command
{bold} .dc 
to set a DC ramp of the input voltage 'vin' from zero to 5.0V in 0.25V
steps. The currents and voltages for each node are stored in the file
specified in the
{bold} .log 
statement.

The final run uses the 
{bold} .tran 
statement combined with a time dependent definition of 'vin' using the
PULSE parameter to set up a switching transient. The PULSE syntax
specifies that the pulse of 'vin' has a peak value of 5.0V, a rise and
fall time of 50ps, and a time at peak value of 1ns. On the .tran
statement, 1ps specifies the initial timestep only. All other timesteps
are automatically calculated by Atlas. This differs from the .tran card
in standalone SPICE programs. The maximum simulation time is set to 3ns.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} mos2ex02.in : Hot Electron Reliability 

Requires: S-Pisces/C-Interpreter
{newline}
Minimum Versions: Atlas 5.24.1.R

This is a demonstration of the hot carrier reliability feature of Atlas. A PMOS transistor is stressed at high voltages and a threshold voltage shift observed.
The simulation shows:

{bullet} Formation of PMOS transistor using Atlas syntax
{newline}
{bullet} Id/Vgs test 
{newline}
{bullet} High voltage stress for 1000 seconds
{newline}
{bullet} Id/Vgs tests of devices at various stress times.

The example file consists of five separate Atlas runs each starting
with the statement
{bold} go atlas
. The first run uses the Atlas syntax to construct the geometry, mesh
and doping of a PMOS transistor. The doping is specified using gaussian
functions. The mesh file saved by this run is loaded into the next run.

The second Atlas run sets commands to perform an Id/Vgs simulation to
observe the threshold voltage and gain. A more complete description of
extracting PMOS threshold can be found in the MOS examples section.

The device degradation modeling is performed in the third run. First, the
structure is loaded and the correct workfunction and interface fixed
charge are set. On the models statement, the standard mobility and
recombination models are specified. The parameters
{bold} hei devdeg.e 
are also set. hei turns on the hot electron injection model for gate
current. The devdeg.e parameter sets that the gate current is used to
calculate device degradation. The
{bold} degradation 
parameter is used to specify the interface state density and the
electron trapping cross section, sigmae. The density of interface
states as a function of position is defined here using a C-INTERPRETER
routine. The external file
{bold} mos2ex02_devdeg.nta 
is used in this example. This file will be copied to your current
working directory if you press 'Load example'. This file contains a C
language description of the density of acceptor-like traps at the
oxide/silicon interface. Use of the C-INTERPRETER allows complete
flexibility in specifying the position of the traps.

The stressing conditions are Vds=-6.0V and Vgs=-1.5V. The device is
biased to these voltages in DC mode. Atlas is then switched to a
transient solution. Since the time of this transient is very long
compared with the transit time of carriers a faster transient solution
method can be selected using
{bold} method quasistatic
. 

The transient simulation is set to run for 1000s. At various intervals, data is
saved to solution files whose prefix is set to 'mosex02.str'. The
statement
{bold} output devdeg 
is required to save the interface trap occupancy to these solution
files. These files will be the initial starting points of the
subsequent Id/Vgs runs.

The fourth and fifth runs are just repetitions of the second one. They
perform the Id/Vgs test to observe threshold voltage and gain. However
the important difference is the the file loaded in the
{bold} mesh 
statement is the output files saved during the transient stress.


The Id/Vgs curves from the second, fourth and fifth runs can be
overlaid in TonyPlot to show the threshold voltage shift caused by the
hot carriers trapped at the interface.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.






{subsection} mos2ex03.in : Gate Turn-on Transient  

Requires: SSuprem 4/S-Pisces 
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates the transient simulation of a MOS transistor including:

{bullet} Formation of a MOS structure in Athena
{newline}
{bullet} Interface from Athena to Atlas
{newline}
{bullet} Specification of external RC elements to make an NMOS inverter
{newline}
{bullet} Transient simulation of gate turn-on

The process simulation follows a standard LDD MOS process. Further
description of the MOS process simulation and the Athena to Atlas
interface can be found in the description of the MOS examples.

In Atlas the first task is setting the gate workfunction using the 
{bold} contact 
statement and interface charge using the 
{bold} interface 
statement.  The models used for this simulation are selected using the macro 
{bold} mos
. This model set uses the CVT mobility model and SRH recombination. A
two-carrier solution is also specified on the models statement.
Two-carrier solutions are necessary for transients and when external
passive elements are used irrespective of the type of device being
simulated.

The second
{bold} contact 
statement is used to set the external resistance and capacitance on the
drain electrode. A resistance of 1.0e5 ohms.um is used to correspond to
a load resistor in a memory cell. A capacitance of 0.5pF/um is
specified to emulate the gates and interconnect the drain must drive.
These external elements emulate the formation of an NMOS inverter in
SPISCES. This contrasts with the previously described example using
MixedMode.

The initial state of the device is set at 5.0V on the drain. The    
{bold} local 
initial guess method is used to allow large change in the drain bias in
a single step. This local method will only converge if the change in
current caused by the voltage step is small. This is true here 
since the gate voltage is zero.

The 
{bold} solve 
statement for the transient simulation contains the final gate voltage,
the ramptime of the gate voltage, the initial timestep and the final
simulation time. Only the initial timestep is specified in the solve
statement. All other timestep sizes are calculated by Atlas based on
the local truncation error in the solution.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.








{subsection} mos2ex04.in : 3D Width Effect Simulation 

Requires: SSuprem 4/DevEdit 3D/Device 3D 
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates Id/Vgs simulation of a narrow N-channel MOS
structure in three dimensions.

In this example a 2D width cross-section of a MOS transistor is
constructed using SSuprem 4. The structure is then passed to DevEdit 3D
for extending to 3D. Then the structure is interfaced to  Atlas for
electrical testing. The input file consists of the following main
portions:

{bullet} Process simulation of field oxide bird's beak in Athena
{newline}
{bullet} Interface of the 2D structure from Athena to DevEdit 3D
{newline}
{bullet} Structure editing to create 3D MOSFET
{newline}
{bullet} Interface of the 3D structure from DevEdit 3D to Atlas
{newline}
{bullet} Simulation of the Id/Vgs characteristic in Atlas
{newline}
{bullet} Extraction of Vt and sub-threshold leakage parameters

The first stage of the input file simulates width cross section on an
NMOS device. The process sequence is for a LOCOS oxidation with a mask
edge at X=0.0um. A channel stop implant is performed before the oxidation.
Following the mask removal, a gate oxide is grown. Then a channel
implant is done before poly deposition.

The gate and substrate electrodes are defined at the end of the process sequence.
Only these two electrodes are present in this 2D section.
The source and drain will be added in DevEdit 3D.

DevEdit 3D is used convert the 2D Athena result to a 2D structure. Each
region from the 2D structure is given an extent in the Z direction.
This example will be a 0.5 micron long transistor. Thus the polysilicon
region extends only from 0.3 to 0.8 microns. The basic procedure in DevEdit 3D is:

{bullet} Modify existing region extent in Z direction (eg. polysilicon)
{newline}
{bullet} Add new aluminum regions for source and drain contacts.
Specify these as electrode regions.
{newline}
{bullet} Add N+ arsenic doping for source and drain. Be sure the Z
extent of the doping includes a 0.1 micron spacer away from the gate
edge. Specify y-rolloff (junction depth) and x and z rolloffs (lateral spread).
{newline}
{bullet} Define base level mesh (0.2x0.2 microns) and mesh the structure in X and Y.
{newline}
{bullet} Use REFINE to add mesh points in the channel region
{newline}
{bullet} Use the
{bold} z.plane 
statement to control the mesh in the Z direction. The Z direction mesh
is made up of planes XY mesh leading to prismatic mesh elements.

To generate DevEdit 3D syntax for a given set of structure editing and
mesh operation, it is often best to do these same operations in the
graphical mode of DevEdit 3D. DevEdit 3D allows users to save the
commands used in the graphical mode to a command file. It is this
command file that is used as the basis for the batch-mode DevEdit 3D
used in this example.


The Atlas simulation begins by reading in the structure from DevEdit 3D.
DeckBuild provides an automatic interface between DevEdit 3D and Atlas so that the
structure produced by DevEdit 3D is transferred to Atlas without having to
indicate the mesh statement in Atlas

The 
{bold} contact 
statement is used to set a work function on the polysilicon gate. The
{bold} models 
statement is used to select a set of physical models for this simulation.  In 
this case, these models are SRH recombination, the CVT mobility model, 
and one carrier model (carriers=1)

The drain voltage is set to 0.1V, and gate voltage is ramped. The IV
data is saved to a log file. This file is used as input to the EXTRACT
routines for threshold voltage and sub-threshold leakage. This file can
also be plotted in TonyPlot. The
{bold} save 
statement saves a 3D solution file. This can be plotted in 
{bold} TonyPlot 3D 
to see 3D distributions of potential and carriers.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} mos2ex05.in : Comparison of Id/Vds using EB and NEB models   

Requires: SSuprem 4/S-Pisces/Giga
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates fabrication and Id/Vds analysis of a short
channel structure with Energy Balance and Non-isothermal Energy Balance
Models. The example shows:

{bullet}  Creation of a  short channel MOSFET in Athena
{newline}
{bullet}  Regridding in DEVEDIT 
{newline}
{bullet}  Isothermal Id/Vds analysis in Atlas
{newline}
{bullet}  Non-isothermal Id/Vds analysis in Atlas


Deep submicron devices should be simulated using the Energy Balance Model
due to velocity overshoot and nonlocal impact ionization effects,
which could substantially influence device characteristics. For high
current levels (high gate voltages) the thermal self-heating effects
can also play an important role by decreasing mobility and the impact
ionization rate. This example demonstrates a comparison of Id/Vds curves
obtained between the Energy Balance and Nonisothermal Energy Balance Models.

The structure is formed using a standard LDD NMOS process and
regridding is performed in DEVEDIT to refine the mesh in the areas
where high electric fields will occur in Atlas. This procedure is
described under the Substrate and Gate current example in the MOS
example section.

There are two Atlas runs in this example file.  The first Atlas run
uses Energy Balance Model, and the second run uses both the energy
balance and heat flow equations.

In both runs the
{bold} material 
statement is used to assign an energy relaxation time for electrons.
The
{bold} models 
statement is used to select a set of physical models for this simulation.  In this case,
these models are CONSRH and AUGER recombination, the CVT mobility model, 
Band Gap Narrowing, two carriers model (carriers=2), and the energy balance equation
for electrons only (hcte.el).
The 
{bold} impact 
statement is used to assign the energy relaxation length for the Selberherr model.
The 
{bold} contact 
statement is used to assign the work function on the polysilicon gate.

The gate voltage is ramped to 3V. At this stage, a combined algorithm is used by specifying
{bold} method gummel newton
. This means that if convergence is not reached in decoupled (or gummel)
mode, the simulator will automatically switch to coupled (or newton)
mode .  The the drain voltage is then ramped. The combined algorithm is
typically used for low and moderate drain biases, and newton alone for high
drain biases.

The drain voltage is ramped to show the Id/Vds curves obtained up to
8V. This demonstrates the convergence improvements possible by using a
fully coupled solution for energy balance simulation. A decoupled
solution generally would not converge at higher drain biases.

In the second Atlas run, the same set of models is used, except that
the solution of the  lattice energy balance equation is activated using
{bold} models lat.temp
.

As with all lattice heat flow simulation, thermal boundary conditions must be defined.
Thermal boundary conditions are defined in the 
{bold} thermcontact 
statement.  A value of the thermal conductance is specified at the
thermal contact located along the substrate, whilst thermal isolation
conditions are assumed on the all other surfaces.
 
The final Id/Vds curves can be compared and overlaid using TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.






{subsection} mos2ex06.in : BSIM3 SPICE Model Extraction (Salicide process)

Requires: SSuprem 4/S-Pisces/Utmost
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates the extraction of a BSIM3 SPICE model from Atlas
simulation data of an NMOS transistor. The example:

{bullet} Forms a MOS device in Athena using a salicide process 
{newline}
{bullet} Uses assigned variables to parameterize the structure
{newline}
{bullet} Simulates Id/Vgs-Vbs curves in Atlas
{newline}
{bullet} Simulates Id/Vds-Vgs curves in Atlas
{newline}
{bullet} Interfaces to UTMOST for extraction of a BSIM3 parameter set.

The process simulation used for this example is an NMOS process flow.
Further description of MOS process simulation can be found in the MOS
examples description.  As a more advanced technique, this flow has been
parameterized in places using the
{bold} set 
statements. These are used to assign variables such as spacer width
which are then used later in several locations in the input file.
{bold} extract 
statements are used throughout the process simulation to measure
important process parameters. In terms of the SPICE model extraction, it
is vital to extract the gate oxide thickness in metres for use in
UTMOST.

The salicide process to create self-aligned silicides on the source,
drain and gate requires the use of the Athena/SILICIDES module. Users
who do not have this option could replace the silicidation steps with
metal deposition and patterning as used in the previous MOS examples.
In this transistor, titanium silicide is used. A titanium layer is
deposited and a short heat cycle applied. No special method parameters
are needed to enable creation of the silicide layer during this
diffusion. The remaining titanium is then stripped. These silicide
regions are indicated in the 
{bold} electrode 
definition in Athena.


The two Atlas runs in this example are also parameterized using the 
{bold} set 
statement. This enables easy conversion of the whole Id/Vgs and Id/Vds
tests from, say, NMOS to PMOS or 5.0V supply to 3.3V.

The first Atlas run simulates Id/Vgs curves at three substrate biases. The sequence of
{bold} solve 
statements is to first save three solutions at each back bias with Vds=0.1V and Vgs=0.0V. 
Each of these three files is then loaded in turn using
{bold} load 
and the gate voltage ramped up to the supply voltage defined as 'vdsmax'.
In this example all three curves are saved to a single log file.
However it is more traditional to save the three curves in separate
files. Either approach is possible.

The second Atlas run simulates Id/Vds curves at three different gate
voltages. A similar technique to the first run is used. Three solution
files are saved at each gate bias with Vds=0.0V. These are then loaded
in turn and the drain voltage ramped to 'vdsmax'. All the curves are
saved to a single log file although separate ones could be used for
each curve.

The final stage of the example is to run UTMOST to extract the SPICE
model. Important information about the structure such as gate oxide
thickness and gate length is transferred to UTMOST using the results of
{bold} extract 
statements in the Athena simulation. The log files from Atlas are
loaded and appended together. UTMOST then fits the SPICE model to the
complete Id/Vgs-Vbs and Id/Vds-Vgs data sets. All the UTMOST parameters
are stored to a file and then extract is used to print out the
parameters of interest.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} mos2ex07.in : NMOS Snapback 

Requires: SSuprem 4/DevEdit/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates the curve tracing algorithm in Atlas to
simulate  the snapback of a MOSFET. The example shows:

{bullet} Creation of a N-channel MOSFET in Athena
{newline}
{bullet} Remesh by DEVEDIT,
{newline}
{bullet} The Atlas curve tracing algorithm is used to trace MOS snapback.

A standard NMOS device is constructed, remeshed and loaded into Atlas.
The process simulation, interface to DEVEDIT and initial setup in Atlas
are described in the previous section under MOS examples.  

The initial syntax in Atlas sets all the required contact, interface
and model setting used for MOS simulation. These settings are described
in earlier example descriptions. Calculation of  impact ionization is 
necessary for breakdown and snapback simulation. The
{bold} impact 
statement is used to activate the Selberherr impact ionization model.

Curve tracing is an algorithm for choosing the boundary conditions for
a simulation to trace out an IV curve. It is typically used on curves
such as snapback or latchup with many turning points.

For curve tracing simulations the key statement is : 
{bold} curvetrace end.val=1.e-3 contr.name=drain curr.cont mincur=1e-10 nextst.ratio=1.3.
It is used to initialize parameters for the curve tracing algorithm. The
{bold}contr.name 
parameter specifies the name of electrode for which the load line
technique will be applied. Here this is the 'drain'. The 
{bold}curr.cont 
parameter sets
that value of current will be monitored. The simulation will stop when
the current exceeds the value specified by 
{bold}end.val 
parameter.
The 
{bold}mincur 
parameter defines the minimum current value after which the load
line technique will be actually be applied. Before that, pure voltage boundary
conditions are used. The 
{bold}nextst.ratio 
parameter defines the factor which is 
used to increase voltage step on parts of the IV curve away from the turning 
points. The main place this is used is in the pre-breakdown voltage ramp.
{bold} solve curvetrace 
is used to activate the curve tracing algorithm. 

The final snapback curve can be plotted using TonyPlot. To plot the drain 
voltage actually applied to the device, the x-axis should be set to 
{bold} drain int. bias
and not drain bias. 'drain int. bias' is the voltage on the
drain contact/semiconductor interface. The value of drain bias should be
disregarded since it includes the effect of the load line algorithm
used for the curve trace.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.






{subsection} mos2ex08.in : NMOS Second Breakdown Simulation

Requires: SSuprem 4/DevEdit/S-Pisces/Giga
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates fabrication and second breakdown analysis of
a short channel structure with non-isothermal energy balance models.

{bullet} A short channel MOSFET is created in Athena,
{newline}
{bullet} Regridding in DEVEDIT 
{newline}
{bullet}  Selection of the coupled solution of energy balance and lattice heating equations
{newline}
{bullet}  Electrical analysis using the curve tracer algorithm to trace the IV curve

Deep submicron devices should be simulated using the Energy Balance Model
due to velocity overshoot, and nonlocal impact ionization effects,
which could substantially influence device characteristics.  For high
current levels, the thermal self-heating effects can also play an
important role by decreasing mobility and impact ionization rate. This
example demonstrates second breakdown simulation with the non-isothermal
energy balance model using curve tracing algorithm.

A fully coupled approach is used to solve five equations in this
device. This provides much improved convergence over decoupled
techniques used in older Atlas versions.

The workfunction, interface charge and MOS models are set using the syntax as described in earlier examples. The 
energy balance equation for electrons and lattice energy balance
equation  are set by 
{bold} models hcte.el lat.temp
. The 
{bold} impact 
statement is used to assign the energy relaxation length for Selberherr
model.  Thermal boundary conditions are required with any
non-isothermal simulation. These are defined in the
{bold} thermcontact 
statement.  A value of the thermal conductance is specified at the
thermal contact located along the substrate. Thermal isolation
conditions are assumed on the all other surfaces.

The 
{bold} curvetrace 
statement is used to initialize parameters for curve tracing algorithm. A full description of the curve tracing syntax is included with the MOS snapback example. 
The gate voltage is ramped to 1V, and then the
{bold} solve curvetrace 
statement is used to activate the curve tracing algorithm.

Plotting the internal drain bias versus drain current in TonyPlot will
display the second breakdown curve.  The resulting curve from Atlas
shows several turning points. The second breakdown occurs at the final
stage where the voltage drops sharply. At this point both the lattice
and carrier temperatures are high.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} mos2ex09.in :  Drain/Gate Overlap Capacitance 

Requires: SSuprem 4/DevEdit/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates the extraction of the gate overlap capacitance
for an LDD MOSFET structure. The example shows:

{bullet} Construction of an LDD MOSFET in Athena
{newline}
{bullet} Regrid of the structure in DEVEDIT
{newline}
{bullet} Gate/drain overlap capacitance extraction using AC analysis

A LDD NMOS  device is constructed, remeshed and loaded into Atlas.
The process simulation, interface to DEVEDIT and initial setup in Atlas
are described in the previous section under MOS examples.  


One requirement for AC simulation is that a two carrier solution must be specified.  This is set with 
{bold} method carriers=2
.  After the initial
solution, a solution at a gate bias of -2 volts is obtained using the
local initial guess. The local method is convenient when taking large
voltage steps, but it assumes no current flow.   

Next, the
{bold} log 
statement is used to specify a file for saving the results of the
gate ramp.  Then, the gate is swept from -2 volts to 2 volts in 0.2
volt increments.  At each static solution of gate bias the small
signal AC response is solved at a frequency of 1 MHz.  These results
are saved in the log file.  Finally the overlap capacitance as a function
of gate bias is plotted using TonyPlot. In the list of XY graph variables 
in the TonyPlot DISPLAY menu, the capacitances and conductances are listed as:
{bold} C electrode_name_1 > electrode_name_2
. This means the capacitance between these two electrodes. A similar
construction is used with 'G' for conductance between two electrodes.
 When the two electrode names are the same, the magnitude of this value
is the total capacitance on this electrode.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} mos2ex10.in : 2D NMOS simulation from 1D Athena Doping 

Requires: Athena/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates the interface between Athena process simulation in 1D mode 
and Atlas (2D device simulation). The main features are:

{bullet} Run Athena simulation in 1D mode of NMOS source/drain doping 
{newline}
{bullet} Run Athena simulation in 1D mode of NMOS channel 
{newline}
{bullet} Combine two 1D doping files into a 2D structure in Atlas 
{newline}
{bullet} Regrid the structure based on net doping level

The key syntax for reading the Athena data into Atlas are the
{bold} doping 
statements.  The parameters of the doping statement specify the input
,filename, which dopant is to be used from the file and the 2D extent of
the doping. The
{bold} athena.1d 
parameter must be used to specify the data format of the Athena
1D profile.  

The lateral spread of the dopant in each doping statement is controlled by the 
{bold} ratio.lat 
parameter. This is a multiplier to the vertical rolloff.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} mos2ex11.in : Breakdown Voltage using Ionization Integrals

Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This examples uses a standard NMOS structure similar to that used in
the MOS1 section. In this example the Atlas simulation is performed using
{bold} zero carriers
. The breakdown voltage is extracted using
{bold} ionization integrals 
or
{bold} electric field lines 

The 
{bold} solve 
statement used to ramp the drain electrode has extra parameters for
calculating the ionization integrals at each step. When using
ionization integrals it is not necessary to solve for both carriers so
simulations are very fast. However, the statement
{bold} impact selb 
must be used to activate the ionization rate calculation.

The syntax of the solve statement sets the number of ionization
integrals, their position relative to the ramped contact (ie. drain),
and the voltage drop from the contact to the start point of the
electric field lines. Details of the syntax can be found in the Atlas
User Manual.  
{bold} deltav 
controls the distance of the start of each electric field line from the
ramped contact.
{bold} ionlines 
controls the number of electric field lines calculated.
{bold} lratio 
controls the spacing ratio between each line. Lratio < 1.0 means more
lines to the left of the contact. Lratio > 1.0 means more lines to the
right.

The breakdown voltage is defined as the point at which the ionization integrals are equal to 1.0. Although the 
{bold} solve
statement specifies a voltage ramp to 50V, the bias ramp will
automatically  stop when the ionization integrals exceed 1.0. The
parameter
{bold} ^ionstop 
can be included to disable this feature. If the position of the electric 
field lines are chosen correctly the electron and hole ionization integrals 
should equal 1.0 at the same voltage. If this is not the case, users should 
check the position of the electric field lines. 

The 
{bold} output 
statement is used to specify the electric field line parameters for the
saved solution file. Note that users must specify these parameters on
the output as well as solve statements to save the electric field
lines. The lines can be plotted in Tonyplot by selecting the LINES icon
from the PLOT/DISPLAY menu.

Following the simulation, the peak electric field is extracted from the
solution file. The
{bold} extract 
statement also reports the XY position of the peak. See the Simulation
Standard Hints and Tips page for August 1996 for more details.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.





{subsection} mos2ex12.in : SiGe PMOS Process and Device Simulation

Requires: SSuprem 4/Elite/Blaze
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates the interface from process to device
simulation for a SiGe PMOS structure. Physical deposition and etch
models are used to provide realistic topography. It shows:

{bullet} PMOS process simulation using Athena
{newline}
{bullet} Specification of Ge mole fraction in Athena
{newline}
{bullet} Use of ELITE deposition and etching for contact topography
{newline}
{bullet} Definition of SiGe dopants 
{newline}
{bullet} Interface to Atlas 
{newline}
{bullet} Saving and plotting of the band structure for the SiGe/Si heterojunction.
{newline} 
{bullet} Id/Vgs characteristic using Atlas

In this example a SiGe MOSFET structure is formed using process
simulation. This contrasts with the previous examples in this section.
To repeat the electrical analysis of the previous examples using this
structure the Atlas simulation of this example should be replaced with
the Atlas syntax for parameter settings, model selection, numerical
methods and solve sequences from the previous examples.

The simulation of SiGe structures in Athena is similar to pure silicon
MOSFET structures documented under the MOS examples section. The
differences described here are limited to the special syntax needed for
SiGe.

The Ge mole fraction in the deposited SiGe film is set by the 
{bold} c.frac 
parameter on the deposit statement. 

In FLASH it is necessary to define whether a dopant is donor or acceptor
explicitly for each material. The command
{bold} impurity i.boron acceptor sige 
is used to set boron as a p-type dopant in SiGe. A similar command is
used to define phosphorus as a  donor.

The interface from Athena to Atlas is the simple
{bold} go atlas 
statement. It saves the structure from Athena and transfers it to Atlas. No 
{bold} mesh 
statement is needed at the start of the Atlas run. The 
{bold} electrode 
statement in Athena is required to identify which regions are defined
as electrodes in Atlas.

The Atlas run in this file is very simple. It solves only a single bias
point with Vds=2.0V. To save the band structure the command
{bold} output con.band val.band 
is used. This tells Atlas to save the conduction and valence band edge
energies to any solution files saved using 
{bold} save
. The final structure in Atlas is displayed using TonyPlot. The band
diagram can be seen by taking a vertical 1D cross section in TonyPlot,
selecting the 1D plot and changing the display variables from the
scrolling list to be the two band edges.

{italic} For details on more complex applications of SiGe MOSFETs, users
{italic} should consult the other MOS examples. All SPISCES analysis
{italic} in these sections can be applied under Blaze to SiGe MOSFETs.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} mos2ex13.in : SiGe PMOS Id/Vds with NEB Model

Requires: Blaze/Giga
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates a comparison of Id/Vds analyses including
second breakdown of a short PMOS structure with a SiGe channel using
the non-isothermal Energy Balance (NEB) models.
It shows:

{bullet} Specification of PMOS structure using Atlas syntax
{newline}
{bullet} Specification of abrupt SiGe heterojunctions
{newline}
{bullet} Selection of the energy balance model, lattice heat flow solution
and coupled solver
{newline}
{bullet} Simulation of Id/Vds characteristic for Vgs=-1.0V


Many of the models and methods required for Id/Vds and breakdown
simulation are described in the snapback and second breakdown examples
in the MOS examples section. Some tips in defining SiGe structures are
also given in the HBT examples section. Users should consult both these
sections for more details on these two areas.

Submicron devices should be simulated using the energy balance model
due to velocity overshoot, and nonlocal impact ionization effects,
which could substantially influence device characteristics. For high
current levels the thermal self-heating effects could also play an
important role decreasing mobility and impact ionization rate. This
example demonstrates comparison of Id/Vds curves obtained with energy
balance and nonisothermal energy balance models. The curve tracing
algorithm is used to obtain these curves.

The example contains two Atlas runs. The first uses non-isothermal
energy balance simulation of an Id/Vds curve and the second repeats
this simulation without the lattice heating model.


The device is described in the first part of the input file, including
mesh, regions locations, electrodes locations, and doping distribution.
The
{bold} region 
statements are used to define SiO2, Si and SiGe regions. The Ge
composition fraction is defined  using
{bold} x.composition=<num> 
Since no grad.* parameters were used on the region statement the Ge
composition fraction has an abrupt change from 0.25 to zero at the
region boundary. This constitutes the abrupt heterojunction.
Discontinuities in band potentials will be seen at the SiGe/Si region
boundaries.


After the device description the
{bold} material 
statements are used to specify the electron and hole lifetimes, hole
energy relaxation times both in Si and SiGe, and Nc and Nv in SiGe.
The
{bold} model hcte.ho lat.temp 
statement is used to specify solution of the hole energy balance and
lattice heating equations respectively. Other carrier and lattice
temperature physical models are also set on the same statement.
The 
{bold} impact 
statement is used to assign the energy relaxation length for Selberherr model.

Thermal boundary conditions are defined in the 
{bold} thermcontact 
statement.  A value of the thermal resistance is specified at the thermocontact 
located along the substrate, and thermal isolation conditions are assumed on the 
all other surfaces.

Then the gate voltage is ramped to -2V, and then the curve tracing algorithm
is used for ramping the drain voltage. The
{bold} curvetrace 
statement is used to initialize parameters for the curve tracing algorithm. The
contr.name parameter specifies the name of the electrode for which the load line
technique will be applied (drain in this case). The curr.cont parameter means
that value of current will be monitored, and the simulation will be stopped when
the current exceeds the value specified by end.val parameter.
The mincur parameter defines the minimum current value after which the load
line technique will actually be applied (before that voltage boundary
conditions are used). The nextst.ratio parameter defines the factor which to 
use to increase voltage step on the smooth parts of the IV  curve.
The command
{bold} solve curvetrace 
is used to activate the curve tracing algorithm.

The second Atlas run uses the same syntax, except that the solution of
the  lattice energy balance equation is turned off in the
{bold} models 
statement. The Id/Vds curves from both runs can be overlaid using
TonyPlot. In plotting the drain voltage the quantity:
{bold} drain int. bias 
should be used in TonyPlot. This is the value of the voltage on the
metal/semiconductor interface at the drain as opposed to 'drain bias'
which includes the load resistor used in the curve trace algorithm.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

 
{subsection} mos2ex14.in : Comparison of CVT, SHIRAHATA and WATT Mobility Models

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

THe example demonstrates a comparison between three different surface
mobility models used in MOSFETs. THe example consists of four Atlas runs that:

{bullet} Define optimum MOS mesh using a variable for surface mesh spacing
{newline}
{bullet} Select in turn one of three MOS Mobility Models
{newline}
{bullet} Run a Id/Vgs simulation at low Vds
{newline}
{bullet} Overlay of Id/Vgs curves and mobility in Tonyplot

The mesh generation and structure deinfition part of this input file
follows the standard syntax outlined in the Getting Started Chapter of
the Atlas manual. A variable
{bold} surf_a 
is used to set the mesh spacing at the silicon surface. This mesh
spacing is important in resolving the high electric field and carrier
concentration gradients at the surface. The sensitivity of the mobility
models to mesh variations can also be easily examined by re-running
this example with different settings of surf_a.

The three models compared in this example are 
{italic} CVT, Shirahata 
and
{italic} Modified Watt
. The CVT model is selectred simply with the syntax 
{bold} models cvt 
since it contains doping and parallel field dependence. The Shirahata
model contains only a perpendicular field dependence. It must be
combined with Klaassen's model and the standard field dependent
mobility model using
{bold} models kla shi fldmob
.

The modified Watt model also needs to be combined with other models. The syntax is:
{newline}
{bold} models conmob fldmob  
{newline}
{bold} mobility watt.n mod.watt.n 

Extra parameters are also required to determine the range of the modified Watt model. These parameters are 
{bold} ymaxn.watt 
that specifies the depth of the Watt model and 
{bold} min.surf 
that specifies the lateral extent by restricting the model to minority
regions. In this case this means the channel and not the LDD or source and
drain regions.


The Id/Vgs simulation is similar to that in the previous section. For the
initial drain biasing, the syntax
{bold} method gummel newton 
is used. This provides better convergence at low biases. 
The simulation reverts to
{bold} method newton 
once the drain is biased.
Note that in this case only electrons are needed. The syntax
{bold} method carriers=1 electrons 
is used to specify that only electron continuity and poisson equations are to
be solved.

The 
{bold} probe 
statement is used to save the surface mobility and perpendicular field at the
center of the channel. Values for both these parameters are saved to the 
{italic} log 
file. TonyPlot can be used to display graphs of mobility vs. field.
Note that the probe statement reports the exact mobility used in Atlas
calculations. The value is calculated at the centre of the side of each
triangle. The nearest such point to the location of the probe is used.
Values of mobility or field from the probe might differ from values saved
in the 
{italic} solution file
. The solution file saves the average value of such quantities at a node
point. With coarse or bad meshes, this may result in inaccurate plots.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mos2ex15.in : Effect of Poly Depletion on C-V curves

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example shows how reduced poly doping can result in depletion occuring in
the poly gate under bias.  This undesireable effect shows up in 
Capacitance-Voltage (C-V) curves as anomolies in the shape of the plot.

The effect of reduced poly doping in a MOSFET with a thin gate is to reduce
drain current drive and increase the threshold voltage, since some of the
voltage that should be dropped across the gate oxide is now dropped across the
depletion region in the poly gate.

The usual causes of reduced doping in the poly are counter doping process flows,
insufficient source-drain implant dose, and evapouration of dopant during 
thermal anneals due to the lack of a capping oxide.

The example shows both the band diagram and Capacitance-Voltage curve of a P+
poly gate doped to a concentration of 1e19/cm3.  The program then goes on to
compare the same C-V plot and band diagram for the poly gate doped to 1e20/cm3
and 1e21/cm3 by overlaying the three cases.

It will be obseved that even for a poly gate doped to 1e20/cm3, depletion 
occurs in the poly gate giving anomolous C-V characteristics.  This can have
serious consequences if the maximum value from the C-V curve is used to measure
the thickness of the gate oxide.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mos2ex16.in : Effect of Poly Doping on Threshold Voltage

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example shows the dramatic effect of depletion in the poly gate when the
doping in the poly is reduced below its maximum level.  The I-V curves show
that even a doping density of 1e20/cm3 in the poly is not sufficient to 
prevent depletion, loss of current drive and a shift in the threshold voltage
of the n-MOSFET.

The first indication of poly depletion is non ideal C-V curves as shown in the
previous "Poly Depletion" example.  Reduced doping in the poly gate can be a
combination of insufficient implant dose, counter doping of P+ poly and dopant
evapouration during uncapped anneals.

The program runs three identical simulations the only difference being the
doping in the poly gate.  Three doping levels are simulated, 1e19, 1e20 and
1e21/cm3.  At the end of the three simulations, the I-V curves of the n-MOSFET
in the region of the threshold voltage are plotted.  The effect of poly doping
is demonstrated by the increased threshold voltage and reduced current drive
with reduced poly doping. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mos2ex17.in : 20nm n-MOSFET created using 60nm lthography

Requires: SSuprem 4/MC Implant/Elite/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This examples demonstrates the creation of a self-aligned 20nm n-MOSFET using a
60nm lithography node.  This Silvaco designed process has several advantages:

{bullet} The channel implant does not penetrate the gate insulator
{newline}
{bullet} Transient enhanced diffusion effects in the silicon are avoided
{newline}
{bullet} Very low energy implants are avoided
{newline}
{bullet} 20nm gate length devices can be fabricated using 60nm litography

Non penetration of the gate stack by the channel implants removes the damage
that this implant usually causes.  The source/drain implants are also arranged
in such a way that damage to the silicon is avoided. Transient enhanced
diffusion in the silicon and other damage effects therefore do not occur.
Implant energies of 10keV are used, allowing the use of standard implanters,
and finally the 20nm device can be created with 60nm lithography technology,
thus reducing the cost.

The stress induced by the nitride spacers is calculated in Athena which is
passed to the Atlas device simulator and converted into strain.  This strain
is used to calculate the strain modified bandgaps and mobilities in the device.
  
In Atlas, the strain dependent bandgap model is invoked by the
{bold} STRESS 
parameter in the 
{bold} models 
statement and the strain dependent mobility models are
invoked by the 
{bold} EGLEY.N 
and 
{bold} EGLEY.P 
parameters in the 
{bold} mobility 
statement.

The output statement adds electron mobility and velocity to the saved structure
files, from which it can be seen that most of the channel is velocity saturated,
or close to it, as a result of the extreme dimensions of this device.  As a
result of these dimensions, the device yields an output current density
exceeding 2000uA/um for Vg=Vd=1.2V

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} mos2ex18.in : Negative Bias Temperature Instability of a Silicon pMOSFET

Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example creates a pMOSFET and models the degradation
caused by stressing at negative gate bias and elevated
temperature.  After relaxing the device the permanent
component of the degradation is shown. The actual size 
of the degradation is enhanced compared to reality,
for the purposes of illustration.  The example shows
how to :
{newline}
{bullet} Create a PMOS structure using Athena syntax
{newline}
{bullet} Set up the 2-stage Negative Bias Temperature Instability model
{newline}
{bullet} Do a transient simulation of stress and relaxation at elevated temperature.
{newline}
{bullet} Obtain Id-Vg curves using loaded structure files with saved trap state occupations.

The input file consists of four separate runs,  the first starts Athena
{newline}
{bold} go athena
{newline}
which uses commands similar to those in mos2ex12 to create an example
 pMOSFET structure.  The next section starts Atlas
{newline}
{bold} go atlas 
{newline}
and sets up the interface traps at a density of 1e12 per c.c. on the 
{bold} INTTRAP 
statement.  The particular model used is the 4-state stochastic 
model GRA.4.STO. This is described in detail in the Atlas users manual.
The traps at each interface point are divided into 
GRA.SAMPLES subtraps, and the parameters for each one are chosen from
a random uniform distribution, determined from the specified mean value
and variance parameters.  The set of 
{newline}
{bold} PROBE FT.MSC MSCSTATE=n [position]
{newline}
statements cause the values of the trap occupation probabilities
at the particular location on the interface be written to the log file.
The location parameters must position the probe exactly on an interface to obtain
 correct values.
The traps are initialised to all be in the
precursor state, and then a transient simulation is done at negative 
gate bias with the device biased to conduct.  At various points the 
structure file is saved, the TRAPS parameter on the OUTPUT statement
ensures that the current occupation probabilities of all the subtraps
are saved to the file.  In the next section starting Atlas again 
{newline} 
{bold} go atlas 
{newline}
the structure file corresponding to the device after 100 s of stressing
is read in.  On a transient ramp the
the gate and drain bias are quickly reduced to zero and a transient 
simulation with the device in this relaxed state is run to 1000 seconds.
The structure file is saved at the end of the run.  In the final section 
starting Atlas again
{newline}
{bold} go atlas 
{newline}
the mesh is read in and the simulation flags set.  The deck then loops
6 times between the statements
{bold} loop steps=6 
and 
{bold} l.end 
to read in a sequence of saved structure files and obtain the
Id-Vg characteristics of the virgin device and the degraded devices.
The degradation is partially recoverable,  after 1000 s of realxation
the degradation is better than it is immediately after 100 s of 
stressing.  This is due to structural relaxation of some traps
back to the precursor state, whilst some remain as charged interface 
(Pb) states. 
{newline}
To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} mos2ex19.in : Threshold Voltage Hysteresis of a Silicon nMOSFET

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example shows how to simulate the finite charging and discharging times of
interface traps without doing a transient simulation.
The example demonstrates:

{bullet} How to use the sweep and save parameters of dbinternal.
{newline}
{bullet} Set up a deck with interface traps extending into the oxide.
{newline}
{bullet} Do a steady-state voltage ramp while simulating the temporal response of traps.
{newline}
{bullet} Obtain and visualise the threshold voltage differences as a function of simulated ramp time.
{newline}

The file mos2ex19.in starts dbinternal and instructs it to
use mos2ex19_aux.in.  The statement
{newline}
{bold} sweep parameter=measurementtime type=power range="1.0, 1.0e-4, 9" 
{newline}
causes the deck to be run 9 times in succession with the value of measurement time
varying between 1.0 and 1.0e-4 in a semi-decade decrease each time.  The file
mos2ex19_aux.in sets up a basic nMOSFET, and the statement
{newline}
{bold} inttrap e.level=0.6 acceptor density=1.0e12 s.i degen=4 sign=1.0e-13 sigp=1.0e-14 x.min=0.6 x.max=0.9 heiman depth=0.002 hpoints=20 
{newline}
sets up a uniform distribution of acceptor-like traps along part of the Si/SiO2 interface. The areal density is
1e12 /cc and the depth is 0.6 eV below the Silicon conduction band.  The HEIMAN flag causes the traps
to have a uniform distribution into the interface to a depth of 2 nanometres, covered by a vertical interpolation
mesh of 20 points.  How this affects the capture and emission times of the carriers is explained in the 
manual.
The solve statement parameter 
{bold} timespan 
is assigned a value from the current value of measurementtime, and supplies the
overall time for the ramp to the HEIMAN model. The drain is biased to conduct and then the
gate voltage is ramped from 0V to 3V. The trap occupancy is then calculated
at each bias step according to the bias value and the elapsed time.  At the end of the
forward ramp, the gate voltage is ramped down to 0 V again, with the same value assigned
to timespan. 

The threshold voltages and their difference are calculated and are output to the file
mos2ex19.dat in a format suitable for viewing by Tonyplot. This was specified in the 
statement
{newline}
{bold} save type=sdb outfile=mos2ex19.dat
{newline}
in mos2ex19.in.  The log files for forward and reverse gate bias ramps are also
output, and the ones plotted correspond to the last value of measurement time used
(0.1 milliseconds).

The traps are initially empty and as the bias increases they start to fill with electrons.
For a short measurement time the traps occupation fraction is small when the threshold gate
voltage is exceeded and so there is no significant effect on the threhold voltage.  At the 
end of the ramp the trap occupation is higher.  A solve prev at this stage would cause the
trap occupation probabilities to achieve their steady state values.  Instead, the gate voltage
ramp is reversed and the traps continue to charge until the gate voltage is reduced enough
that carrier emission starts to dominate.  The threshold voltage occurs while the traps still 
have a high occupation probability and contibute a negative interface charge.  Consequently
the threshold voltage is higher on the reverse ramp.  This difference is plotted as a
function of measurement time, and is more pronounced for shorter simulated measurement
times. For longer measurement times the traps have time to respond to the bias changes and
no hysteresis effects are seen.  Typical Id-Vg curves and trap occupation probabilities versus Vg
 curves are shown for a measurement time of 0.1 milliseconds. They clearly demonstrate the
 hysteresis.  Actual Vt values can also be plotted from mos2ex19.dat.

{newline}
To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mos2ex20.in : Reaction-Diffusion degradation modelling of a Silicon pMOSFET

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example is similar to mosex18 but uses a different degradation model.
It demonstrates :

{bullet} Using Athena to set up a pMOSFET.
{newline}
{bullet} Setting up a deck with with the Reaction-Diffusion degradation model enabled.
{newline}
{bullet} Doing stressing and relaxation biasing transient simulations.
{newline}
{bullet} Using PROBE statement to get hydrogen densities.
{newline}
{bullet} Obtaining Id-Vg curves for degraded device structures.

The first section beginning
{newline}
{bold} go athena
{newline}
is much the same as mos2ex18.  The next section starting
{newline}
{bold} go atlas
{newline}
enables the reaction-diffusion model using the DEVDEG.RD parameter
{newline}
{bold} model temp=300 mos hhi devdeg.rd devdeg.h
{newline}
and the parameter DEVDEG.H specifies that the traps created will become positively charged. 
The hot hole model is also enabled.  Accompanying the models statement is 
{newline}
{bold} degradation rd.sihtot=1.0e12 rd.h.hccoef=1.0e8 rd.kf0=2.0e-4 rd.aevar=0.05 rd.kr0=1.0e-13 rd.invhcoef=0.01 rd.coupled
{newline}
which sets the density of passivated bonds on the interface using the RD.SIHTOT parameter.  The contribution of hot holes
to the degradation is included by assigning a value to the RD.H.HCCOEF parameter.  The depassivation rate constant RD.KF0
is set to 2.0e-4 /s and the repassivation rate constant to 1e-13 cc /s.  The default activation energy of 1.5 eV is
used with a variance of 0.05 eV as specified by the RD.AEVAR parameter.  The RD.INVHCOEF parameter enables the inversion 
hole contribution to depassivation rate, and the RD.COUPLED flag enables fully self-consistent coupling between the 
hydrogen generation rates and the other equations.

The PROBE statements probe the atomic hydrogen and molecular hydrogen compositions at various points near to the
Si/SiO2 interface.

The device is stressed to -2.0 V on the gate and 0.1 V on the drain and the simulation run
for 100 s.  The DEVDEG parameter on the LOG statement means that the total interface charge due to
degradation is stored in the log file.  The depassivation process creates atomic hydrogen which
then diffuses and dimerises to molecular hydrogen.  The default values for diffusion and dimerisation
have been used,  details are given in the manual.

In the next section, starting
{newline}
{bold} go atlas
{newline}
the same models are set and the device structure degraded to 100 s is read in using the LOAD statement.
The gate and drain biases are zeroed on a short ramp and the device is relaxed to 1000 s. The presence
of atomic hydrogen which has not diffused away from the interface means that the repassivation rate is
greater than the depassivation rate, most notably in the channel under the gate. This is seen in the 
integrated degradation charge which is captured in the log file and is plotted at the end of the relaxation
simulation.

The structure files from this and the previous section are all saved with the DEVDEG parameter on the OUTPUT
statement causing the degradation trap density to be output.  This is then used in the final section, starting
{newline}
{bold} go atlas
{newline}
where each of the saved structure files is read in turn during the loop statement, and the Id-Vg curves
obtained. These are then plotted and you can see that the relaxed structure has retained a small shift in
threshold voltage.  This is disproportionate to the overall reduction in interface charge density, and is
due to the large repassivation occuring at the interface under the gate,  where the device is most sensitive
to interface charge.  Over longer time periods the free hydrogen will diffuse away and repassivation will cease.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} mos2ex21.in : 3D FinFET Simulation

Requires: Victory Process, Victory Device
{newline}
Minimum Versions: Victory Process 7.14.3.R,  Victory Device 1.10.2.R

By default Victory Process and Device run on just one processor.
To ensure better perfomance on your computer the following simulation condition
{bold} simflags="-P all" 
could be specidied in the 
{bold} go 
line starting Victory Process or Device. This means that all processors available will be used.
If you want to use a smaller number of processors you can substitute "all" with a desired number, e.g.
{bold} simflags="-P 4".

In this example, a FinFET is created using the etch, deposit, diffusion and 
Monte-Carlo implantation modules of VictoryProcess.

The structure created by VictoryProcess is then saved using the 
{bold} Export 
command saving a full 3D Delaunay mesh and is then transferred to VictoryDevice 
for electrical analysis of the unsaturated Vt curves as well IdVd curves.

The device simulation uses the 
{bold} energy balance model 
to account for the effects of
{bold} ballistic carrier transport
, which significantly increases drain currents and is the cause of the decrease
in the output impedance of the IdVd curves.

It also uses the 
{bold}  Bohm Quantum Potential (BQP)
model to take into account quantum
confinement of carriers in 3 dimension which significantly decreases the drain currents.

For comparison purpose Drift Diffusion are also included in the simulation

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} mos2ex22.in : Creating a Paper Spice Model Card from nMOS TCAD simulations

Requires:  Victory Process / Victory Device / UTMOST-IV
{newline}
Minimum Versions: Victory Process 7.14.3.R / Victory Device 1.10.2.R / UTMOST-IV  2.1.1.R

This example shows how to generate a 
{bold} paper Spice model card, 
from a device that has not yet been created, but has only been simulated in 
TCAD.  Once the deckbuild input file has been created, the entire flow can be 
run, without operator intervention, in the deckbuild environment.

The example flow creates a 3D 65nm nMOS transistor using Victory Process, then 
simulates unsaturated and saturated threshold voltage curves and an IdVd curve 
set, using VictoryDevice.  These curves are then used as input to the Spice 
Model extraction and optimization tool, called UTMOST-IV.

The UTMOST-IV section begins with the 
{bold} go utmost4
line, and the entire script from the
{bold} script begin
line to the 
{bold} script end
line is passed to the UTMOST-IV simulator.  The
{bold} run script
line then informs UTMOST-IV to run the passed script.  Deckbuild will not 
continue on to the next lines, until the script is completed by UTMOST-IV.

The first few lines begining with
{bold} var
declares variables that will be modified later.  This variable declaration is
not strictly necessary, but is good practice and is strongly advised. 

The next two blocks of the input file load and format the unsaturated and
saturated threshold voltage log files generated from the TCAD simulations.

The third block of the input file creates a "for" loop to load in the four
IdVd TACD log file curves.  The variable "i" is used to index the log file
number included at the end of each of the separate TCAD log file base names.
Once all these TCAD data quantity names and data formats have been defined, 
the whole data set is saved using the
{bold} saveDataSets
parameter, which creates the 
{bold} mos2ex22.uds
file, which will be used as the curve reference data in the Spice model card
optimization routine.

Currently in UTMOST-IV, there is still one project file that needs to be 
created in the UTMOST-IV interactive GUI, before UTMOST-IV input files can be
run in the deckbuild run time environment.  This is the
{bold} mos2ex22.prj
file, which has already been created for you, so there is no need to open the
UTMOST-IV GUI to run this example.  It is envisioned that in a future version
of UTMOST-IV, it will be possible to also create this project file within the 
deckbuild script, allowing complete optimization input files to be created 
within the deckbuild environment.

The optimization process involves loading a default Spice Model, setting some
base device characteristics in the Spice model card, such as gate oxide 
thickness, length and width etc., that match thre TCAD device, defining the 
device test Spice netlist for running I-V curves, loading the reference TCAD
I-V curves for optimization, and then running the optimization routine to 
modify the Spice model card parameters, such that the generated Spice model
then fits the characteristics of the TCAD simulations. 

Once the model optimization and extraction is complete, the new Spice model
generated curves are compared with the TCAD generated curves, so that the
accuracy of the optimization can be visualized.  In the generated plots,  the
filenames containing the letters "ut" are those generated by UTMOST which 
created the new Spice model card device parameters.  The other curves are 
generated from TCAD simulations.

To load and run this example, select the
{bold} Load example 
button in DeckBuild . This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.



{subsection} mos2ex23.in : Device Degradation due to Hole Trapping in a Silicon pMOSFET

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example shows the effects of device degradation caused by stressing a 
transistor at a negative gate bias and an elevated temperature.  The used 
model is based on hole trapping into the gate oxide but also accounts for 
the permanent component by an interface reaction.  The example shows how to:
{newline}
{bullet} Create a PMOS structure using the Atlas syntax and refine 
the simulation grid in the gate oxide.
{newline}
{bullet} Set up a deck with the four-state NMP model enabled.
{newline}
{bullet} Simulate the temporal response of oxide and interface traps 
during a stress and a relaxation phase.
{newline}
{bullet} Visualize the local degradation using the hole occupancy of 
the oxide traps.


{newline}

The input file consists of three separate runs, where each of them starts 
with
{bold} go atlas.
In the first section, the geometry, the mesh, the electrodes, and the doping 
of the simulated device are specified using the statements 
{bold} mesh,
{bold} region,
{bold} electrodes, 
and 
{bold} doping,
respectively.  Since the four-state NMP model requires a fine mesh in the 
gate oxide region between the substrate and the gate, the mesh is refined 
based on the potential using the statement
{bold} regrid.
The resulting structure is saved in an output file called mos2ex23_0.str.

{newline}

In the next section, ATLAS is restarted and the refined structure is read 
in again.  Then the four-state NMP model is enabled by the parameter 
{bold} nmp4.sto
after the 
{bold} trap 
statement.  The oxide traps are placed into the material 
{bold} sio2
and confined to the region defined by coordinates
{bold} x.min, 
{bold} x.max, 
{bold} y.min,
and 
{bold} y.max.
Their oxide and interface state density are set to 1e20/cm3 and 1e11/cm2, 
respectively.  The parameter 
{bold} nmp4.sample 
specifies the number of simulated traps at each gate oxide point.  In this 
example, a small number of traps have been chosen in order to reduce the 
computation time.  However, this number should be increased for more 
realistic simulations, especially if one is interested in the degradation 
of large-area devices.  The traps have distributed parameters, given by 
their mean values and their variance.  The meaning of each of those 
parameters is described in the ATLAS user manual.  Furthermore, the traps 
are enabled to capture/emit charge carriers from/to the silicon substrate 
by setting the parameter 
{bold} subcontact 
to the material 
{bold} silicon.

{newline}

Next, the device is simulated for steady-state conditions using the 
statements
{bold} solve init
and
{bold} solve prev.
The obtained oxide and interface trap charges correspond to their 
respective pre-stress levels and are saved in the structure file 
mos2ex23_1.str that will be used for the extraction of the threshold 
voltages in the last section.  Note that the 
{bold} output
statement requires the flag 
{bold} devdeg 
for saving the trap charges in the output file mos2ex23_1.str.  The 
stored charges are visualized using TONYPLOT.  The figure clearly shows 
that the trapped charges are inhomogeneously distributed in the gate 
oxide due to the assumed defect-to-defect variations in the amorphous SiO2 
gate oxide.

{newline}

In the next step, the device is stressed by applying a gate bias of 
-1.55 V for 1 s, including an initial ramptime of 1e-6 s.  The 
temperature of this stress phase is set 100 C by
{bold} model temp=373.
The bias temperature stress leads to a device degradation, saved in the 
output file mos2ex23_2.str. The gate oxide is found to have an increased 
concentration of trapped holes compared to the pre-stress level.  The 
stress period is followed by a relaxation phase of 1e3 s at 0 V, where 
the degradation at the end of this phase is saved in the structure file 
mos2ex23_3.str.  The TONYPLOT figure demonstrates that a substantial 
fraction of the trapped charges has been removed during device recovery.

{newline}

For studying critical spots in the gate oxide, the local degradation may 
be of interest.  Therefore, the corresponding 
{bold} output 
statements are followed by the flags 
{bold} u.trantrap 
and 
{bold} traps 
in order to write out the trap occupation probabilities at a specified 
position within the gate oxide.  This position together with the requested 
states 
{bold} msc.state 
must be set after the 
{bold} probe 
statement.  In this input deck, the stress and relaxation data are written 
out into the log file mos2ex23_1.log and mos2ex23_2.log, respectively.  In 
both phases, the plotted degradation curves show a behavior that is almost 
logarithmic and therefore reminiscent of negative bias temperature 
instability.

{newline}

In the following section, ATLAS is restarted.  In a loop, the trapped oxide 
and interface charges of the unstressed, the stressed, and the relaxed 
device are loaded and a gate bias sweep is performed.  The calculated output 
characteristics are recorded in the log files mos2ex23_3.log, mos2ex23_4.log, 
and mos2ex23_5.log, respectively.  The comparison of the Id(Vg) curves 
demonstrates a pronounced shift of the threshold voltage due to hole 
trapping at the end of the stress phase.  The following relaxation period 
of 1e3 s leads to an incomplete recovery of the device degradation.

{newline}

To load and run this example, select the
{bold} Load example
button in DeckBuild.  This will copy the input file and any support files 
to your current working directory.  Select the
{bold} run
button to execute the example.


{section} BJT : BJT Application Examples 



{subsection} bjtex01.in : NPN Gummel Plot and fT Extraction

Requires: SSuprem 4/DevEdit/S-Pisces
{newline}
Minimum Versions: Athena 5.22.1.R, Atlas 5.24.1.R

This example demonstrates the processing, remeshing and electrical test
of a poly silicon emitter NPN bipolar transistor. Design parameters are
finally extracted from the IV Curve, including fT and Gain. This
example demonstrates the use of:

{bullet} Process simulation of a polysilicon emitter bipolar device
{newline}
{bullet} Re-meshing of the structure in DevEdit
{newline}
{bullet} DC ramp of Vbe with fixed Vce 
{newline}
{bullet} Simultaneous AC simulation during Vbe ramp
{newline}
{bullet} Extraction of peak gain and fT

The file starts with the definition of the process flow for an NPN
bipolar transistor in Athena. The first boron implant forms the
intrinsic base region. A second boron implant is self-aligned to the
polysilicon emitter region to form a connection between the intrinsic
base and p+ base contact regions. Spacer-like structures are used on
the side of the poly emitter to space the p+ base contact and provide
self-alignment. During the simulation, the 
{bold} relax 
statement is used to reduce the mesh density in the deep regions of the
structure. Only half of the full device is simulated. Mirroring of this
half device into a full structure is performed with
{bold} structure mirror left
. The final stage of the Athena syntax defines the electrode positions.
In this example only one base contact is used. A subsequent example
describes how two base contacts can be specified and linked together.

Often a mesh that is used for process simulation is not optimal for
use with device simulation. In this example, the mesh generation tool
{bold} DevEdit 
is used to recreate a mesh that has zero obtuse triangles in the
semiconductor region. It is then refined as a function of a number of
solution quantities on the mesh (eg: boron conc).

Popup windows under the DeckBuild Command window were used to create this
set of commands to control DevEdit.  To switch to  DevEdit Commands,
select the current simulator to DevEdit from the Main Control window.
Further use of DevEdit in more advanced applications is shown in later
examples.

In Atlas the solution procedure starts with a solution for a collector bias
of 2V. Next, the 
{bold} log 
statement is used to specify a file for collection of Gummel plot
data.  The Gummel data is collected by applying a bias ramp on the
base electrode up to 0.9.  The parameter
{bold} ac 
on the solve statement sets the ac analysis on. The frequency of this
signal is set to 1MHz. Once the bias ramp is completed the data is
plotted using TonyPlot.

Finally, the
{bold} extract 
statement is used to extract the maximum gain, "maxgain", and the maximum
ft, "maxft", for the BJT.  The extracted parameters may be used as
optimization targets for simulator tuning.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} bjtex02.in : 3D Bipolar Simulation

Requires: DevEdit 3D/Device 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates Gummel plot simulation of a BJT structure
in three dimensions.  It shows:

{bullet} Construction of the device in DevEdit 3D
{newline}
{bullet} Simulation of the Gummel plot in Atlas

In this example a bipolar transistor is constructed using DevEdit 3D. The 
structure is then passed to Atlas for electrical testing. The input file
consists of the following 2 main portions:

The first stage of the input constructs the BJT geometry, material regions,
doping profiles, and electrodes in DevEdit 3D. The structure was created in 
DevEdit 3D by drawing the device regions in interactive mode and specifying 3D
doping distribution. Finally the mesh was generated automatically by specifying 
basic mesh constraints and refining in the important areas of the device.

The Atlas simulation begins by reading in the structure from DevEdit 3D.
DeckBuild provides autointerface between DevEdit 3D and Atlas so that the
structure produced by DevEdit 3D is transferred to Atlas without having to
indicate the mesh statement.

The 
{bold} models 
statement is used to select a set of physical models for this simulation.  In 
this case, these models are 'srh' and 'auger' recombination, the concentration
and field dependent mobility model, and the two carriers model 

Then the initial solution for zero biases is obtained using
{bold} solve init 
The emitter voltage is then ramped negatively. The Newton algorithm is
used for these calculations. This is the default method in Atlas.

The results of simulation are then displayed using TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} bjtex03.in : Analysis of NPN Device with 2 Base Contacts

Requires: SSuprem 4/DevEdit/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example has been created with two symmetrical extrinsic base contacts
in an effort to more clearly demonstrate the use of the
{bold} contact 
statement for 
{italic} slaving 
electrode contacts together. This example is equivalent to the first example in this section in all other respects. It shows:


{bullet} Process simulation of a polysilicon emitter bipolar device
{newline}
{bullet} Re-meshing of the structure in DevEdit
{newline}
{bullet} Specification of the linking of two electrode together
{newline}
{bullet} DC ramp of Vbe with fixed Vce 
{newline}
{bullet} Simultaneous AC simulation during the Vbe ramp
{newline}
{bullet} Extraction of peak gain and fT


The process simulation, remeshing and basic device simulation syntax
used in this example is exactly equivalent to the first example in this
section. The difference is in the use to two 'tied' electrodes.

The electrode names  
{italic} base 
and 
{italic} base1 
are defined within Athena and are then held together with the
{newline}
{bold} contact name=base common=base1 
{newline}
statement within Atlas.
Thus, the subsequent use of the  name 
{bold} v."base" 
in the 
{bold} solve 
statements will apply to both the 
{italic} base 
contact and the 
{italic} base1 
contact.

The 
{bold} extract 
statement at the end of the file makes the addition of the currents from 
two base contacts for parameter extraction purposes.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} bjtex04.in : NPN - Gummel Plot and Ic/Vce Characterization

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example simulates a Gummel plot and the Ic vs. Vce characteristics
for different values of base current of a silicon BJT. It shows:

{bullet} Formation of an NPN BJT using Atlas syntax
{newline}
{bullet} Ic and Ib extraction versus Vbe (Gummel plot)
{newline}
{bullet} Ic extraction versus Vce for various Ib 


The initial stage of the example uses the 
{bold} mesh, region, 
and
{bold} electrode 
statements in Atlas to construct the NPN structure.  Analytical doping profiles are added in the 
{bold} doping 
statement. The structure has a heavy n+ emitter, 1.0e18 peak base
concentration, a buried collector layer and heavy p+ extrinsic base
contact.

The 
{bold} contact 
statement is used to define the emitter contact as a N-type polysilicon
emitter.  Surface recombination is also specified at the polysilicon/
silicon interface.  Next, the 
{bold} material 
statement is used to specify the electron and hole SRH lifetimes.  The
{bold} models bipolar 
statement is set to specify that the default set of bipolar models is
to be used.  The default set of bipolar models includes: concentration
dependent mobility, field dependent mobility, band-gap narrowing,
concentration dependent lifetimes and Auger recombination. 

The gummel plot syntax is similar to that described in the first
example of this section. The syntax for the Ic/Vce simulation is
described under the PNP example in this section. The key point is the
use of current boundary conditions on the base contact as defined by
{bold} contact name=base current
. This allows a constant base current to be forced while Vce is ramped.
The family of Ic/Vce curves can be overlaid in TonyPlot or exported to
UTMOST for SPICE model extraction.
 
To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} bjtex05.in : NPN - BVCEO Breakdown Voltage

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example calculates the BVCEO breakdown voltage in an NPN
transistor. It shows:

{bullet} Formation of an NPN BJT using Atlas syntax
{newline}
{bullet} Selection of the correct models and methods for breakdown simulation
{newline}
{bullet} Setting of current boundary conditions to force an open base contact 
{newline}
{bullet} Ic extraction versus Vce with an open base contact 


In the first part of the input file the device is described, including
mesh, electrodes location, and doping distribution. The device geometry
and doping are as used in the previous example.

The {bold} impact statement is used to specify the Selberherr impact
ionization model required for breakdown analysis.

For increased stability which is typically needed for such kind of simulation
with zero base current, the solution with small value of base current
Ib=3.e-15 A/um is obtained at the first stage of simulation. Then the
collector voltage is ramped until the collector current reaches the
value 5.e-11 A/um.


To set the open base contact, it is necessary to define zero current
passing through the base electrode. This is done by setting current
boundary conditions on the base using
{bold} contact name=base current
. Then throughout the breakdown simulation Ib is held at zero. This is
the most effective approach for BVCEO simulation.

The ramp of collector voltage is set on the final
{bold} solve 
statement. The ramp continues up to 10V. However a compliance limit on the collector current is set using the parameters
{bold} compl=<num> cname=collector
. The <num> specifies the value of the compliance limit in A/um, whilst
the cname indicates which contact the complaince current should be
measured on. Once the simulated collector current exceeds the
complaince value the simulation steps on to the next line of syntax.
Here that line is to plot the results in TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} bjtex06.in : NPN - AC Frequency Response

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example calculates the frequency response of an NPN
transistor at a single DC bias point. It shows:

{bullet} Formation of an NPN BJT using Atlas syntax
{newline}
{bullet} DC ramp of Vbe up to 0.8V, with Vce=2.0V 
{newline}
{bullet} AC simulation with ramped frequency 

The device structure and DC biasing of this device are as described in
the NPN Gummel plot example in this section. All models and numerical
methods are in common with the other NPN examples.

The key line of syntax is:
{newline}
{bold} solve prev ac freq=1e6 aname=base fstep=5 mult.f nfstep=10
.
{newline}
This line specifies the solution of the previous DC bias point with a small AC signal. The 
{bold} freq 
parameter sets the initial frequency.
{bold} aname 
sets the contact on which the AC signal is applied. If no
aname is given the AC signal is applied to all contacts in turn. The 
{bold} fstep 
parameter sets the step in frequency,
{bold} nfstep 
set the number of frequency steps and 
{bold} mult.f 
indicates that this is a multiplier. At each step the frequency is
multiplied by mult.f rather than having mult.f added to the initial
frequency.

The resulting capacitance and conductance parameters are stored in the
log file. They can be plotted against log(frequency) to see the
frequency response in TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} bjtex07.in : 3D NPN Transient Response

Requires: DevEdit 3D/Device 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This examples demonstrates transient simulation of a BJT structure
in three dimensions.

In this example a bipolar transistor is constructed using DevEdit 3D. The 
structure is then passed to Atlas for electrical testing. The input file
consists of the following 2 main portions:

{bullet} Construction of the device in DevEdit 3D
{newline}
{bullet}  Simulation of the Gummel plot in Atlas

The first stage of the input constructs the BJT geometry, material regions,
doping profiles, and electrodes in DevEdit 3D. The structure was created in 
DevEdit 3D by drawing the device regions in interactive mode and specifying 3D
doping distribution. Finally the mesh was generated automatically by specifying 
basic mesh constraints and refining in the important areas of the device.

The Atlas simulation begins by reading in the structure from DevEdit 3D.
DeckBuild provides the autointerface between DevEdit 3D and Atlas so that the
structure produced by DevEdit 3D is transferred to Atlas without having to
indicate the mesh statement.

The 
{bold} models 
statement is used to select a set of physical models for this simulation.  In 
this case, these models are SRH and AUGER recombination, the concentration
and field dependent mobility model, and the two carriers model.

The initial solution for zero biases is obtained using
{bold} solve init
. The steady-state solution for Veb=-0.4V and Vcb=1V is then obtained.

Then the emitter voltage is ramped to -0.8V with a ramptime of 0.1ns,
and transient simulation are performed. The Newton algorithm, which is
the default method in Atlas is used for these calculations.

The results of the simulation are then displayed using TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} bjtex08.in : PNP Gummel Plot and Ic/Vce Characteristic 


Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates the formation and characterization of a PNP
bipolar transistor. It consists of:

{bullet} Structure formation in Athena
{newline}
{bullet}  Gummel plot simulation in Atlas
{newline}
{bullet}  Ic/Vce simulation in Atlas

The first part of this input file uses Athena to construct the
geometry and doping of the PNP transistor. The device is a polysilicon
emitter PNP with an emitter length of 0.4um. Since the device is
symmetrical through the center of the emitter, only half the device
needs to be simulated. The resulting currents from Atlas can always be
doubled to account for this reflection. The intrinsic base is formed by
a 100keV  phosphorus implant at the start of the process. Extrinsic
base is formed by spacers on the sidewall of the emitter polysilicon.
The emitter area is formed by p+ doped polysilicon directly deposited
onto the silicon.

At the end of the process, metal contacts are patterned to give an
emitter contact on top of the polysilicon and a base contact to the
right. These metal regions are defined as electrodes in Athena to
prepare the structure for Atlas.

The final step in the process simulation is to extract some process
parameters. The base width is extracted by measuring the base/collector
and emitter/base junctions individually and subtracting the two
results. Using the 1D Poisson solver in DeckBuild, the sheet resistances
of the base and polysilicon emitter region are obtained.

The first of the two Atlas runs in this file is to extract the Gummel
plot characteristics. From this plot the gain and fT can be obtained. The
material parameters for polysilicon and silicon regions are set in
separate lines in the Atlas input file. 

The material parameters for polysilicon reflect the low mobility and
short carrier lifetimes seen in this material. They also contribute to
the reduction in base current and consequent increase in gain seen in
polysilicon emitter bipolar transistors. The effect of the native oxide
layer that exists between the polysilicon and silicon is emulated by
these material parameters.  The effect of the native oxide is to force
recombination of carriers at the polysilicon/silicon interface rather
than the carriers diffusing further in to emitter region. The short
lifetime and low mobility in the polysilicon accomplish the same
effect and have been widely used in polysilicon emitter bipolar device
simulation.

The Gummel plot is simulated at Vce=-2.0V by ramping Vbe from -0.4 to
-1.0V. In addition to the DC solution, a small AC signal is also
applied. This enables fT vs. Ic to be extracted.  The AC signal is
specified using the parameter AC on the 
{bold} solve 
statement. The frequency
of this signal is 1MHz. At the end of the solve sequence several device
parameters are extracted: peak gain, peak collector current and peak
fT.


The second Atlas run extracts a family of Ic/Vce curves for different
base currents. For each curve it is necessary to force a constant
current through the base electrode. This is done using the current
boundary condition set by 
{bold} contact name=base current
.

Since the base currents used are quite high, it is easier to first ramp
the base voltage up close to the initial current level required. In
this case Vbe is ramped to -0.7V. Then the current boundary conditions
are applied and solutions for base currents of 1uA/um to 5uA/um were
obtained. At each step in Ib a solution file is stored for later use.

During the ramp up and storing of files with different Ib the collector
voltage is left at ground. Next a sequence of statements is used to
LOAD the stored file for a particular Ib value, open a 
{bold} log 
file for the
results, and 
{bold} solve 
a ramp of collector voltage to -5V. This sequence is
repeated for each Ib considered. Separate results files for each Ib
value are recommended for use in TonyPlot and for extracting parameters
from the results. It is possible to store all IV data output for this
simulation into one file. A full bipolar extraction for SPICE models
can be done by interfacing these log files with UTMOST.

Finally some extraction on the Ic/Vce data with Ib=5uA/um is done. The
peak current in mA, the peak slope in the linear region and the slope
of the saturation region can all be obtained using 
{bold} extract.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} bjtex09.in : Emitter-Coupled Logic Element Simulation 

Requires: S-Pisces/MixedMode 
{newline}
Minimum Versions: Atlas 5.24.1.R

This simulation shows a transient process of gate switching in an ECL
circuit. A SPICE-like circuit description is used by Atlas/MIXEDMODE to
specify two ECL inverters. Two NPN transistors modeled using device
simulation are included in the circuit alongside two devices simulated
using a simple SPICE model. This example shows:

{bullet} Specification of an NPN device using Atlas syntax
{newline}
{bullet} Specification of an ECL inverter circuit using MIXEDMODE netlist syntax.
{newline}
{bullet} Inclusion of two SPISCES devices within the SPICE circuit.
{newline}
{bullet} Specification of device simulation models and parameters in MIXEDMODE syntax
{newline}
{bullet} Simulation of the DC initial bias point
{newline}
{bullet} Simulation of transient switching characteristics

This example file consists of three runs. The first uses Atlas syntax
to define the NPN device geometry, mesh and doping, the second sets up
the MIXEDMODE circuit to simulate the initial DC bias point, the third
performs the transient circuit simulation using Atlas/MIXEDMODE.

The first run uses Atlas syntax to define the NPN structure. There are two identical NPN devices in the ECL circuit. Both devices can be loaded from a single mesh file
{bold} bjtex09_0.str
. 

The second run starts with a netlist description of the ECL circuit.
For details of the syntax used in MIXEDMODE, see the MIXEDMODE
section of Atlas  Manual. The key non-standard element in the circuit
is the Atlas device. These are circuit elements where Atlas device
simulation is used to give the terminal characteristics as opposed to
a SPICE model equation. The primitives letter 
{bold} a 
is used to identify these devices. In this example there are two such
primitives; ai and an. There are also two more NPN bipolar transistors
simulated using the SPICE model modbjt. These are labeled qi and qn.

After the 
{bold} .end 
statement, regular SPISCES syntax is used to define parameters for the device simulation. 
{bold} models 
is used to set the physical models to be used in each of the devices to
be modeled by device simulation. Note the use of the 
{bold} device=<name> 
parameter. This is compulsory in MIXEDMODE simulation to identify the
device to which these parameters are applied. This is true even if only
one device simulation element exists in the circuit.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} bjtex10.in :  Athena/Atlas Simulation of an NPN BJT

Requires: Athena/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates how to use combination of several Athena 
runs in 1D mode and Atlas to simulate the electrical characteristics of a
vertical NPN bipolar transistor. This example shows:

{bullet} Four Athena simulations in 1D mode of various doping distributions in a
1D NPN bipolar structure
{newline}
{bullet} Athena-Atlas interface for 1D doping profiles
{newline}
{bullet} Ic and Ib extraction versus Vbe (Gummel Plot)


Athena process simulation in 1D mode is taken as
the starting point for this simulation. P+ and n+ contact implants and
final anneal are added at the very end.

The input file is run four times with different steps commented out.
As a result, four doping profiles in different vertical sections  of
the NPN device are obtained. The structure file names correspond to
areas where the vertical sections are taken.

When all four Athena simulations are completed DeckBuild switches simulation
to Atlas where mesh and electrodes are set. After that, doping profiles
from all four 1D structures are used to build 2-D doping in Atlas.
Uniform antimony (buried layer) and arsenic (epi layer) profiles are
imported from 
{bold} bjtex10_1.str
. Afterwards emitter doping is specified in the area between x=0 and x=1 using
phosphorus component of the bjtex10_1.str profile. The parameter
{bold} ratio.lat 
represent lateral diffusion during emitter formation.
Base boron doping is specified in the area between x=0 and x=5 from 
{bold} bjtex10_2.str
. P+ contact boron doping and N+ phosphorus doping under collector contact
are imported from corresponding Athena structure files.

Then a standard Gummel plot simulation with Atlas is then performed.
This is described in detail in the first example in this section.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} bjtex11.in : NPN - Gummel plot in 2D and 3D

Requires: S-Pisces/Device 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example simulates a Gummel plot for a silicon BJT in 2D and 3D. It shows:

{bullet} Formation of a 2D NPN BJT using Atlas syntax
{newline}
{bullet} Ic and Ib extraction versus Vbe (Gummel plot) of the 2D structure
{newline}
{bullet} Formation of a 3D NPN BJT using Atlas syntax
{newline}
{bullet} Ic and Ib extraction versus Vbe (Gummel plot) of the 3D structure


The initial stage of the example uses the 
{bold} mesh, region
, and
{bold} electrode 
statements in Atlas to construct the 2D NPN structure.  Analytical doping profiles are added in the 
{bold} doping 
statement. The structure has a heavy n+ emitter, 1.0e18 peak base
concentration, a buried collector layer and heavy p+ extrinsic base
contact.

The
{bold} models bipolar 
statement is set to specify that the default set of bipolar models is
to be used.  The default set of bipolar models includes: concentration
dependent mobility, field dependent mobility, band-gap narrowing,
concentration dependent lifetimes and Auger recombination. 

The gummel plot syntax is similar to that described in the first
example of this section.  Following the calculation of the gummel plot 
for the 2D structure, 
{bold} go atlas 
triggers the initiation of an Atlas run that will be used to perform 
an equivalent calculation in 3D.  The 3D mode of Atlas is triggered
by the inclusion of the 
{bold} three.d 
parameter on the 
{bold} mesh 
statement.  The extent in the z-direction is set by the 
{bold} z.mesh 
statements.  The syntax for the remainder of the input is similar 
to that used in 2D.

Following the completion of the calculation of the Gummel plot 
for the 3D structure, the characteristics of the two structures
are plotted for comparison.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.
{section} DIODE : Diode Application Examples 




{subsection} diodeex01.in : Schottky Diode Forward Characteristic

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates simulation of a Schottky Diode Forward Characteristic. 
It shows:

{bullet} Formation of a diode structure using Atlas syntax
{newline}
{bullet} Setting of Schottky barrier height for the anode
{newline} 
{bullet} Forward biasing the anode

In the first part of the input file the device is described, including
mesh, electrodes locations, and doping distribution. This is a 2D
n-type device with heavily doped floating p-type guard ring regions,
located at the left and right sides of the structure. The Schottky
anode is located at the top of the device, and a heavily doped cathode is located at
the bottom of the device.

After the device description, the
{bold} model 
statement is used to specify the following set of models :
carrier concentration dependent mobility
{bold} (ccsmob)
, field dependent mobility, band-gap narrowing,
SRH and Auger recombination. The two carrier model is specified here as well (carriers=2). 


The key statement for setting a Schottky contact is
{bold} contact name=<char> work=<val>
. It is used to specify the workfunction of the Schottky electrode. In this
example, since the substrate is n-type silicon with an affinity of 4.17,
the specified workfunction of 4.97 provides
a Schottky-barrier height of 0.8V. The default barrier height is zero
(a perfect ohmic contact). This condition is assumed for the cathode.


The electrical simulation simply ramps the anode voltage to 1.0V in
0.05V steps using the
{bold} solve 
statement. The results of the simulation are then displayed using TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} diodeex02.in : Breakdown Simulation with EB and NEB Models

Requires: S-Pisces/Giga
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates breakdown simulation of a 1D diode, including
second breakdown,  with Energy Balance (EB) and Nonisothermal Energy
Balance (NEB) Models.

Breakdown simulation for submicron devices should be simulated using the 
Energy Balance Model due to  nonlocal impact ionization effects, which
can substantially influence device characteristics. For high current
levels the thermal self-heating effects can also play an important
role by decreasing the mobility and impact ionization rate. This example
demonstrates a comparison of breakdown calculations obtained with Energy
Balance and Nonisothermal Energy Balance Models.

The first Atlas run uses the Energy Balance Model: Poisson's equation,
carrier continuity equations, and energy balance equation for electrons
and holes are solved self-consistently.

In the first part of the input file the device is described, including
mesh, electrodes locations, and doping distribution.
The
{bold} material 
statement is then used to assign  energy relaxation times for electrons and holes.
The
{bold} models 
statement is used to select a set of physical models for this
simulation.  In this case, these models are SRH and AUGER
recombination, the concentration and field dependent mobility model,
band gap narrowing, and energy balance
equations for electrons and holes (hcte).
The 
{bold} impact 
statement is used to assign the energy relaxation lengths for the Selberherr model.
The 
{bold} contact 
statement is used to specify a large resistor at the emitter electrode, providing a smooth
transition from voltage boundary conditions to current boundary conditions. It is not
needed if the curve tracing algorithm is used (see the following example).

The numerical methods used in EB simulation can strongly affect
convergence and CPU time. Here
{bold} method block newton 
is used. This decouples the carrier temperature calculation from the
potential and continuity equations at lower biases. This allows for
larger bias steps at low bias.

The initial biasing is done by ramping the emitter contact towards 25V. A compliance limit is set on the emitter current as defined by:
{bold} cname=emitter compl=<value>
. Once this current is exceeded the voltage ramp stops and Atlas proceeds to the next simulation line. This is to specify 
{italic} current forcing
on the emitter contact. The syntax
{bold} contact name=emitter current 
does this.

After setting the newton method the biasing proceeds by specifying
{bold} istep=<value> imult
. The parameter imult indicates that the istep is a 
{italic} multiplier
to the current as opposed to an additive step. Therefore at each bias
step the forced current is multiplied by istep. 
{bold} ifinal 
indicates the
maximum current to be simulated.

Note that due to the use of current forcing,  
{bold} emitter int. bias 
should be used as the x axis on the IV data plots.

The second Atlas run uses the Nonisothermal Energy Balance Model: Poisson's equation, 
carrier continuity equations, energy balance equation for electrons and holes, and 
the lattice heat flow equation are solved self-consistently.

The same set of models is used, except that the solution of the  lattice energy
balance equation is activated using the
{bold} models  lat.temp 
statement.

In addition, the thermal boundary conditions should be defined in this case.
Thermal boundary conditions are defined in the 
{bold} thermcontact 
statement. Values of the thermal conductances are specified at the thermal contact 
located along the emitter and base electrodes.

The results of the two simulation runs are then overlaid using TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} diodeex03.in : Breakdown Simulation with the Curve Tracer

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates breakdown simulation for a 1D diode using the
automatic curve tracing algorithm. It shows:

{bullet} 1D diode structure formation using Atlas syntax
{newline}
{bullet} Setting of models for breakdown simulation
{newline}
{bullet} Setting of curve tracing parameters
{newline}
{bullet} Automatic reverse bias curve trace simulation.

In the first part of the input file, the device structure is specified including
mesh, electrodes locations, and doping distribution.

The
{bold} models 
statement is then used to select a set of physical models for this simulation.  In this case,
these models are SRH and AUGER recombination, the concentration and field dependent 
mobility model, band gap narrowing and two carriers solution.
The 
{bold} impact 
statement is used to activate the Crowell-Sze impact ionization model.
The 
{bold} method 
statement is used to activate the coupled Newton algorithm.

The 
{bold} curvetrace 
statement is used to initialize parameters for the curve tracing algorithm. The
{bold} contr.name 
parameter specifies the name of electrode for which the load line
technique will be applied. In this example it is the emitter. The 
{bold} curr.cont 
parameter means
that value of current will be monitored, and simulation will be stopped when
the current exceeds the value specified by the
{bold} end.val 
parameter (1.e-3 A/micron in this case).
The 
{bold} mincur 
parameter defines the minimum current value after which the load
line technique will actually be applied. Before that point, standard voltage boundary
conditions are used. The
{bold} nextst.ratio 
parameter defines the maximum factor to use in increasing the voltage step on
flat parts of the IV curve away from the turning points.

The statement
{bold} solve curvetrace 
is used to activate the curve tracing algorithm.

The results of the simulation are then displayed using TonyPlot. The drain voltage should be plotted as
{bold} drain int.bias 
from the TonyPlot menu, since the drain bias value includes the effect
of the varying load used in the curve tracing algorithm.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} diodeex04.in : Silicon Carbide Diode Characteristics 

Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

In this example, a SiC diode is simulated to demonstrate the Atlas 
capabilities to handle wide band gap semiconductor devices under room and
elevated temperature conditions. The interest toward SiC technologies
is growing due to the thermal and electronic properties of the material
potentially leading to very high figures of merit for high-power,
high-speed, high-temperature, and radiation hard applications. 

The p+/n/n+ diode structure considered is a device based on one of the SiC
polytypes called alpha-SiC (or 6H-SiC), and is constructed using Atlas syntax.
The input file consists of the following main parts:

{bullet} Mesh, regions, electrodes and doping specification using Atlas syntax
{newline}
{bullet} Material and models definition for SiC
{newline}
{bullet} Calculation of forward I-V characteristic under the room temperature conditions
{newline}
{bullet} Calculation of forward I-V characteristics under elevated temperature 623K
{newline}
{bullet} Calculation of reverse and breakdown characteristics at 623K

The simulations at elevated temperatures are performed in  a separate Atlas run within the same input file with the respective resetting/changing of the material and models
definition.

The input file starts by defining the mesh. The location and grid spacing
along x and y directions are specified in the 
{bold} x.m 
and 
{bold} y.m 
statements. This 
simulation employs cylindrical symmetry and is therefore quasi-3-dimensional. 
To activate this feature, the parameter 
{bold} cylindrical 
is included in the 
{bold} mesh
statement.

The structure consists of 3 regions: p+ emitter, n base, and n+ emitter
regions, each uniformly doped. The dimensions of the regions and their
doping are defined in the 
{bold} region 
and 
{bold} doping 
statements respectively.
The anode and cathode contacts are specified in the 
{bold} electrode 
statements.

Basic material parameters of alpha-SiC are defined in the 
{bold} material 
statements.
These include dielectric permittivity, energy band gap, parameters related to
the band gap narrowing, auger recombination coefficients, saturation velocity,
and parameters describing mobility and lifetime temperature dependencies. The
low field mobilities and lifetimes are specified on a region-by-region basis
taking into consideration the level of doping in the respective regions.

The set of physical models in the 
{bold} model 
statement includes electric field
mobility dependence, Shockley-Read-Hall and Auger recombination, and band gap 
narrowing. The temperature is also specified in the model statement.

The first run is completed by the 
{bold} solve 
statement in which the anode bias is
stepped from 0.1 up to 4 V to calculate the diode forward characteristic
under room temperature conditions. The I-V data is saved in the log file.

The second Atlas run simulates the forward, reverse, and breakdown
characteristics under elevated temperature conditions. It starts by
reading in the mesh and structure data from the file produced by the first run.
In order to use the same cylindrical symmetry as the first run the
{bold} cylindrical 
parameter must be specified whilst loading the mesh.  The
same material and model statements are used in this input file with the
temperature set at 623K. Then the solving procedure is repeated to
obtain the forward I-V characteristic which is saved in the log file.


The set of physical models needs to be extended for simulating reverse
and breakdown characteristics to include the impact
ionization-generation model.  This is done in the following part of the
input file, in the 
{bold} impact 
statement.  The Selberherr impact
ionization model is used with the parameters changed to reflect the
properties of alpha-SiC. The other material and model statements are
repeated here to ensure proper reinitialization of the material and
models parameters. Since the breakdown in diode structures is typically
very sharp  the 
{bold} curvetrace 
feature of Atlas is used to bias the curve. Note that the parameter
{bold} step.init 
is negative. This is sufficient to force a negative voltage sweep on
the anode.  The reverse/breakdown characteristic is saved in the log
file. To plot the breakdown the
{bold} anode int.bias 
should be used as the x-axis.

The graphs with the forward I-V characteristics at the room and elevated 
temperatures, and the reverse and breakdown characteristic at 623K are
displayed using TonyPlot.

Since cylindrical coordinates were used, Note that in all I-V plots the
units of current is Amps and not Amps/micron.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} diodeex05.in : Zener Diode Breakdown 


Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates  electrical
simulation of a Zener diode breakdown. It shows:

{bullet} The formation of a 2D Zener diode structure in Athena
{newline}
{bullet} The transfer of the structure to Atlas
{newline}
{bullet} Specification of models for Zener breakdown simulation
{newline}
{bullet} Reverse bias simulation to the breakdown voltage

The structure formation is performed by implanting a heavy boron dose into a
heavily doped n-type substrate. The 2D extent of the p+ region is controlled
by the etch coordinate of an oxide mask. A short diffusion is performed
in Athena to drive in the p+ dopant.

After the diffusion, 
{bold} extract 
statements are used to measure the
junction depth and sheet resistance of the p+ region. After this, metal
is added and patterned. The electrode positions are then defined using
the 
{bold} electrode 
statements in Athena.

The statement 
{bold} go atlas 
enables the automatic interface from Athena to Atlas.
DeckBuild will switch simulators to Atlas and load in the final Athena structure 
as the initial Atlas mesh. 

In Atlas, the first lines of syntax define the models to be used in the
simulation. The statement 
{bold} models bip 
defines the standard bipolar model set
that is also recommended for diode simulation. This consists of
concentration, temperature and electric field dependent mobilities,
concentration dependent SRH and Auger recombination, and band gap
narrowing. The parameter 
{bold} bbt.std 
enables the Lombardi band-to-band
tunneling model. In heavily doped diodes this mechanism is the
principal leakage current mechanism at voltages less than the avalanche
breakdown.  The 
{bold} impact 
statement enables the impact ionization model of
Selberherr.

Newton's method is chosen on the method statement. The parameter
{bold} climit=1e-4 
is highly recommended for all reverse bias simulations
in Atlas. It enables higher accuracy in the calculation of carrier
concentration in the depletion regions.

The anode voltage is then ramped up to -10V in 0.25V steps. The
breakdown voltage of this device is around -5.5V. Atlas will converge
up to this voltage and then stop as no solutions beyond this voltage
are possible. By plotting the output log file in TonyPlot, the breakdown
can clearly be seen. The pre-breakdown current is dominated by
band-to-band tunneling. An equivalent simulation excluding the 'bbt.std'
parameter might be run to demonstrate this.

The final statements use the 
{bold} extract 
feature of DeckBuild to measure
the maximum anode voltage at which convergence was obtained and the
anode voltage for a particular value of anode current.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} diodeex06.in : 3D Diode Characteristic 


Requires: Device 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates  electrical
simulation of a diode. It shows:

{bullet} The formation of a 3D diode structure in Atlas
{newline}
{bullet} Forward bias simulation 

The
{bold} z.mesh 
statement is used in a similar manner to x.mesh and y.mesh to create a
3D structure using the Atlas syntax. Following this the REGION,
ELECTRODE and DOPING statement each have Z related parameters that
correspond with the X and Y parameters familiar from 2D simulation.

The syntax for setting material and model parameters and for biasing
the device and saving results is identical to the previous 2D examples.
Note that
{italic} TonyPlot3d
is required to plot the 3D mesh and solution files. TonyPlot is used
for plotting the log files.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} diodeex07.in : Gunn Diode 

Requires: DevEdit/Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example shows the transient oscillatory behavior of a 
{bold} Gunn 
device due to 
the negative differential resistance of behavior exhibited by GaAs 
(as a result of electron intervalley transfer). 

In the first part of the input file the structure is defined within DevEdit.
The device is a sandwich structure made up of 2 gold electrode layers on the 
top and bottom, one low doped transit layer in the middle and 2 high doped
layers acting as low resistivity contact regions and carrier injectors.

The thickness of the transit layer together with the applied electric field
is one of the key design features determining the frequency of the oscillations.

In the second part of the file, after the 'go atlas' statement, transient device 
simulations are performed for different biases.

After loading the structure from DevEdit, a load resistor is attached at
the anode side with the
{bold} contact 
statement. In order to model the negative differential velocity saturation
behavior for electrons,  
{bold} fldmob 
in the model statement is
specified together with the
{bold} evsatmod=1 
parameter.  This switches on the negative differential mobility model
for GaAs like materials. As the function of holes is negligable, the
solution of the hole continuity equation can be disabled by specifying 
{bold} carriers=1.

By ramping up the bias of the anode to 2 V one can clearly see the effect of 
the negative resistance
{bold} extract 
is used to calculate the critical electric field from the log-file. With the 
following stationary simulation it can be shown that the bias is not sufficient 
to feed an oscillation with the given load, the oscillation is damped. The 
frequency is calculated by extracting the time required of 4 full periods.

In contrast, the device is able to operate at 4V bias. To monitor the movement
of the domains, select several of the different electron distributions 
from different points in time (as 2d contours or the corresponding cutlines) 
displayed with TonyPlot at the end of the simulation, and make a movie using
the
{bold} Tools: Movie 
menu.

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} diodeex08.in : 3D Diode using lifetime killing 


Requires: DevEdit 3D/Device 3D/Giga 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

A common practice in high power electronics is to vary carrier lifetime across a device by bombarding the region of silicon  with particles or introducing gold impurities. 
This example demonstrates how such an analysis may be performed using device simulation. This example shows:

{bullet} The formation of a 3D diode structure in DEVEDIT3D
{newline}
{bullet} Device simulation driving the diode into forward bias 
{newline}
{bullet} How to create a 3D plot showing the current crowding effect

The structure is first created by running DEVEDIT3D in batch mode using the command 
{bold} go devedit.
DEVEDIT3D performs three functions: creation of the diode topology with the
{bold} region 
statement, addition of impurities with the 
{bold} impurity 
statement and finally creates the mesh for the device simulation by setting various 
{bold} Meshing Parameters 
options. Further information on these statements may be found in the 
{bold} VWF Interactive Tools User's Manual: Volume 1
.

Only the top left quarter of the complete cell will be simulated as the three quarters are identical. 
The structure created by DEVEDIT3D contains two different silicon regions which will exhibit different carrier lifetimes during the device simulation.

The completed structure is then piped into the device simulator which is started with the 
{bold} go atlas 
command. The Atlas syntax is then used to modify the material parameters in the different regions. The 
{bold} material 
statement is used to specify the electron and hole lifetime in each silicon region. In this example we have made the carrier lifetime 20 times smaller in
 the region which has undergone a lifetime killing process- region number 1. It is also highly important that the necessary physical models are switched on if the simulation is to be accurate. The 
{bold} model 
 statement is used to switch on the appropriate models for the simulation. In this case the example uses analytic and conmob: the doping and temperature 
dependent low field mobility model, fldmob: the lateral electric field-dependent mobility model, srh: Shockley-Read-Hall recombination, auger: recombination 
accounting for high level injection effects, and bgn: band gap narrowing.

In addition, if thermal self heating effects are required in the simulation, an additional parameter
{bold} lat.temp 
 will be required to cause the simulator to solve the lattice heat flow equation. If this is the case a thermal boundary condition must also be specified using the 
{bold} thermcontact 
 statement. This example uses the cathode electrode, number 2, as the thermal boundary condition and specifies a fixed temperature there of 300 K.

As the solution proceeds all terminal characteristics are saved into a file, with the command
{bold} log outf=<filename>
, which can then be plotted at the end of the simulation. Two simulations are 
performed in this example, with and without the lattice heating model switched on, both driving the diode into forward bias. TonyPlot is then used to display
 both of the I-V results on the same plot as well as the change in lattice temperature. When the lattice heating model is turned on the increase in lattice
 temperature causes a decrease in carrier mobility and thereby a roll-off in current under forward bias.

Note that the user can use 
{italic} TonyPlot3d 
to plot the 3D mesh and solution files. By displaying the total current density in an isosurface contour plot, the current crowding effect can be seen.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} diodeex09.in : Temperature Ramping - Effect on Leakage


Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the correct method for global temperature ramping in 
{bold} Atlas 
for any device.  A diode structure was chosen here for simplicity.
In Atlas the 
{bold} global temperature 
of the device is set using the
{bold} models 
statement.  However, the global temperature can only be set ONCE in the input
deck if ALL the temperature dependent parameters are to be set.  If the 
temperature is reset during a single input deck with a second "models
statement" an incorrect result is obtained, since not all of the temperature
dependent parameters are set in subsequent models statements.

The solution is to use the combination of a "go atlas" statement, together with
a "mesh infile=" statement.  After the mesh statement, reset the global
temperature with a new "models" statement.

The device bias conditions can then either be ramped up from zero, as in this
example, or loaded in from the previous solution with a
{bold} "load infile=" 
statement.  In order to end up with one continuous 
{bold} log outfile 
the keyword
{bold} append 
must be added to the log outfile name after the second and subsequent "log
outfile=" statements in order to prevent the original log file from being 
overwritten.

This example also plots the electron and hole
{bold} mobility versus temperature
. Substituting different mobility models allows the temperature effects of each
to be compared.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} diodeex10.in : GaN diode, Reverse-bias leakage current vs temperature


Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates modeling of temperature dependence of reverse-bias leakage current
in GaN Schottky diode as a consequence of phonon-assisted tunneling based on the reference below:

Pipinys P., and V. Lapeika, "Temperature dependence of reverse-bias leakage current in GaN Schottky
diodes as a consequence of phonon-assisted tunneling" J.Appl. Phys. 99 (2006): 093709.

It shows:

{bullet} Structure definition using Atlas 
{newline}
{bullet} Temperature Tependence Reverse Voltage Characteristics using Atlas
{newline} 

It has been found that the reverse I-V characteristics of some Gallium Nitride (GaN) diodes can best be 
explained by using a phonon-assisted electron tunneling model. The electrons are assumed to be emitted from 
local levels in the metal-semiconductor interface.

To enable the model, use the keyword
{bold} PIPINYS 
on the 
{bold} CONTACT 
statement. The default value of
{bold} PIP.NT 
is 
{bold} 0 
and so you must set a finite value for this quantity in order for the model to have any effect. The other 
parameters may be specified on the MATERIAL statement. Although the model was developed specifically for 
reverse bias current in GaN, Atlas does not restrict use of the model to that material. 
{bold} PIP.OMEGA 
is the phonon energy,
{bold} PIP.ACC 
is the electron-phonon interaction constant, and 
{bold} PIP.ET 
is the trap depth.

Once constructed, the device reverse characteristics are then simulated in Atlas (SPISCES), using as
well the 
{bold} "Universal Schottky Tunneling" model (UST)  

The Experiment file starts with
{bold} go internal 
command which transfers control from the current simulator (i.e. Atlas) to
DBInternal. The    
{bold} load 
command specifies which template file should be used for multiple runs. The
{bold} sweep 
command specifies how the variables set in the template file should be changed.
The parameter specified by the 
{bold} set 
command in the template file is set to be changed; in this case the temperature.
The 
{bold} data 
specifies values of the temperature. 

The final results are plotted using the same X and Y axes as in the paper for a direct comparison 
with measured results. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} diodeex11.in : Effect of ionic species on small signal capacitance of MOS-C


Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example shows how to include ionic species in the insulator of a MOS-C capacitor.
The mobile species affect the small signal conductance and capacitance of the device
as a function of bias and frequency.  The deck builds a basic MOS-C structure using 
Atlas commands.  Then an ionic species is added using the DOPING statement.
{newline}
{bold} doping region=1 species1 gaussian conc=1e16 char=0.06 lat.char=0.15  peak=0.125
{newline}
with the SPECIES1 parameter.  Another species is initialised using the same syntax, and
both species have an initial gaussian distribution.  The PROBE statement is used to
set up an integration of the species over the device. The generic ion transport model is 
selected on the MODELS statement
{newline}
{bold} models srh nspecies=2 species1.z=2 species2.z=-1
{newline}
where NSPECIES=2 indicates there are two species, and SPECIES1.Z=2 indicates that the first
has a double positive charge and SPECIES2.Z=-1 indicates that the second has a single negative
charge. The METHOD statement
{newline}
{bold} method species.maxx=1.0e6 species.ins
{newline} 
restricts the species to the insulator and sets the maximum permissible update vector to be
a ratio of 1.0e6.

The anode is biased to 1.0 V and the anode voltage is ramped to -2.0 V with the small signal
parameters calculated at 100 Hz. This is then repeated with the small signal frequency being 
1 GHz. These curves are compared to the MOS-C without ions in the insulator.  In the latter 
case the Capacitance varies only slightly with the channel charge.  With ionic species present,
and at 100 Hz, the movement of ionic charge by the test signal gives a large capacitance. At
an anode voltage of 1 V the negative ions are near the anode and the positive ions are near 
the semiconductor/insulator interface.  As the anode bias changes to -2 V,  this situation
reverses and when the centre of charge is near the centre of the insulator the small signal
capacitance is a maximum.  With a test signal of 1 GHz the ionic species are not sufficently
mobile to react and so the small signal capacitance is much reduced.  The species density
profiles are shown in the cutline of the plot of the structure file at 1.o and -2.0 V anode bias.
  The PROBE statements can optionally  be selected in the first plot and show that the integrated density of each species is
constant (because there are no reactions and the species are confined to the insulator).
They also show the species concentration at the center of the insulating layer as a function of bias.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} diodeex12.in : Tunnelling Through a Polysilicon-Oxide-Silicon Diode

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example shows how to self-consistently include oxide barrier tunneling in the I-V
characteristics of a MIS diode.  For forward bias there are three different components
to the tunnel current, and in reverse bias the tunnel current is electronic in nature 
and limited by the thermal generation rate of carriers in the silicon.

The example is split into several sections,  each starting with
{newline}
{bold} go atlas 
{newline}
The first section sets up a structure with a polysilicon gate, a 2.5 nm thick oxide and
a lightly p-doped Silicon substrate.  The substrate is contacted with an ohmic aluminum
contact.  

The next section reads in the structure and sets material parameters for the oxide and silicon.
The effective masses in the oxide strongly effect the value of the tunnel current.
The contact workfunction is set to be that of n-type polysilicon, and the effective masses in the contacts
are also set.  On the MODELS statement 
some mobility and recombination models are set for the silicon. The parameter
{bold} QTNLSC.EL 
enables self-consistent electron tunneling, whereby electrons 
tunneling through the oxide are injected into the electron continuity equation in the 
silicon.  The parameter
{bold} QTNL.DERIVS 
puts non-local derivatives into the system matrix to help achieve a converged solution, 
and is essential in this example.  The anode bias is then ramped to 2.4 V and the 
resulting currents saved in a logfile.  The current components are also saved using the
j.elec, j.hole and j.tun parameters.  

The next section is essentially the same as the last except that hole tunnelling is 
included as well, by specifying 
{bold} QTNLSC.HO
.  In the following section band-to-band tunneling is initially enabled 
by using the 
{bold} QTNLSC.BBT 
parameter.  This will be significant when the valence band in the polysilicon is at a
greater electron energy than the silicon conduction band.  The forward biased I-V curves show that at
low biases the electron injection dominates, then hole tunneling from the silicon valence
band to the polysilicon valence band becomes dominant. At even higher biases the band-to-band 
tunneling switches on and dominates.

The example continues with negative bias being applied to the anode.  This causes the electrons 
to be removed from the device by tunnelling to the gate, and because the electrons are minority carriers they are only
supplied through SRH generation processes.  Even at large negative biases the current is relatively small
because of the rate limiting effect of the SRH generation of minority carriers. To illustrate this the
final section repeats the reverse bias simulation but with an SRH lifetime that is two orders of magnitude
longer and the tunnel current is much smaller because of the lower thermal generation rate. 
 The hole and band-to-band tunnel rates are negligible in this case.  The contact Fermi-level
is near to the polysilicon conduction band and consequently hole injection is negligible.
  The I-V characteristics of the diode between Anode voltages of -2.4 V and 2.4 V are shown in the final plot.
This example thus demonstates the rectifying properties of the tunneling diode, and the physical processes
which lead to this behavior.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{section} SOI : SOI Application Examples


{subsection} soiex01.in : Partially Depleted SOI - Vt and Subthreshold Slope

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example simulates the Ids/Vgs characteristics of a thick film SOI MOSFET and from these results extracts the threshold voltage and subthreshold slope. These are two key parameters involved in the design of any SOI MOSFET.  It demonstrates:

{bullet} Basic SOI structure definition using Atlas syntax
{newline}
{bullet} Setting transport models including impact ionization
{newline}
{bullet} Generating an Ids/Vgs curve with Vds=0.1V
{newline}
{bullet} Extracting threshold voltage and subthreshold slope from the results
{newline}
{bullet} Plotting output curves and structures.

The SOI device is a partially depleted device composed of a 0.2 micron
layer of silicon on a 0.4 micron silicon dioxide substrate.  The
device has a 17 nm thick gate oxide and a gate length of 1.0 microns.
For simplicity there is no silicon below the back oxide. Other examples
in this section do include a silicon substrate.

The device mesh, region specification and electrode definition are performed using the 
{bold} mesh, region 
and 
{bold} electrode 
statements at the start of the input file. The doping is added as
simple analytical functions. The channel doping in this simple example
is presumed a constant. Gaussian source and drain profiles are used. No
LDD or spacer is considered in this case.


After the structure description, the
{bold} interface 
statement is used to define fixed oxide charges on both silicon - silicon
dioxide interfaces.  Next the
{bold} contact 
statement is used to specify the workfunction on the poly-silicon gate.

The
{bold} model 
statement is used to specify a reasonable set of physical models for
SOI simulation.  In this case, concentration dependent mobility,
SRH recombination, Auger recombination, band-gap narrowing, and 
parallel electric field dependent mobility are specified.

After the initial solution, a negative gate voltage is applied followed by solutions at drain biases
of 0.05 and 0.1 volts are obtained. Next, the
{bold} log 
statement is used to specify a file for collection of the Id/Vgs
characteristics of the SOI device. These characteristics are captured
with the following 
{bold} solve 
statement where the gate bias is ramped in 0.1 volt increments from
-0.2 volts up to 1.5 volt.

After the voltages have been solved 
{bold} extract 
statements are used to find the threshold voltage and the subthreshold slope of the SOI MOSFET.

Finally, the resultant Id/Vgs curve is plotted using TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} soiex02.in : Fully Depleted SOI - Vt and Subthreshold Slope

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example repeats soiex01.in but for a device that has been designed to operate with a fully depleted SOI film.  It demonstrates:

{bullet} Basic SOI structure definition using Atlas syntax
{newline}
{bullet} Setting transport models including impact ionization
{newline}
{bullet} Generating an Id/Vgs curve with Vds=0.1V
{newline}
{bullet} Extracting threshold voltage and subthreshold slope from the results
{newline}
{bullet} Plotting output curves and structures


Thin film fully depleted SOI MOSFETs have been shown to achieve low threshold voltages and near ideal inverse subthreshold slopes. This makes them ideal for low power operation. 
This example demonstrates that Atlas is capable of reproducing the differences between a partially depleted transistor in soiex01.in and the fully depleted transistor in this example.

The syntax and methodology used within this example are identical to that of soiex01.in with only two three modifications.

The 
{bold} mesh 
 has been modified to support the thinner SOI film thickness of 0.1um and the definition of the SOI layers on the 
{bold} region 
statement has similarly been adapted. Also, the channel doping has been reduced on the 
{bold} doping 
statement to ensure the film is fully depleted.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} soiex03.in : Partially vs Fully Depleted SOI - Leakage Current Analysis

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example simulates leakage current at high drain bias and shows how this value can be extracted as a design parameter. 
The analysis is repeated for both fully depleted and partially depleted SOI MOSFETs.  It demonstrates:

{bullet} Basic SOI structure definition using Atlas syntax
{newline}
{bullet} Deckbuild syntax for defining general structure dimensions
{newline}
{bullet} Setting transport models including impact ionization
{newline}
{bullet} Generating an Id/Vds curve with Vgs=0.0V
{newline}
{bullet} Extracting the leakage current design parameter
{newline}
{bullet} Plotting output curves and structures


The leakage current in SOI MOSFETs has in the past been seen as a barrier to its development. 
The source of this current has, in some cases, been due to the existence of interface charge at the bottom oxide-silicon interface. 
This example simulates the leakage current analysis for both partially and fully depleted SOI MOSFETs.

In this example, rather than use two Atlas input files for thick and thin SOI films, a more general purpose input file has been created. By using deckbuild 
{bold} set 
commands it is possible to create variables inside the input file. These variables may then be used to define the location of mesh lines or region boundaries.

In this example, there have been three modifications made to the input file. The 
{bold} y.mesh 
 definition has been modified to use the created variables to define the location of y mesh lines and, in a similar manner, the  
{bold} region 
statement has also been changed to use these variables to define the region boundaries. Interface charges, on both the top and bottom interfaces, are defined on the 
{bold} interface
 statement. In SOI MOSFETs, these two interfaces can have very different values of interface charge as is shown in this example. Once again the predefined variables have been used to define the regions where the charge exists.

Submicron devices should be simulated using the Energy Balance Model due to
velocity overshoot, and nonlocal impact ionization effects, which could
substantially influence device characteristics. The
{bold} models hcte 
statement is used to set the solution for electron and hole energy balance. Next, the
{bold} impact 
statement is used to specify that the Selberherr impact ionization
model is to be used. Impact ionization is an important phenomenon in SOI
devices even at relatively low voltages. The impact model is required
here for this SOI Id/Vds analysis.

The remaining Atlas syntax and methodology is based upon that of soiex01.in and a description of it may be found there.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.
 This example has initially been set up to simulate a thick film partially depleted transistor. 
To simulate the thin film fully depleted transistor case the set statements need to be changed to 

{bold}set simid=0.05
{newline}
{bold}set sibot=0.1
{newline}
{bold}set oxbot=0.5

and the example is executed once again.


{subsection} soiex04.in :  The "Kink" Effect in Partially Depleted SOI MOSFETs

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R


This example simulates the Ids/Vds characteristics of a partially depleted SOI MOSFET, described in example soiex01.in, for three gate voltages. 
The effect of impact ionisation at the drain junction causes the silicon film to be raised in potential and causes a shift in the threshold voltage. 
This is seen as a "kink" in the Ids/Vgs curves. The file shows:

{bullet} Basic SOI structure definition using Atlas syntax
{newline}
{bullet} Setting transport models including impact ionization
{newline}
{bullet} Generating an Ids/Vds curve with Vgs=1V, 2V and 3V
{newline}
{bullet} Plotting output curves and structures.

The Atlas syntax and methodology is based upon that of soiex01.in and a description of it may be found there.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} soiex05.in :  Negative Transconductance - Effect of Lattice Heating

Requires: S-Pisces/Giga
{newline}
Minimum Versions: Atlas 5.24.1.R

This example compares the results of Ids/Vds curves for an SOI
transistor using isothermal and non-isothermal approaches. The heating
of the silicon film causes a negative saturation slope. The file shows:

{bullet} SOI structure formation using Atlas syntax
{newline}
{bullet} Selection of the lattice heating model
{newline}
{bullet} Selection of thermal boundary conditions
{newline}
{bullet} Id/Vds simulation for Vgs=10V
{newline}
{bullet} Repetition of the Ids/Vds curve excluding lattice heating for comparison


There are two Atlas runs in this example file. The first uses lattice
heating and the second uses isothermal models.

The initial phase of the input file constructs an SOI device using the Atlas syntax.
{bold} mesh, region 
and
{bold} electrode 
statements are used to define the geometry and mesh of the structure. The 
{bold} doping 
statement is used to define analytical doping profiles. A uniformly
p-doped silicon film is used with heavy gaussian n+ source and drain
regions.

The heat flow equation is selected using
{bold} models lat.temp
. Other models such as 
{bold} arora 
are used to define a temperature dependent mobility model. Local
lattice temperature is used in the documented mobility model
equations. The thermal boundary conditions are crucial in simulations with 
lattice heating. The
{bold} thermcontact 
statement defines the heat sink. The heat sink is on the bottom of the silicon substrate region. All other boundaries are presumed to be in thermal isolation.

The choice of numerical method in SOI device simulation is also
important. The standard newton method has some convergence problems in
floating body devices. As impact ionization occurs the initial guess to
the potential of the floating channel region becomes more difficult.
The newton method, which relies on a good initial guess, can encounter
convergence difficulties. These difficulties are generally not fatal to
the simulation, but require small voltage steps to be used. This adds
to the CPU time considerably. A more robust method available in Atlas
is by choosing the combined gummel/newton algorithm. 

In addition, the solution of the heat flow equation must also be
included. The most robust method, once the temperature rises above the
heat sink level, is newton. However in the early stages of the solution
the decoupled
{bold} block 
method is better. Atlas can switch between these methods so all are included in the 
{bold} method gummel block newton 
statement.


The electrical solutions for Ids/Vds is defined in a similar manner to
the regular NMOS example described in the MOS examples section.


The simulation with lattice heat is exactly analogous to the subsequent
one using isothermal models. The run differs only in having no lat.temp
or thermcontact definition.


Id/Vds curves form the two runs can be overlaid in TonyPlot showing
the effect of lattice heating on the device performance. The increased
temperature causes the mobility to decrease as the drain bias rises
leading to a negative saturation slope. Comparison of the physical
variables at the same bias is also possible from the saved solution
files. Plotting impact ionization in each case shows how the elevated
lattice temperature reduces the impact ionization rate.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} soiex06.in :  Breakdown in SOI MOSFETs - Effect of Lattice Heating

Requires: S-Pisces/Giga
{newline}
Minimum Versions: Atlas 5.24.1.R

This example compares Ids/Vds  analyses of a short channel
ultra-thin SOI transistor with Energy Balance (EB) and Nonisothermal Energy
Balance Models (NEB). It shows:


{bullet} SOI structure formation using Atlas syntax
{newline}
{bullet} Selection of energy balance and lattice heating models
{newline}
{bullet} Selection of numerical methods for coupled solution technique
{newline}
{bullet} Id/Vds simulation for Vgs=4.0V

The example file consists of two runs. The first simulates the device
using energy balance models, the second using energy balance and
lattice heating models combined.

Submicron devices should be simulated using the Energy Balance Model due to
velocity overshoot, and nonlocal impact ionization effects, which could
substantially influence device characteristics.  For high current
levels (high gate voltages) the thermal self-heating effects could also
play an important role decreasing mobility and impact ionization rate.
These effects are very pronounced in SOI transistors due to low heat
conductivity of the oxide. This leads to the negative output
conductance. This example demonstrates comparison of Ids/Vds curves
obtained with Energy Balance and Nonisothermal Energy Balance Models.

The first Atlas run uses the Energy Balance Model: Poisson's equation,
carrier continuity equations, and the energy balance equation for electrons
are solved self-consistently.

The device is described in the first part of the input file. The SOI
device is composed of a 0.05 micron layer of silicon on a 0.45 micron
silicon dioxide substrate.  The device has a 12 nm thick gate oxide and
a gate length of 0.8 microns. Effective channel length is 0.5
microns.

After the device description, the
{bold} material 
statement is used to assign an energy relaxation time for electrons.
The
{bold} models hcte.el 
statement is used to set the solution for electron energy balance.
Other parameters on the model statement select a set of physical models
for this simulation.  In this case, these models are CONSRH and AUGER
recombination, the conmob and fldmob mobility model and Band Gap Narrowing.
The 
{bold} impact length.rel lrel.el=0.02
statement is used to assign the energy relaxation length for Selberherr model.
The 
{bold} contact 
statement is used to assign the work function on the polysilicon gate.


The gate voltage is ramped to 4V. At this stage the combined algorithm is used:
{bold} method gummel newton carr=2
. Thus if convergence is not reached in decoupled mode (gummel)
the simulator will automatically switch to coupled mode (newton).  Then
the drain voltage is ramped. Again the combined algorithm is used for low
drain biases and full newton scheme for higher drain biases.
The method statement also defines that a two carrier solution is performed using
{bold} carr=2 
whereby Atlas will solve Poisson's equation for potential and the electron and hole continuity equations.

The second Atlas run uses Nonisothermal Energy Balance Model: Poisson's
equation, carrier continuity equations, energy balance equation for
electrons, and a lattice energy balance equation are solved
self-consistently.

The same set of models is used, except that the solution of the  lattice energy
balance equation is activated using lat.temp parameter in the
{bold} models 
statement.

In addition, thermal boundary conditions should be defined in this case.
Thermal boundary conditions are defined in the 
{bold} thermcontact 
statement.  A 300K temperature is specified at the thermcontact located along the bottom
of the device. Thermal isolation conditions are assumed on all other surfaces.

Id/Vds curves from the two simulations can be compared in TonyPlot.
Internal variables at the same bias point can also be compared using
the saved solution files. Plots of impact ionization rate and electron
temperature show the effect of the elevated temperature in the silicon
film of these quantities.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} soiex07.in : 3D Device Simulation - Effect of a Body Contact 

Requires: Device 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates Ids/Vgs and Id/Vds  3D analysis of a short
channel ultra-thin SOI transistor with body contact. Such 
simulations cannot be performed using a 2D simulator because the body
electrode is located in the out of the plane of the drain, gate and
source. The example shows:

{bullet} Formation of 3D structure using Atlas syntax
{newline}
{bullet} Id/Vgs solution with Vds=0.1V
{newline}
{bullet} Id/Vds solution with Vgs=1.5V

The formation of this 3D structure is performed using the Atlas syntax.
The syntax used is very similar to that in the previous 2D example. The
definition of dimensions in the third direction is defined by the
{bold} z 
indicator. Thus z.min and z.max define extents in the z direction, just
as x.min and x.max do in the x direction. 

The SOI device is composed of a 0.05 micron layer of silicon on a 0.45
micron silicon dioxide substrate.  The device has a 12 nm thick gate
oxide and a gate length of 0.8 microns (effective channel length is 0.5
microns).  The gate width is 2.5um. The body contact location is
defined by the following statement

{bold} elec  num=4  x.min=2.8 x.max=3.6 y.min=-0.012 y.max=0.00 z.min=3.5 z.max=4

After the device description, the
{bold} model 
statement is used to select a set of physical models for this simulation.  In this case,
these models are 'consrh' and 'auger' recombination, the conmob and fldmob mobility models, 
Band Gap Narrowing.
The 
{bold} impact 
statement is used to specify the Selberherr model.
The 
{bold} contact 
statement is used to assign the work function on the polysilicon gate.

The numerical methods used are also similar to the previous example:
{bold} METHOD gummel newton carr=2
. This means that if convergence is not reached in decoupled mode (gummel) 
the simulator will automatically switch to coupled mode (newton). In 
addition, a two carrier solution is performed by solving Poisson's 
equation for potential and the electron and hole continuity equations.


The drain voltage is set to 0.1V, and then the gate voltage is swept 
to 1.5V to measure the Ids/Vgs curve. 


Then the gate voltage is set to 1.5V, and then the drain voltage is
swept to 3V.  At this point, faster solutions are obtained using the
coupled newton algorithm so the simulation switches to this
method.  The drain voltage is then ramped to 4V.

The IV results are displayed using TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} soiex08.in :  Modelling for Deep Submicron  - Process to Device

Requires: SSuprem 4/S-Pisces/Giga
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example uses process simulation to construct a 
{bold} SOI MOSFET
 that has full dielectric isolation. Device simulations are then 
performed that use Non-isothermal Energy Balance (NEB) calculations 
to obtain Ids/Vds characteristics.
It shows:

{bullet} SOI structure formation using SSuprem 4 process simulation
{newline}
{bullet} Partially depleted SOI design
{newline}
{bullet} Selection of energy balance and lattice heating models in Atlas
{newline}
{bullet} Selection of numerical methods for coupled solution technique
{newline}
{bullet} Id/Vds simulation for Vgs=1.0, 3.0 and 5.0 V


A silicon-oxide-silicon structure was formed in SSuprem 4 by use of the 
{bold} region
 statement of Athena. This structure was then subjected to a standard bulk 
MOSFET processing sequence, which has been described in mos1ex01.in. 
The structure in this example has been designed so that the SOI thickness 
is greater than the depth of the source and drain junctions. 
This ensures that the device will operate in a partially depleted mode of 
operation during later device simulations.

One major modification made to the original processing sequence was to 
introduce a LOCOS isolation step. The result of this step was the creation 
of a fully oxide isolated island of silicon. The 
{bold} COMPRESS 
model for oxidation has been used in this example but more complex and 
accurate models may be used to study birds beak effects in SOI MOSFETs, 
as described in the Athena/SSuprem 4 section.

The process simulation structure will be passed into Atlas automatically 
using DeckBuild's auto-interface. This auto-interface therefore
allows global optimization from process simulation to device simulation
to SPICE model parameter extraction.

The 
{bold} contact 
statement is used in Atlas to define the workfunction of the gate electrode. The 
{bold} interface  
command is used to define the the fixed charge at the oxide/silicon interfaces. The 
{bold} models 
statement defines a set of physical models for the simulation. CVT and SRH are 
standard models for MOSFET simulation. The energy balance equation for electrons 
is specified by 
{bold} hcte.el 
parameter and the lattice heat flow equation is solved with Giga by setting the parameter 
{bold} lat.temp
. A thermal contact must also be defined when solving the heat flow equation with 
Giga and is defined using the 
{bold} thermcontact 
statement. In this example this thermal electrode is defined to be the same as 
contact number #4 which is the substrate electrode.

The numerical algorithm chosen for this system of equations is the newton approach 
defined on the 
{bold} method 
statement. This statement is also used to define the semiconductor equations.
{bold} carr=2 
will solve for potential and the hole and electron continuity equations. The 
{bold} trap 
parameter allows the bias step to be reduced in cases of non-convergence for a total of 
{bold} maxtrap
 times.

The solution begins by applying zero volts to all contacts and only solving for potential.
A small voltage is then applied to the drain contact. This is normally advised in the 
case of SOI simulations due to the presence of a floating region of potential. 
As described in previous SOI examples, this floating region of potential can cause 
great numerical difficulties. However by solving for 5 equations, which couples 
the equations very tightly, and applying only small voltage steps the convergence 
in this example is excellent.  

The gate voltage is ramped to 1, 2 and 3 V and a solution saved at each of these 
bias conditions.  Each solution is then used as the initial starting point for 
simulating the Ids/Vds characteristics by using the 
{bold} load
command. A logfile is then opened to store the terminal characteristics and a 
{bold} solve 
statement applies the drain bias sweep. This procedure is then repeated for each gate voltage.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} soiex09.in : 3D Device Simulation - Effect of Lattice Heating

Requires: Device 3D/Giga 3D
{newline}
Minimum Versions: Atlas 5.24.1.R
This example demonstrates an Id/Vds 3D analysis of a short channel
ultra-thin SOI transistor with a body contact. Two simulations are
performed with and without lattice heating turned on.

Such simulations cannot be performed accurately using a 2D simulator
because the body electrode is located in a different z-plane compared with the drain, gate and source. The example shows:

{bullet} Formation of 3D structure using Atlas syntax
{newline}
{bullet} Id/Vds solution with Vgs=3.0V

The formation of this 3D structure is performed using the Atlas syntax.
The syntax used is very similar to that of a 2D example. The
definition of dimensions in the third direction is defined by the
{bold} z 
indicator. Thus z.min and z.max define extents in the z direction, just
as x.min and x.max do in the x direction. 

The SOI device is composed of a 0.2 micron layer of silicon on a 0.4
micron silicon dioxide substrate.  The device has a 17 nm thick gate
oxide and a gate length of 1.0 microns (effective channel length is 0.8
microns).  The gate width is 2.5um. The body contact location is
defined by the following statement

{bold} electrode     name=body   x.min=1 x.max=2 y.min=0.0 y.max=0.0 z.min=3.5 z.max=4

The
{bold} model 
statement is used after the device description to select a set of physical 
models for this simulation. In this case the example uses conmob: the 
doping dependent low field mobility model, fldmob: the lateral electric 
field-dependent mobility model, srh: Shockley-Read-Hall recombination, 
auger: recombination 
accounting for high level injection effects, and bgn: band gap narrowing. 

Also, in the lattice heating simulation input deck, an additional parameter
{bold} lat.temp
 is placed on the
{bold} model
 statement. This switches on lattice heating inside the simulation. With 
this option it is also necessary to include a thermal boundary condition. 
This is included using the following statement:

{bold} thermcontact num=1 ext.temp=300 x.min=0 x.max=3 y.min=0.35 z.min=0 z.max=4  

and forces the temperature on the bottom of the device to be fixed at 300K.
 
The 
{bold} impact 
statement is used to specify Selberherr model.
The 
{bold} contact 
statement is used to assign the work function on the polysilicon gate.

The numerical methods used are different to previous 2D examples and are 
chosen by the statement
{bold} method       bicgst.
This chooses a bi-conjugate gradient solution scheme which has been found 
to give robust and fast simulations of three dimensional devices.

The drain voltage is set to 0.1V, and then the gate voltage is swept to 
3.0V to obtain the operating gate voltage.

Then the gate voltage is set to 3.0V, and then the drain voltage is
swept to its final value.  

The IV results are displayed using TonyPlot showing the ID-VG characteristics 
both with and without lattice heating.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} soiex10.in : SOI : Use of Body Contact to Suppress Kink Effect

Requires: Victory Process , Victory Device 
{newline}
Minimum Versions: Victory Process 7.14.3.R, Victory Device 1.10.2.R

DevEdit to Victory Device example showing how the use of a body contact on
an SOI NMOSFET can suppress a kink in the IdVd curve that is due to the
effects of impact ionization. The effect of lattice heating is also shown.

This example demonstrates:

{bullet} Definition of 3D SOI MOSFET structures using DevEdit
{newline}
{bullet} The use and effect of a body contact in a 3D MOSFET geometry
{newline}
{bullet} Calculation of lattice-heating effects
{newline}
{bullet} Simulation of impact ionization effects

The first DevEdit section in this example defines a basic SOI NMOSFET.
Although the geometry of this device is essentially two-dimensional,
it is here defined and simulated in 3D so that the results can be
directly compared with those from a 3D MOSFET with a body contact.
Using a tetrahedral mesh, the first MOSFET structure is exported to
the file vdex02_0_0.str, from which it is imported into Victory Device.

In Victory Device, the statement
{bold} ELECTRODE SUBSTRATE 
ensures that the substrate of this device is recognized as an electrode,
which will be held at ground potential. The succeeding 
{bold} CONTACT 
statement assigns to the gate the workfunction of n-type polysilicon.
The 
{bold} MODELS 
statement is used to specify the particular models to be used during 
the simulation. In this example, they include:
{newline}
{bullet} CVT: 
A general purpose mobility model including concentration, 
temperature, parallel field and transverse field dependence.
{newline} 
{bullet} SRH: 
Shockley-Read-Hall recombination.
{newline}
{bullet} AUGER: 
Auger recombination.
{newline}
{bullet} BGN: 
Bandgap narrowing in the presence of heavy doping.

In addition to these models, the
{bold} IMPACT SELB 
statement specifies that the Selberherr model for impact ionization
will be used.

Now some special steps must be taken, because the MOSFET used in this
example is not especially stable.  That makes it difficult to obtain a
consistently steady numerical solution. To facilitate this, we adjust
some solver parameters by means of 
{bold} METHOD 
statements.

Once the contacts, models, and methods have been specified, the simulation
begins with a 
{bold} SOLVE INIT 
to initialize the solution at zero bias. Next a small initial bias is put
upon the drain, and then the gate is brought up to its operating bias of 3 V.
The bias on the drain is then ramped from 0.2 V up to 4 V, and the IdVd
curve saved to the logfile vdex02_0_2.log.

After this, the entire simulation is repeated for this structure, but this
time considering lattice heating effects. The 
{bold} CONTACT 
and
{bold} MATERIAL 
statements assign to the gate contact the workfunction, heat capacity,
and thermal conductivity of n-type polysilicon. The
{bold} THERMCONTACT 
statement here defines a thermal contact at the substrate, and specifies
that it will be maintained at 300 K.

Once the gate has been biased, lattice temperature
simulation is activated by the statement
{bold} MODELS LAT.TEMP
. The drain is then biased as before, and the IdVd curve is
saved to the logfile vdex02_0_4.log.

The second DevEdit section defines a MOSFET with an additional body contact,
beside the gate. The difference between this structure and the first one can
be seen by comparing vdex02_1_0.str and vdex02_0_0.str in 
{bold} TonyPlot3D
. 

As with the first structure, simulations are run with and without lattice 
heating effects. With the addition of the body contact (at 0 V), however,
the device is much more stable. The IdVd curves are written to the log files
vdex02_1_2.log and vdex02_1_4.log, and all four IdVd curves generated in
this example are compared in 
{bold} TonyPlot
. This comparison clearly shows that the addition of the body contact suppresses
the kink in the curves, which is due to the effects of impact ionization.

In
{bold} TonyPlot3D
, you can examine the structure files vdex02_0_1.str and vdex02_1_1.str to
compare the impact ionization patterns for the two devices, and the
structure files vdex02_0_2.str and vdex02_1_2.str to compare the heat fluxes 
as well as other lattice heating effects.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} soiex11.in : 20nm Undoped Channel, Ultra-Thin Body and Buried Oxide Fully Depleted SOI NMOSFET in 3D

Requires: Victory Process / Victory Device
{newline}
Minimum Versions: Victory Process 7.14.3.R / Victory Device 1.10.2.R

Fully depleted SOI (FDSOI) employing a very thin silicon body on an ultra-thin buried oxide has been considered a potential candidate for aggressive CMOS scaling. Accurate modeling of this kind of FDSOI device necessitates a careful selection of physical models. In this example, 3D device modeling and simulation with Victory Device is demonstrated of a 20nm undoped channel, ultra-thin body and buried oxide FDSOI NMOSFET that is created and meshed using the
{bold} VICTORY(CONFORMAL)
export in process mode of Victory Process.

Featuring a gate length in the sub-100 nm regime, the FDSOI design is subject to non-local effects such as velocity overshoot. In this respect, the energy balance transport model is favored over the conventional drift-diffusion model. The energy balance model is applicable to electrons by specifying the
{bold} HCTE.EL
parameter in the
{bold} MODELS
statement. For energy balance simulations, it is practical to use the carrier temperature in place of the electric field as the driving force for the field dependent mobility model (
{bold} FLDMOB
). The parameter 
{bold} EVSATMOD=0 
in the 
{bold} MODELS 
statement sets the driving force for the high-field saturation model to be electron temperature. 

In the ultra-thin channel of the 20nm FDSOI NMOSFET, the significance of quantum confinement of electrons becomes conspicuous. The Bohm quantum potential model allows the quantum confinement effects on electron transport to be included in the simulation by means of the
{bold} BQP.N
parameter of the 
{bold} MODELS 
statement. The principal quantization direction for Bohm quantum potential can be set to x, y, or z using the
{bold} BQP.QDIR 
parameter in the
{bold} MODELS
statement. For the 20nm FDSOI NMOSFET, the direction of quantization is in the Z direction, i.e.,
{bold} BQP.QDIR=Z 
.

Self-heating effects are common in FDSOI structures due to the low thermal conductivity of the buried oxide. Lattice heating is incorporated in Victory Device through self-consistent solutions of the lattice heat flow equation. The 
{bold} LAT.TEMP 
flag must be set in the
{bold} MODELS 
statement to activate these effects.

The non-local, quantum confinement, and self-heating effects are illustrated by comparing the I-V characteristics of the 20nm FDSOI NMOSFET simulated using the drift-diffusion model with those simulated using the energy balance transport model alone and in combination with the quantum transport and lattice heating models, respectively.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} soiex12.in : 20nm Undoped Channel, Ultra-Thin Body and Buried Oxide Fully Depleted SOI NMOSFET in 2D

Requires: Victory Process/Victory Device 
{newline}
Minimum Versions: Victory Process 7.14.3.R / Victory Mesh 1.0.4.R / Victory Device 1.10.2.R

This example is similar to the previous
{bold} soiex11.in
example, except that it aims at pointing a simple way to generate a 2D 20nm FDSOI NMOSFET from the existing 3D process flow in the previous
{bold} soiex11.in
example.

When a mask layout file is used for process simulation, a 2D simulation deck in Victory Process differs from a 3D simulation deck only in that a 2D simulation domain (2D cut) must be defined within the mask using the 
{bold} FROM 
and 
{bold} TO 
parameters as well as the 
{bold} AT 
parameter of the
{bold} INIT
statement. In this example, a 2D cut is made at the position Y = 0.02 
{bold} (AT=0.02)
within the
{bold} soiex12.lay
mask, which is idential to the 
{bold} soiex11.lay
mask used in the previous
{bold} soiex11.in
example, to create a 2D FDSOI NMOS structure. The cut line is parallel to the X-axis starting from the point X = 0
{bold} (FROM=0)
, which coincides with the left side of the mask area, to the point X = 0.12
{bold} (TO=0.12)
, which coincides with the right side of the mask area. As this X cut-line at the Y = 0.02 position within the mask results in a 2D simulation in XZ plane, the
{bold} FLOW.DIM=2D_XZ
parameter is also specified in the
{bold} INIT
statement to enforce the 2D symmetry mode right from the beginning of the simulation flow.

The resulting 2D FDSOI NMOSFET is meshed using the 
{bold} VICTORY(CONFORMAL)
export for 2D process mode. Hereby, the conformal 2D meshes are produced with 
{bold} MAX.DISTANCE=0.01
, meaning that the allowable distance of approximation between the conformal device mesh and the input process simulation geometry is limited to 0.01 micron. In addition, the maximum level of obtuseness of a triangle in the device mesh is set to
{bold} MAX.OBTUSENESS=1
. The lower the value of
{bold} MAX.OBTUSENESS
, the more triangles of the resulting conformal device mesh are less obtuse. The
{bold} SMOOTH
flag is enabled to smooth the process simulation geometry in the neighborhood of where three layers meet, thus enhancing the quality of the conformal device mesh.

Like the previous 
{bold} soiex11.in
example, the Id-Vd characteristics of the 2D 20nm FD-SOI MOSFET are simulated with various carrier transport models using Victory Device.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the
{bold} run 
button to execute the example.


{section} EPROM : EPROM Application Examples 





{subsection} eprmex01.in : Flash EEPROM Programming and Erasing 

Requires: SSuprem 4/DevEdit/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example simulates the structure
definition and electrical test of a FLASH EEPROM cell. The example consists of:

{bullet} Dual gate EEPROM structure formation in Athena
{newline}
{bullet} Re-meshing in DevEdit
{newline}
{bullet} Threshold voltage simulation before programming
{newline}
{bullet} Transient programming simulation
{newline}
{bullet} Threshold voltage simulation after programming
{newline}
{bullet} Transient erasure simulation  

For accurate simulation of programming and erasure it is vital to have
a very accurate representation of the device structure. The gate and
tunneling currents are very sensitive to geometry and doping profiles.
It will be possible for you to alter
process parameters and observe their effect on device performance
directly with this input file. 

The interface between Athena and Atlas is automatic. The electrode
statements in Athena are used to define the electrode positions for
Atlas. Any metal or polysilicon layer can optionally be set as an
electrode region. The electrode names given in Athena are transferred
into Atlas.

As with many of the examples provided, the grid structure for the
example EEPROM device is rather coarse. This allows a realistic
execution times for the example. When comparing simulated and real
EEPROM devices, a finer grid is recommended. This can be done quickly by
decreasing the 
{bold} space.mult 
parameter of the initialize statement. 

To obtain a finer grid, DevEdit is used. This can effectively refine the
grid for the electrical simulation. A finer mesh for resolving the
dopant distribution is still recommended though.

The  Atlas programming simulation consists of 3 basic parts. Firstly a
threshold voltage simulation is done to obtain the EEPROM cell threshold in
it's unprogrammed state. Then the device is biased into the initial
condition of the transient with the high programming control gate
voltage. Here 12V is used.

Next the programming transient is performed. Since the times involved in
programming are much greater than the relaxation time of the device, the
syntax 
{bold} method quasi can be used to specify the quasistatic 
method. This results in a large improvement in the speed of the
calculation.

The programming consists of two solve
statements. The first ramps the drain to 5.0V in 1ns. A solution file
is saved at this point. This can be used to examine the
potentials before charge is applied to the floating gate. The second
line gives no change in the applied voltages, it simply leaves the
device biased the condition VCG=12.0V and Vds=5.0V. During this time
the hot electron injection model will predict values of gate current.
This current coupled with the transient time step size is used to add
charge self-consistently to the floating gate. A solution file is saved
at the end of the transient.

Comparisons of device internal distributions, such as potentials can be
done by comparing the two solution files from before
programming and  after the programming.

The final part of this run consists of a copy of the first part.
A threshold voltage test is run on the EEPROM cell. In this case
however the device is programmed and a large threshold voltage shift is
seen.

The graphics output of this section shows plots of threshold voltage
before and after programming. A plot of floating gate charge vs. time
can be obtained from the result of the transient simulation. Also, the
actual programming gate current can be seen falling off with time. This
is because the increasing charge on the floating gate increases the
threshold voltage of the device. This in turn reduces the drain
current which will cause a drop in hot carrier density and hence a
reduction in programming current.


It is possible to plot the showed the floating gate charge charge vs. time curve. This can be quickly
converted to threshold voltage shift using the following formula:

Threshold Shift =   Q Tox / L Eox 


Where Q = floating gate charge per unit width,
Tox  = inter-poly oxide thickness,
L = length of floating gate,
Eox = absolute permittivity of oxide.

In this case Tox is converted into an effective Tox based on the thickness
of each layer of the inter-poly ONO di-electric. This is done by:

Effective Tox = E oxide *  (Tox1/Eox1 + Tnitride/Enitride + Tox2/Eox2   )

where Tx is thickness of x and Ex is relative permittivity of x.

The final run of this example is a transient erasure simulation. Atlas is restarted using the command
{bold} go atlas
. The correct set of erasing models for EEPROMs is chosen . The key models are
{bold} fnord 
and
{bold} bbt.std
. fnord specifies the solution for Fowler Nordheim tunneling the main
erasure mechanism for EEPROMs. bbt.std specifies the band to band
tunneling model. This is required due to the high electric fields at
the source/channel junction. Tunneling due to these fields leads to
high substrate current during erasing.

After the models and other material parameters are set, the charge on
the floating gate is ramped using the parameter q1. This 'q' works in
an analogous manner to ramping voltages using 'v': q1 and qstep are the
equivalent in charge to v1 and vstep.  In EEPROM erasure the drain is
disconnected to avoid large power consumption from source to drain
breakdown currents. One way to disable a contact is to use current
boundary conditions and force zero current. An alternative used here is
to attach a very large resistor to the contact.

The transient erasure is performed in a single solve statement. The
source electrode is ramped to 12.5V. The mechanism to remove charge
from the floating gate is exactly analogous to programming. The only
differences is the  Fowler-Nordheim tunneling rather then hot electron
injection as gate current. Obviously this will change the direction of
the current through the gate oxide.

The resultant graphics show the transient erasing characteristic. To
plot the threshold voltage shift, the same calculation given in the
programming section can be used.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.
 



{subsection} eprmex02.in : 3D Flash EPROM Programming

Requires: DevEdit 3D/Device 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This examples demonstrates steady-state and transient simulation of
an Flash EPROM device in three dimensions.

In this example an EPROM device is constructed using DevEdit 3D. The 
structure is then passed to Atlas for electrical testing. The input file
consists of the following sections:

{bullet} Construction of the device in DevEdit 3D
{newline}
{bullet} Threshold voltage test before programming
{newline}
{bullet} Transient simulation of Flash EPROM programming
{newline}
{bullet} Threshold voltage test after programming


The first stage of the input constructs the EPROM geometry, material regions,
doping profiles, and electrodes in DevEdit 3D. The structure was created in 
DevEdit 3D by drawing the device regions in interactive mode and specifying 3D
doping distribution. Finally the mesh was generated automatically by specifying 
basic mesh constraints and refining in the important areas of the device.

The Atlas simulation begins from reading in the structure from
DevEdit 3D.  DeckBuild provides an automatic interface between DevEdit
and Atlas so that the structure produced by DevEdit 3D is transferred
to Atlas without having to use the mesh statement.

In Atlas, the 
{bold} contact 
statements are used to assign the work function on the polysilicon
gates and to specify the floating gate contact. The
{bold} interface 
statement is used to assign a fixed interface charge under the floating gate.
The
{bold} models 
statement is used to select a set of physical models for programming
simulation.  The  key model for programming is the hot carrier injection model 
to give the gate current. This is enabled by
{bold} models hei
.

First the initial solution for zero biases is obtained.  Next, Id/Vgs
calculations are performed with zero charge on the floating gate
(before programming). The drain voltage is set to 0.5V, and the control
gate voltage is ramped until the drain current reaches a compliance
limit set with the 'compl' parameter. At this stage the combined algorithm
is specified using
{bold} method gummel newton
. 
It means that if convergence is not reached in decoupled mode (gummel) the
simulator will automatically switch to coupled mode (newton).

Next, the programming process is simulated. First of all, the control
gate voltage is ramped to 10V. The combined algorithm is used for this
stage, but the coupled Newton method is used for transient analysis
calculations. In the transient analysis the drain voltage is ramped to
5.5V in 1ns. Vds is kept constant while transient programming is
performed until the time set by 
{bold}tfinal 
is reached.

The final stage of the file re-simulates the Id/Vgs curve to obtain the
threshold voltage after programming. The results of the two Id/Vgs curves can be overlaid using TonyPlot.
{bold} extract 
statements can be used to measure the threshold according to
user-defined rules. Details of the extract syntax for threshold voltage
can be found under the MOS threshold voltage example. extract can also be used to measure the threshold voltage shift by subtracting the two previously extracted thresholds.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} eprmex03.in : Controlling the Capacitative Coupling 

Requires: SSuprem 4/DevEdit/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example consists of :

{bullet} Dual gate EEPROM structure formation in Athena
{newline}
{bullet} Re-meshing in DevEdit
{newline}
{bullet} Threshold voltage simulation without a coupling capacitor
{newline}
{bullet} Definition of additional coupling capacitance
{newline}
{bullet} Threshold voltage simulation with a coupling capacitor
{newline}
{bullet} Plotting two threshold voltage curves for comparison

This example file is based upon that given in exprmex01.in but 
has an additional modification to account for capacitive coupling. 
 A description of the standard syntax may be found in example eprmex01.in.

In a real device, the coupling between the control gate and the floating 
gate is a three-dimensional problem that depends upon the layout. 
As a result any two-dimensional simulation will not be able to accurately 
simulate coupling capacitance. In most cases it will underestimate this value.
To take account of this problem Atlas is capable of connecting 
electrodes together via some capacitor. 
This effectively increases the coupling capacitance and can normally allow 
accurate matching to experimental data without having to make unphysical 
modifications to the structure.

This example consists of two Atlas input files. The first is a standard 
calculation of the threshold voltage from which the coupling ratio may be found.
In the second, the syntax has been modified so that on the 
{bold} contact 
 statement a capacitance is specified between the control and floating gates.
After plotting the results it is apparent that the coupling ratio has been 
increased due to the additional coupling capacitance.
 This has effectively modified the threshold voltage.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} eprmex04.in : Hot Carrier Injection and Ionisation  

Requires: SSuprem 4/DevEdit/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example is based upon exprmex01.in for the SSuprem 4/DevEdit simulations. It demonstrates

{bullet} Concannon model for substrate current
{newline}
{bullet} Concannon model for hot carrier injection to the gate
{newline}
{bullet} Plotting of gate current as a function of position on the gate

In practice, hot electron injection is normally analysed by measuring the gate 
current that is injected onto the floating gate contact. 
The Atlas input file was therefore created to simulate both the floating 
gate and substrate currrents. 
To, do this the electrode
{bold} fgate 
was not specified as floating. 

The Concannon model for substrate current is implemented on the
{bold} impact 
statement with the parameters
{bold} n.concannon p.concannon 
to turn on the individual electron and hole components. The Concannon model for hot carrier injection is implemented on the 
{bold} models 
statement with the parameters 
{bold} n.concannon p.concannon 
for the individual components. Both of these models are based upon the carrier energies and therefore will automatically implement the electron and hole energy balance equations.

This example finishes by saving a solution and plotting the structure and the injected current as a function of position across the polsilicon gate - oxide interface.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} eprmex05.in : Polysilicon versus metallic floating gate 

Requires: S-Pisces
{newline}
Minimum Versions:  Atlas 5.24.1.R

This example creates a simple EEPROM cell with a polysilicon floating gate.
It then highlights the difference between treating this as a floating
contact (perfect conductor) or a floating electrode (semiconductor).
It demonstrates

{bullet} Single gate EEPROM structure formation in Atlas.
{newline}
{bullet} Mesh refinement in Atlas.
{newline}
{bullet} Threshold voltage simulation before charging of polysilicon.
{newline}
{bullet} Assignment of a charge to perfectly conducting contact.
{newline}
{bullet} Threshold voltage simulation after charging.
{newline}
{bullet} Assignment of a charge to a semiconductor contact.
{newline}
{bullet} Threshold voltage simulation after charging.
{newline}

The
{bold} FLOATING 
parameter on the
{bold} CONTACT 
statement causes the specified electrode to be treated as
a perfect conductor, and therefore as an equipotential.  Any stored charge 
is assumed to be evenly distributed and coupled to the device potential
by using Gauss's flux theorem. For a polysilicon electrode this can be an
imperfect approximation, because in the isolated semiconductor the potential
and charge distributions will be position dependent in order to maintain
the condition of zero steady state current flow.  The
{bold} FLOATING
 parameter on the
{bold} ELECTRODE
 statement
allows to to model the floating gate as a semiconductor.
{newline}
This example has four sections, each staring with
{newline}
{bold} go atlas
{newline}
The first creates the EEPROM cell using Atlas syntax,  giving the polysilicon
floating gate a donor density of 1e18 /cc.  A simple mesh refinement is then 
carried out to give better resolution near the p-n junctions, and the structure is
saved
{newline}
In the next section the structure is loaded and the
device with zero floating gate charge is simulated
to give the unprogrammed Id-Vg curves.
{newline}

The next section loads the structure and assigns the floating gate to be 
a perfect conductor using the 
{bold} FLOATING 
parameter on the
{bold} CONTACT 
statement, as well setting the workfunction to be that for n-doped polysilicon
by using the 
{bold} N.POLY
 flag.  The floating gate is given a negative charge of
-1e-15 C/cm  using the Q<elec> syntax of the SOLVE statement.  This is 
an alternative to charging the floating gate during a transient solve.
The Id-Vg curve of this charged device is then obtained, and the structure
file with a control gate bias of 3 V is saved.
{newline}
The final section loads in the structure and uses the syntax
{newline}
{bold} ELECTRODE MODIFY FLOATING 
{newline}
to specify that the named electrode should be
treated as an isolated semiconductor. It is still necessary to specify the
workfunction of the contact using the N.POLY parameter on the CONTACT statement,
but the FLOATING parameter should not be specified on the CONTACT statement in
this case.   The floating gate is given a negative charge of
-1e-15 C/cm  using the Q<elec> syntax of the SOLVE statement, as previously,
and the Id-Vg curve is obtained. The PROBE statement saves the integrated floating gate
charge to the logfile. The structure file of the device with a
control gate bias of 3V is saved.
{newline}
The visualisation of the structure files shows a cutline through the gate stack,
with the floating electrode case having a position dependent electron concentration
and the floating contact case showing no concentration. The potentials in the 
floating gate can also be compared to see an equipotential in the floating contact
case and potential changes in the floating electrode case.  The Id-Vg
curves are slightly different between the two cases,  due to the different charge
distributions.  The integrated total charge of the floating electrode, as obtained 
from the PROBE statement, can be seen to be bias independent.  The threshold voltages
for the three curves can be obtained from the results.final file.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{section} LATCHUP : CMOS Latchup Application Examples



{subsection} latchex01.in : Transient Simulation of CMOS Latch-Up 

Requires: MaskViews/SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates a latch-up transient in an npnp structure
typical of CMOS processes. The stages of this examples are:

{bullet} Definition of a CMOS layout to include a parasitic npnp structure
{newline}
{bullet} Interface of the layout information to Athena
{newline}
{bullet} Process simulation of the npnp structure
{newline}
{bullet} Interface of the structure to Atlas with automatic electrode specification
{newline}
{bullet} Setting of a transient negative voltage pulse on the Vss contact to trigger latch-up.

The process simulation for this example is defined using MASKVIEWS.
Users not familiar with the MASKVIEWS/Athena interface should read the
description under the ATHENA_SSUPREM4 examples section. Along with the
input file that can be seen by loading this example in to DeckBuild is
a layout file. The layout is of a CMOS well boundary with n+ and p+
contact layers. An n-p-n-p structure is formed by these layers. By
modifying the layers it is possible to misalign the contacts with
respect to the well boundary and repeat this latch-up simulation. Using
the MASKVIEWS/Athena interface avoids having to set etch coordinates
manually.

Along with the layout file, a MASKVIEWS cross-section file is copied to
the user's current working directory when 'Load example' is selected.
For this example, the cross-section information is indicated on the
{bold} go athena
line at the top of the input file.  This is a cross section drawn by the
user through the layout. In this layout it is drawn through the center
of the n+ and p+ contacts.

The key syntax in Athena that load the mask edge coordinates are
{bold} mask  
statements. A syntax sequence such as:

deposit alum thickness=0.05 div=2 
{newline}
mask name="MET" 
{newline}
etch alum dry thickness=0.06 
{newline}
strip

will deposit a metal layer, deposit photoresist, load the etch
coordinates of the layer defined in the cross section file as 'MET',
etch the photoresist pattern, etch the exposed metal with the specified
thickness, and then finally strip off all photoresist.

In the layout file, each area of metal (layer MET) was defined with a
name to be used as the name of the electrode associated with that area
of metal. Each of the n+ and p+ contacts were defined in this manner.
The statement
{bold} autoelectrode 
at the end of the Athena run will automatically define the electrodes
for Atlas.

In Atlas the material and model parameters are set first as usual.
Carrier lifetimes are set in the
{bold} material 
statement. These lifetimes will affect the gain of the parasitic
bipolar devices in this structure. Typical bipolar models are set. Here
all models are listed individually, but they could be replaced by the
macro
{bold} models bip. 
For latch-up, impact ionization must also be included. Two DC solve
statements are required to bias the device into the correct initial
voltage with 5V reverse bias between nwell and pwell.

Latch-up in this example will be caused by a transient pulse on the Vss
contact. This is defined by two solve statements. The first defines the
ramp to the negative voltage and the time at that voltage. The second
sets the time for the ramp down and the final simulation time.  If no
latch-up occurs, the device should return at the end of this transient
to the same state as at the beginning of the transient. 

Latch-up is seen in the terminal characteristics as the current rises
during the negative pulse, begins to fall, but in the end keeps rising.
At the final simulation point the current is still rising and
eventually burn-out of the device would occur. The time taken for this
to occur could also be simulated by including lattice heating (using
GIGA) into this simulation.

Latch-up can also be seen in the internal distributions of carriers and
current density in the solution files generated by this example.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. You
{bold} cannot 
run this file until the cross-section file is loaded. To do this go to
the DeckBuild menu
{bold} Tools->MaskViews->Cutlines 
Then select the name of the cross-section file from the list. The name
will be <file>.sec where <file> is the name of this example. Then press
{bold} Load 
on this Cutline menu. Once the cross-section file is loaded, select
{bold} run 
in DeckBuild to execute the example



{subsection} latchex02.in : CMOS Latch-Up By Positive Voltage on Vdd

Requires: MaskViews/SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates a latch-up caused by a DC ramp in an npnp
structure typical of CMOS processes . The stages of this examples are:

{bullet} Definition of a CMOS layout to include a parasitic npnp structure
{newline}
{bullet} Interface of the layout information to Athena
{newline}
{bullet} Process simulation of the npnp structure
{newline}
{bullet} Interface of the structure to Atlas with automatic electrode specification
{newline}
{bullet} Ramp of Vdd to cause latch-up using curve tracing algorithm.

The parasitic npnp device used is identical to the device in the
previous example. The use of MASKVIEWS and Athena to create this
structure is given in the description of that example. The initial part
of the Atlas run is also identical.

This file differs only in the manner of triggering the latch-up. A DC
ramp of the p+ contact in the n-well (named Vdd) is used as the
trigger. Once the voltage on Vdd exceeds the 5.0V on the nwell, the
p+/n-well junction is forward biased and latch-up may be triggered.  

To
allow the complete holding voltage and current to be extracted simply,
the curve tracing algorithm in Atlas is used. The key command
is the 
{bold} curvetrace 
statement coupled with 'solve curvetrace'. The parameters on the trace
statement are used to set initial conditions and limits on the curve
tracing.  A detailed description of the use of this technique in tracing
IV curves with turning points can be found in the description of the
MOS snapback example.


The latch-up characteristic can be seen in the stored log file. It is
important to plot the current versus
{bold} vdd int. bias 
rather then 'vdd bias', since the former is the voltage actually
applied to the semiconductor and the latter includes the effect of the
load line used during the curve trace.



To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. You
{bold} cannot 
run this file until the cross-section file is loaded. To do this go to
the DeckBuild menu
{bold} Tools->MaskViews->Cutlines 
Then select the name of the cross-section file from the list. The name
will be "file".sec where "file" is the name of this example. Then press
{bold} Load 
on this Cutline menu. Once the cross-section file is loaded, select
{bold} run 
in DeckBuild to execute the example


{subsection} latchex03.in : CMOS Latch-Up By Negative Voltage on Vss

Requires: MaskViews/SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates a latch-up caused by a DC ramp in an npnp
structure typical of CMOS processes . The stages of this examples are:

{bullet} Definition of a CMOS layout to include a parasitic npnp structure
{newline}
{bullet} Interface of the layout information to Athena
{newline}
{bullet} Process simulation of the npnp structure
{newline}
{bullet} Interface of the structure to Atlas with automatic electrode specification
{newline}
{bullet} Negative ramp of Vss to cause latch-up using curve tracing algorithm.

The parasitic npnp device used is identical to the device in the
previous example. The use of MASKVIEWS and Athena to create this
structure is given in the description of that example. The initial part
of the Atlas run is also identical.

This file differs only in the manner of triggering the latch-up. A DC
ramp of the n+ contact in the p-well (named Vss) is used as the
trigger. Once the voltage on Vss becomes less than the 0.0V on the pwell, the
n+/p-well junction is forward biased and latch-up may be triggered.  

To
allow the complete holding voltage and current to be extracted simply,
the curve tracing algorithm in Atlas is used. The key command
is the 
{bold} curvetrace 
statement coupled with 'solve curvetrace'. The parameters on the trace
statement are used to set initial conditions and limits on the curve
tracing. In particular the 
{bold} step.init 
parameter is given as a negative voltage step. This is all that is
required to select the polarity of the voltage sweep. A detailed
description of the use of this technique in tracing IV curves with
turning points can be found in the description of the MOS snapback
example.


The latch-up characteristic can be seen in the stored log file. It is
important to plot the current versus
{bold} vss int. bias 
rather then 'vss bias', since the former is the voltage actually
applied to the semiconductor and the latter includes the effect of the
load line used during the curve trace.



To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. You
{bold} cannot 
run this file until the cross-section file is loaded. To do this go to
the DeckBuild menu
{bold} Tools->MaskViews->Cutlines 
Then select the name of the cross-section file from the list. The name
will be <file>.sec where <file> is the name of this example. Then press
{bold} Load 
on this Cutline menu. Once the cross-section file is loaded, select
{bold} run 
in DeckBuild to execute the example.



{subsection} latchex04.in : Transient 3D CMOS Latch-Up 

Requires: DevEdit 3D/Device 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates transient latch-up in a three-dimensional
npnp structure typical of CMOS processes. The stages of this examples
are:

{bullet} Definition of npnp structure in DEVEDIT3D
{newline}
{bullet} Setting of a transient negative voltage pulse on the Vss contact to trigger latch-up

The npnp  structure defined by DEVEDIT3D is a three dimensional one. The
n+ and p+ contacts do not fall in one 2D plane as in the previous
examples. They are arranged in a rectangle. The DEVICE3D module of
Atlas is required to simulate latch-up in this structure.

The structure is created using DEVEDIT3D either graphically or using the
command menus in DeckBuild. The most common technique is to form the
structure graphically, then save an input file containing all the
commands required to reproduce this structure. This input file can be
loaded into DeckBuild, and Atlas runs can be appended to it to create a file
similar to this one.

In Atlas, no special syntax is required to enter the DEVICE3D module as
opposed to 2D SPISCES. On reading a mesh file, Atlas will automatically
detect if it is two or three dimensional. The syntax for specifying
bipolar models and setting up the initial bias state are identical to
the two-dimensional cases described in the previous examples.

The command
{bold} method halfimpl 
chooses the half-implicit scheme for transient simulation. This scheme
significantly reduces the simulation time for many 3D transient
problems. In difficult cases more robust but slower methods might be
required. The transient pulse applied to the n+ contact in the pwell is
similar to the first example in this section. 

Results from the log file show latch-up occurs as the device does not
return to its initial state after the pulse is over. The current is
still increasing at the end of the simulation which will eventually
cause device failure. It is possible to repeat this experiment varying
the the parameter 
{bold} t.final 
in the statement:
{newline}
solve v4=-2.0 tfinal=4.5e-9 tstep=10.e-12
{newline}
If the voltage is held at -2.0V for shorter times latch-up may not occur.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.








{section} ESD : ESD Application Examples 



{subsection} esdex01.in : Human Body Model in a Diode 

Requires: S-Pisces/Giga/MixedMode
{newline}
Minimum Versions: Atlas 5.24.1.R

This simple example demonstrates transient Human Body Model (HBM) ESD
simulation in a simple 1D diode. It shows:

{bullet} Structure formation using Atlas syntax 
{newline}
{bullet} Material parameters and model set up for non-isothermal simulation
{newline}
{bullet} Transient solution generated by a discharge of a 100pF capacitor
through a 1500 Ohm resistor connected to the diode

The input file consists of three separate runs each starting with the statement 
{bold} go atlas
. The first one uses the Atlas syntax to construct a 1D diode structure.
The mesh, regions and electrodes are specified as coordinates in the
syntax. It is compulsory to use electrode names (and not just numbers)
when the structure is used in MixedMode. The doping distribution for
the device is constructed from  gaussian and uniform analytical functions.
The final structure is saved for later use.

The second run calculates the initial operating point of the circuit.
The syntax for this run is split into two parts. The first part is a
SPICE-like circuit description and control cards. This part is bounded by 
{bold} .begin 
and
{bold} .end
. The second is device parameter syntax. The circuit netlist is written 
using standard SPICE syntax.

The device parameter syntax is given after the .end statement. This
sets the models, material and contact parameters for the Atlas device.

The final run uses the 
{bold} .tran 
statement. Note that a time dependent resistor is used which changes value
from 1.e6 Ohm to 1500 Ohm during 1ps.

The currents and voltages for each node, and the maximum lattice temperature
in the device versus time, are stored in the file specified in the
{bold} .log 
statement.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} esdex02.in : Charge Device Model in a Diode

Requires: S-Pisces/Giga/MixedMode
{newline}
Minimum Versions: Atlas 5.24.1.R

This simple example demonstrates transient Charge Device Model (CDM) ESD
simulation in a simple 1D diode. It shows:

{bullet} Structure formation using Atlas syntax 
{newline}
{bullet} Material parameters and model set up for non-isothermal simulation
{newline}
{bullet} Transient solution generated by a discharge of a 10pF capacitor
through a 5nH inductor and 1 Ohm resistor connected to the diode

The input file consists of three separate runs each starting with the statement 
{bold} go atlas
. The first one uses the Atlas syntax to construct a 1D diode structure.
The mesh, regions and electrodes are specified as coordinates in the
syntax. It is compulsory to use electrode names (and not just numbers)
when the structure is used in MixedMode. The doping distribution for
the device is constructed from  gaussian and uniform analytical functions.
The final structure is saved for later use.

The second run calculates the initial operating point of the circuit.
The syntax for this run is split into two parts. The first part is a
SPICE-like circuit description and control cards. This part is bounded by 
{bold} .begin 
and
{bold} .end
. The second part is device parameter syntax. The circuit netlist is written 
using standard SPICE syntax.

The device parameter syntax is given after the .end statement. This
sets the models, material and contact parameters for the Atlas device.

The final run uses the 
{bold} .tran 
statement. Note that a time dependent resistor is used which changes value
from 1.e6 Ohm to 1500 Ohm during 1ps.

The currents and voltages for each node, and the maximum lattice temperature
in the device versus time, are stored in the file specified in the
{bold} .log 
statement.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} esdex03.in : Human Body Model in a MOSFET


Requires: SSuprem 4/S-Pisces/Giga
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

In this example, transient simulation of Electrostatic Discharge (ESD)
on an NMOS transistor using the Human Body Model (HBM) is performed.
During the ESD event significant local heating is produced. The
solution of local lattice temperature is included. This example shows:

{bullet} Formation of a MOS structure in Athena
{newline}
{bullet} Interface to Atlas
{newline}
{bullet} Selection of lattice heat flow models 
{newline}
{bullet} Use of current boundary conditions and non-linear transient pulse to simulate a HBM ESD event.
{newline}
{bullet} Analysis of both the temperature distribution in the device and non-isothermal IV curve.

The MOS structure is constructed using Athena process simulation. This
structure is passed to Atlas for a HBM test simulation.  The NMOS
transistor is a 0.8um LDD device using oxide spacers. For a more
complete description of the MOS process simulation see the MOS examples.

The Atlas syntax shows a simple and effective test procedure for
HBM ESD simulation that may be used with any initial NMOS structure.

The Atlas simulation begins with definition of the models and material
parameters of the device. The 
{bold} contact 
statement is used to define the
workfunction of the polysilicon electrode. The 
{bold} material  
statement is
used to define the capture times (electron and hole lifetimes) in
the semiconductor.

The physical models used in this simulation reflect the different
physical effects important to ESD device simulation.  The mobility
model 'analytic' accounts for concentration and the temperature
dependencies.

The mobility model 'fldmob' accounts for the electric field dependency. In addition to
the Shockley-Read-Hall recombination model (SRH), the recombination
model 'auger' is included to take into account the high injection level
effects. Band gap narrowing is taken into account by means of the bgn
parameter.  The continuity equations for both carriers are selected
by default. The impact
ionization model is enabled using the 
{bold} impact selb 
statement.

A nonisothermal approach is used, which means that the heat flow equation
is solved in addition to the semiconductor equations and all physical
parameters become temperature dependent.  The syntax
{bold} models lat.temp 
enables the solution of the heat flow equation.

The definition of the thermal boundary conditions is very important 
in all non-isothermal simulations.  Thermal boundary conditions are
defined in the 
{bold} thermcontact 
statement.  A value of the thermal
conductance determined from the heat conductivity of the substrate is
specified at the thermocontact located along the substrate. Thermal 
isolation is assumed where no thermal contacts are specified. Here thermal
isolation conditions are assumed on all other surfaces besides the
bottom.

To simulate the device interaction with the simplified HBM test circuit
the current pulse is applied to the drain of the MOS structure in the
reverse direction.  The current pulse risetime is 10ns and the
exponential decay time is 150ns, which corresponds to the discharge of
the 100pF capacitor through the 1500 Ohm resistor into the test device.
These values are the definition of the Human Body Model.

The transient current/voltage characteristics are saved in the LOG
file.  Using TonyPlot it is possible to observe the maximum
temperature in the device versus time. The temperature increases with
time and peaks significantly after the peak current. The value of the
maximum temperature can be extracted and used as a figure of merit for
comparing the ESD protection capability of various device designs.

The 
{bold} probe 
statement is used to define quantities to be measured at each bias step. 
The values from these quantities are saved in the log file and can be 
plotted versus time and bias. The first probe statement saves the
{italic} lattice temperature at the drain contact
and the second
{italic} electric field across the gate oxide.
The former can be used to determine the likelihood of metal melting and the 
latter to determine likelihood of gate dielectric breakdown.

The solution at a time of 10ns and at the final stage are saved. All
internal distributions can be observed using TonyPlot. Most
interesting is that the temperature distribution in the MOSFET shows the
location and value of the hot spot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} esdex04.in : HBM in a MOSFET with Energy Balance Models

Requires: SSuprem 4/S-Pisces/Giga
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R


In this example, transient simulation of Electrostatic Discharge (ESD)
on an NMOS transistor using the Human Body Model (HBM) is performed.
During the ESD event significant local heating is produced. The
solution of local lattice temperature is included. Since this is a
short channel MOSFET significant non-local effects are present. The
energy balance (EB) models are also used.
 This example shows:

{bullet} Formation of a MOS structure in Athena
{newline}
{bullet} Interface to Atlas
{newline}
{bullet} Selection of lattice heat flow models 
{newline}
{bullet} Selection of energy balance models 
{newline}
{bullet} Use of current boundary conditions and non-linear transient pulse to simulate a HBM ESD event.
{newline}
{bullet} Analysis of both the temperature distribution in the device and non-isothermal IV curve.

In most respects, except for the use of energy balance models, this example
is the same as the previous example. The device structure and grid are
slightly different. The parameter
{bold} init spac.mult=2 
is used in Athena to reduce the CPU time. For more accurate simulation
spac.mult=1 would be required.

To select the energy balance models for electrons the parameter
{bold} hcte.el 
is used. In many cases it is necessary to optimise the numerical
methods used in combined lattice heating and energy balance
simulations. 
{bold} newton 
is used here. However 
{bold} block newton 
is a more robust alternative for difficult cases.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} esdex05.in : Second Breakdown of a MOSFET

Requires: SSuprem 4/S-Pisces/Giga
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

In this example, the steady state second breakdown simulation of an NMOS
transistor is performed.  Second breakdown analysis is an important
figure of merit in the understanding of the resistance of devices to
high current (voltage) stress caused by the ESD events. This example shows:


{bullet} Formation of a MOS structure in Athena
{newline}
{bullet} Interface to Atlas
{newline}
{bullet} Selection of lattice heat flow models 
{newline}
{bullet} Analysis of a non-isothermal IV curve 


The MOS structure is constructed using Athena process simulation. This
structure is passed to Atlas for HBM test simulation.  The NMOS
transistor is a 0.8um LDD device using oxide spacers. For a more
complete description of the MOS process simulation, see the MOS examples.

The Atlas syntax shows a simple and effective procedure for the
tracing of the complicated S-shape I-V characteristics
that could be used with any initial NMOS structure.

The Atlas simulation begins with the definition of the models and material
parameters of the device. The 
{bold} contact 
statement is used to define the
workfunction of the polysilicon electrode. The 
{bold} material 
statement is
used to define the electron and hole lifetimes in
semiconductor.

The physical models used in this simulation reflect the different
physical effects important to electrothermal device simulation.  The
mobility model CVT includes the concentration, electric field and
temperature dependencies, as well as a surface mobility degradation
effects.  In addition to the Shockley-Read-Hall recombination model
(SRH), the recombination model AUGER is included to take into account
the high injection level effects. Band gap narrowing is taken into
account by means of the BGN parameter.  The continuity equations for
both carriers are selected by default or by using parameter carriers=2
in the METHOD statement.  Impact ionization is necessary for any
breakdown simulation and it is also included here.

A nonisothermal approach is used, which means that the heat flow equation
is solved in addition to the semiconductor equations and all physical
parameters become temperature dependent.  The syntax
{bold} models lat.temp 
enables the solution of the heat flow equation.

In all nonisothermal simulations, the definition of the thermal
boundary conditions is very important.  Thermal boundary conditions are
defined in the 
{bold} thermcontact 
statement.  A value of the thermal
conductance determined from the heat conductivity of the substrate is
specified at the thermocontact located along the substrate. Thermal 
isolation is assumed where no thermal contacts are specified. Here, thermal
isolation conditions are assumed on the all other surfaces besides the
bottom.

To simulate the device second breakdown the curve tracing algorithm was
used. For more details of this algorithm and its syntax see the
snapback example in the Advanced MOS section.

The steady state current/voltage characteristics are saved in a LOG
file.  Using TonyPlot it is possible to observe the maximum
temperature in the device versus current/voltage.
The sharp decrease of the voltage on the nonisothermal I-V curve
shows the onset of second breakdown.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.





{section} POWER : Power Device Application Examples




{subsection} powerex01.in : Reverse Recovery of a Power Diode 

Requires: S-Pisces/MixedMode
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the reverse recovery of a silicon power diode.  It shows:

{bullet} Structure definition using Atlas 
{newline}
{bullet} The SPICE-like command syntax for simulating MixedMode circuits
{newline} 
{bullet} Steady state and transient analysis of a power diode

The structure consists of a rectangular silicon power diode.  Atlas is used to define the power 
diode structure including mesh, materials, electrodes, and doping.  The
{bold} mesh rect 
statement defines a rectangular mesh with grid lines at the locations specified by the 
{bold} x.m 
and 
{bold} y.m 
statements.  The entire mesh is defined as one silicon region using the 
{bold} region 
statement.  Electrodes are defined on top and bottom and the 
{bold} doping 
statement is used to define a uniform background concentration and gaussian n-type and p-type regions.
This structure is saved and will be used as a device by MixedMode.

In this simulation, the MixedMode circuit simulator uses Atlas to calculate the electrical characteristics of the 
power diode under the specified circuit conditions.  First, a steady-state simulation of the power diode circuit 
is performed.  

The 
{bold} .begin 
and 
{bold} .end 
statements indicate the beginning and end of the MixedMode syntax.  The MixedMode commands are similar to those 
used in SmartSpice.  Circuit components, topology, and analysis are defined within.
In general, the circuit component definition consists of three parts: the type of component, the lead or terminal 
node assignments, and the component value or model name.  For example, the  first component definition in this 
simulation is a dc voltage source.  
{bold} v1 
defines the component as voltage source number one, 
{bold} 1 
and 
{bold} 0 
are the two circuit nodes for this component, and 
{bold} 1000 
indicates that the voltage source value is 1000 volts.  The remaining circuit components are resistors 
{bold} r1 r2
, inductor 
{bold} l1 
and independent current source 
{bold} i1
. The 
{bold} adiode 
statement specifies a device to be analyzed by Atlas.  The 
{bold} a 
part of the adiode
command specifies that this is a device statement.  The 
{bold} diode 
portion simply defines the device name.  The option 
{bold} infile= 
indicates which device structure file is to be used.  The
{bold} .nodeset 
statement defines the initial values for node voltages and the 
{bold} .save outfile= 
statement saves the result to the indicated file.  Since this is the steady state solution, no output log data file 
is needed.  Additionally, the 
{bold} .options 
command sets the solution method to a modified two-level Newton using the 
{bold} m2ln 
parameter.  Other command line options exist.  Please refer to the MixedMode 
section of the Atlas user's manual for a complete list.

To completely specify the simulation, the physical models used by Atlas must be specified.  The 
{bold} model 
statement is used to turn on the appropriate transport models.  This set includes conmob: the concentration 
dependent mobility model, fldmob: the lateral electric field-dependent mobility model, consrh: Shockley-Read-Hall 
recombination using concentration dependent lifetimes, auger: recombination accounting for high level injection
effects, and bgn: band gap narrowing.  
Refer to the Atlas user's manual for a description of these models.  The 
{bold} material 
statement is used to override default material parameters.  In this case, the carrier recombination fixed 
lifetimes are set.  Finally, an impact ionization model is enabled using the 
{bold} impact 
statement with the
{bold} selb 
option.  This specifies that the Selberherr impact ionization model is to be used.

The next step is the transient analysis which is specified in a similar manner.  The reverse recovery of the diode 
is simulated by dropping the value of output resistor r2 over a small increment of time.  The 
{bold} r2 
statement contains additional syntax to perform this task.  Here, the resistor is 
treated as a source whose resistance decreases exponentially from 1 MOhm to 1 
mOhm over the specified time step.  This action essentially shorts out the 
parallel current source i1 which is also 
connected to the base of the diode.  The 
{bold} .trans 
statement is used to specify the time stepping parameters for the transient analysis.  In addition, the 
{bold} .log 
statement saves the diode output characteristics over the time interval specified.  TonyPlot plots the transient
reverse recovery of the power diode.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} powerex02.in : Vertical DMOS Turn-on Characteristics

Requires: SSuprem 4/S-Pisces/Giga
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates fabrication and electrical analysis of a
vertical DMOS structure.  It shows:

{bullet} DMOS process flow to generate the device structure using Athena
{newline}
{bullet} Model setup for non-isothermal device simulation using Giga
{newline}
{bullet} Atlas methodology for simulating the DMOS device gate characteristics

The structure generated by Athena is a silicon vertical DMOS device.  A phosphorus doped silicon substrate 
and underlying mesh are defined.  A lightly phosphorous doped silicon epitaxial layer is then grown using the  
{bold} epitaxy 
command.  The gate material is deposited, patterned and etched.  Boron is implanted and diffused to form the right 
edge of channel region under the gate.  The source region arsenic implant is performed and diffused to complete the 
channel definition.  Aluminum is deposited and etched to form the source contact.  The source, drain and gate electrodes 
are defined by using the 
{bold} electrode 
statement and by including the name and location of the contact on the command line.  Notice that the drain electrode 
location is defined by the 'electrode' command line option 
{bold} backside
.  Now that the structure has been completed, the Atlas device test can be performed.

In this simulation, the structure created by Athena will be automatically loaded into Atlas when the command 
{bold} go atlas 
is reached.  The 
{bold} contact 
statement sets the workfunction for the gate to that of degenerately doped n-type polysilicon.  Next, the 
{bold} models 
statement sets the physical transport and associated models to be used, in this case, conmob: concentration dependent 
mobility, fldmob: lateral electric field dependent mobility, srh: Shockly-Read-Hall recombination, and most importantly 
for power devices, lat.temp:  non-isothermal transport using Giga.  The thermal boundary condition for the source contact 
is defined by the 
{bold} thermcontact 
statement.  

The gate characteristics of this DMOS device are calculated by solving the transport and thermal equations at the 
bias specified in the 
{bold} solve 
statements.  Here, the drain bias is stepped to 20 volts.  Next, an output logfile is opened using the 
{bold} log 
command, and the gate contact is ramped from 0.25 volts to 20 volts in two stages.  It is advisable to use smaller bias 
steps initially.  Larger bias steps can then be used for the remaining bias range.
TonyPlot plots the gate characteristics from the log file.  To plot the structure and solution at the final bias point, 
highlight the name 'powerex02_2.str' on the 
{bold} save 
command line and click left 'Tools' at the top right of the DeckBuild window.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} powerex03.in : IGBT Transient Latch-up with Lattice Heating

Requires: S-Pisces/Giga
{newline}
Minimum Versions: Atlas 5.24.1.R

In this example the non-isothermal latchup of an IGBT device is simulated.  
The latchup is produced in the transient or switching mode. The currents
during latchup in this device are high and significant local heating occurs.  
Therefore, the solution of lattice temperature and heat flow must be included.  
This example shows:

{bullet} The definition of the IGBT structure using Atlas
{newline}
{bullet} How to enable Giga non-isothermal simulation
{newline}
{bullet} IGBT collector steady state solution at 300V
{newline}
{bullet} Transient gate voltage ramp to produce latchup

The Atlas simulation begins with the definition of the IGBT structure.  
A fine rectangular mesh is first defined.  Next, the materials are assigned to specific regions using the 
{bold} region 
command.  The electrodes and doping profiles are then defined.  Additionally, specific characteristics of these materials, their electrodes and the charge carriers within can be modified.  The 
{bold} material 
statement is
used to define the electron and hole recombination lifetimes in the semiconductor.  The 
{bold} contact 
statement defines the workfunction of the polysilicon electrode, in this case, that of degenerately doped n-type polysilicon.   This completes the IGBT structure definition.

For any Atlas device simulation, the physical transport models must be enabled using the 
{bold} model 
statement.  In this case, they reflect the different physical effects important to the IGBT device.  
They are analytic: analytic concentration dependent mobility, fldmob: lateral electric field dependent mobility, surfmob: surface mobility degradation, srh: 
Shockley-Read-Hall recombination, and auger:  recombination accounting for high level injection
effects.   

The steady-state characteristics of the IGBT are now solved.
As with most Atlas simulations, an initial solution is performed at zero bias using the statement 
{bold} solve init
. This gives the Atlas solvers a good starting point.  The subsequent 
{bold} solve 
statements ramp the IGBT collector up to 300V in several stages .  Each additional stage uses the previous 
solution as an initial guess.  Other initial guess strategies are available however.  
Consult the Atlas User's manual for more details.  If an electrode bias is not specified, it remains at its 
previous value, in this case, zero volts.  After the solution is obtained at 300V, the solution is saved.  It will
 be used as the initial solution in the transient mode latchup simulation which follows.

Three additional items are added for the IGBT transient mode simulation: thermal contacts, heat flow, and impact 
ionization.  Thermal boundary conditions are a very important part of any non-isothermal simulation and must be 
specified.  For the IGBT, a constant temperature along the collector contact is  specified in the 
{bold} thermcontact 
statement.  All other contacts and surfaces are assumed to be in thermal isolation.  The 
{bold} lat.temp 
lattice temperature model is added to the 
{bold} model 
statement to include heat flow.  This means that the heat
flow equation is solved in addition to the semiconductor equations and
all physical parameters become temperature dependent.  In addition to heat flow, impact ionization plays an 
important role in IGBT transient mode latchup.  The Selberherr impact ionization model is added using the 
{bold} impact 
statement with the 
{bold} selb 
option.  

An IGBT gate transient is now simulated.    The previous solution at the collector 
bias of 300V is loaded and used as an initial guess for the latchup simulation.  The
{bold} output 
statement is used to add additional solution quantities to the standard output variables.  
The gate voltage is ramped from 0  to 10 V in 100 nano seconds to cause the IGBT latchup.   
The gate will then be held at the 10 V level until the time reaches 1 micro second.  These conditions are set on the 
{bold} solve 
statement.  The output results are saved in the log file.  Using
TonyPlot, it is possible to observe the latchup by plotting the
collector current and maximum temperature in the device versus time.
The structure and solution at the final time point is saved 
and all output variables can be observed using TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} powerex04.in : IGBT Ic/Vce Characteristics

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R


The Ic / Vce characteristics of an Insulated Gate Bipolar
Transistor (IGBT) are simulated.  This example shows:

{bullet} Creating the IGBT structure using Atlas
{newline}
{bullet} Ic / Vce test definition
{newline}
{bullet} IGBT Ic versus Vce characteristics

The Atlas simulation begins with the definition of the IGBT structure.  
Atlas is used to define the IGBT structure including mesh, materials, electrodes, and doping.
A fine rectangular mesh is first defined.  Next the materials are assigned to specific regions using the 
{bold} region 
command.  The electrodes and doping profiles are then defined.  Additionally, specific characteristics of these materials, their electrodes and the charge carriers within can be modified.  The 
{bold} material 
statement is
used to define the electron and hole recombination lifetimes in the semiconductor.  The 
{bold} contact 
statement defines the workfunction of the polysilicon electrode, in this case, that of degenerately doped n-type polysilicon.   This completes the IGBT structure definition.

For any Atlas device simulation, the physical transport models must be enabled using the 
{bold} model 
statement.  In this case, they reflect the different physical effects important to the IGBT device.  
They are analytic: analytic concentration dependent mobility, fldmob: lateral electric field dependent mobility, surfmob: surface mobility degradation, srh: 
Shockley-Read-Hall recombination, and auger:  recombination accounting for high level injection
effects.   

IGBT output characteristics are simulated by sweeping the collector contact voltage for several discrete values 
of gate voltage.  In this example, the collector voltage will be swept from 0 to 20 V for gate voltages of 5 
and 10 V.  This is accomplished by first obtaining a solution at each gate bias of interest with all other 
electrodes set to 0V.  Next, each gate solution is used as the initial solution for a collector sweep.  
Output log files are saved for each gate-collector sweep combination.  TonyPlot displays the IGBT Ic / Vce 
family of curves by overlaying all output curves on one plot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} powerex05.in : Guard Ring Breakdown Analysis

Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R


This example demonstrates the fabrication and electrical 
analysis of a protection structure using guard rings.  It shows:

{bullet} Protection device with guard rings process simulation using Athena
{newline}
{bullet} Proper guard ring contact definition for breakdown analysis using Atlas
{newline} 
{bullet} Transport model definition including impact ionization
{newline}
{bullet} Breakdown test definition

The breakdown structure considered here consists of a series of four guard rings sandwiched between cathode and 
anode electrodes.  The Athena simulation begins by defining a phosphorous doped silicon substrate and its 
associated mesh.  Silicon dioxide is then deposited and etched to expose silicon for guard ring and anode 
implantation.  Boron is implanted and diffused to define the guard ring and anode junction depth.  Boron 
doped polysilicon is then deposited and etched to form the guard ring plate electrodes.  Aluminum is deposited 
and etched to create the anode and cathode electrodes.  These electrodes are specified using the 
{bold} electrode 
statement.  This includes the name and position.  Notice that a substrate electrode is added by specifying the 
{bold} backside 
option.  The completed structure is saved and plotted using TonyPlot.

The Atlas breakdown simulation is now described.  In this simulation, the structure created by Athena will be 
automatically 
loaded into Atlas when the command 
{bold} go atlas 
is reached.  For this breakdown simulation including guard rings, the guard ring contact must be allowed to float.  The 
{bold} contact 
statement specifies that a 1E20 ohm series resistor be added to each contact.  This allows each guard ring 
contact to float and ensures that there is no appreciable current flow.  The 
{bold} bipolar 
option to the 
{bold} models 
statement selects a default set of transport models for bipolar devices.  The default bipolar models are 
conmob: concentration dependent mobility, fldmob: lateral electric field dependent mobility, bgn: band gap 
narrowing effects, consrh: concentration dependent Shockley-Read-Hall recombination lifetimes, and 
auger: recombination accounting for high level injection effects.  Since breakdown in semiconductor devices can 
occur in the presence of impact ionization, this model should be enabled.  In this case, the 
{bold} impact selb 
statement enables the Selberherr impact ionization model.  Please refer to the Atlas user's manual for a 
detailed description of these and other models.

When simulating devices with external components like the guard ring  plate resistors, the 
{bold} newton 
solution method is required.  When using large bias steps, or when operating a device near breakdown,  it is 
advised to specify the 
{bold} trap 
option to the 
{bold} method 
statement.  With this option enabled, Atlas automatically reduces the applied bias when convergence is not 
achieved.  The simulation then continues at this new bias point.  If convergence is achieved, Atlas tries the 
original bias point again.  If not, the applied bias is reduced again.  This will  continue until convergence 
is achieved or until a maximum number of reductions takes place.  Once convergence occurs, Atlas will 
automatically work its way back to the original bias point where the initial reduction occurred.  

The Atlas 
{bold} solve 
statement is now used to construct the breakdown test.  As in most cases, an initial zero bias solution is 
performed by selecting the 
{bold} init 
option of the 
{bold} solve 
statement.  This gives Atlas an initial guess for subsequent simulations.  An output log file is opened and will 
contain terminal characteristics for each bias point selected for test or until another output log file is opened.  
For this breakdown test, the anode voltage is stepped from -1V to -900V in three stages: -1V to -5V, 
-5V to -25V, and -25V to -900V.  This arrangement is designed to provide good convergence while minimizing total 
simulation time.  

The solution at the final bias point is saved as a structure file and TonyPlot is invoked to plot the results.  
Anode, cathode and substrate currents can be plotted to identify the voltage where breakdown occurs.  Various 
contour quantities such as electric field, potential, and impact generation rate can be displayed from the 
structure plot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} powerex06.in : GTO Turn-off Transient


Requires: S-Pisces/MixedMode
{newline}
Minimum Versions: Atlas 5.24.1.R


This example illustrates the simulation of a Gate Turn-Off Thyristor
(GTO).  The device is embedded in a realistic power device circuit. The interaction between the circuit elements 
and the active device is important in accurately simulating GTO behavior.  The steady state behavior is simulated 
first.  This is used as the initial condition for the transient analysis.  This example shows:  

{bullet} GTO structure definition with Atlas
{newline}
{bullet} The SPICE-like command syntax for MixedMode circuit simulation
{newline}
{bullet} GTO steady state solution
{newline}
{bullet} GTO transient turn-off process

Atlas is used to define the GTO structure including mesh, materials, electrodes, and doping.  
The
{bold} mesh rect 
statement defines a rectangular mesh with grid lines at the locations specified by the 
{bold} x.m 
and 
{bold} y.m 
statements.  Using the 
{bold} region 
statement, the mesh is divided into three regions:  two silicon and one insulator.  The 
{bold} electrode 
statement defines the cathode, anode and gate electrodes.  The 
{bold} doping 
statements define the doping profiles.  Note the definition of implant type, junction position and characteristic 
length.  The net profile is n+ p n p+ from the cathode on top to anode on the bottom.  The gate is contacted to 
the p region.  This structure is saved and will be used as a device by MixedMode.

In this simulation, the MixedMode circuit simulator uses Atlas to calculate the transient  characteristics of a 
GTO under the specified circuit conditions.  First, a steady-state simulation of the GTO circuit is performed.  
The 
{bold} .begin 
and 
{bold} .end 
statements indicate the beginning and end of the MixedMode syntax.  The MixedMode commands are similar to those 
used in SmartSpice.   Circuit components, topology, and analysis are defined here.
In general, the circuit component definition consists of three parts: the type of component, the lead or terminal 
node assignments, and the component value or model name.  For example, the first component definition in this 
simulation is a dc current source.  
{bold} i1 
defines the component as current source number one, 
{bold} 0 
and 
{bold} 1 
are the two circuit nodes for this component and 
{bold} 400 
indicates that the current source value is 400 amps.  

This circuit can be divided in two parts: input, and output.  
The input circuit connects to the cathode and anode of the GTO.  It includes current source 
{bold} i1
, voltage source 
{bold} v1
, resistors 
{bold} r1 r2 r3
, diodes 
{bold} d1 d2 d3
, inductors 
{bold} l1 l2 l3
, and capacitor 
{bold} c1.  
The output or switching circuit connects to the GTO gate and anode and includes voltage sources 
{bold} v1 v2 v3
, diode 
{bold} d4
, resistors 
{bold} r2 r4
, and inductor 
{bold} l4
. The GTO component itself is specified by the 
{bold} agto 
statement.  This statement specifies a device to be analyzed by Atlas.  The 
{bold} a 
part of the 
{bold} agto 
command specifies that this is a device statement.  The 
{bold} gto 
portion simply defines the device name.  The option 
{bold} infile= 
indicates which device structure file is to be used.  Other command line options exist.  Please refer to the 
MixedMode section of the Atlas user's manual for a complete list.  

The
{bold} .nodeset 
statement defines the initial values for node voltages and the 
{bold} .save outfile= 
statement saves the result to the indicated file.  Since this is the steady state solution, no output log data 
file is needed.  Since standard diode parts are used in this circuit, the 
{bold} .model dd 
statement is used to specify additional characteristics.  Note that 
{bold} dd 
was the model name given in the diode component definition statement.  Additionally, the 
{bold} .options 
command sets the solution method to a modified two-level Newton using the 
{bold} m2ln 
parameter.  

To completely specify the simulation, the physical models used by Atlas must be specified.  The 
{bold} model 
statement is used to turn on the appropriate transport models.  This set includes analytic: the analytic 
concentration dependent mobility model, fldmob: the lateral electric field-dependent mobility model, consrh: 
Shockley-Read-Hall recombination using concentration dependent lifetimes, auger: recombination accounting for high level injection 
effects, and bgn: 
band gap narrowing.  The 
{bold} material 
statement is used to override default material parameters.  In this case, the carrier recombination fixed 
lifetimes are set and for region three, the permittivity is set to that of air (1).  Finally, an impact ionization 
model is enabled using the 
{bold} impact 
statement with the
{bold} selb 
option.  This specifies that the Selberherr impact ionization model is to be used.  Note that for each of these 
commands, the device name and region can be specified.  

The final part of this example is the transient simulation of the gate turn-off. The description of the circuit 
is similar to the steady state part. The gate turn-off is simulated by pulsing the GTO gate output 
resistance r4 
from 1 mega-ohm to 1 micro-ohm over 100 ns.  This is defined by the additional command line options on the 
{bold} r4 
command line.  The result of the essentially shorted resistor r4 is that a 
negative pulse is applied to the gate which initiates the GTO
turn-off process. The 
{bold} .tran 
statement controls the overall transient simulation time.

Terminal characteristics of the GTO, circuit node voltages and circuit
element currents are are saved in the 
{bold} .log 
 file and can be observed with TonyPlot.  The turnoff speed is seen by plotting the GTO anode and
gate current.  

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} powerex07.in : LDMOS Breakdown

Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example simulates the fabrication process and breakdown analysis of a Lateral DMOS
device (LDMOS). The example shows:

{bullet} Process simulation of the LDMOS structure using Athena
{newline}
{bullet} Measurement of layer thickness, 1D Vt and BVdss using EXTRACT
{newline}  
{bullet} Auto interface from Athena to Atlas
{newline}
{bullet} Atlas simulation of the breakdown voltage BVdss


The device simulated is an asymmetric LDMOS power device
structure with a 4 micron gate length.  Athena simulation starts by defining an 
asymmetric grid with finer grid in the drift region. In preparation for the gate oxide growth, a sacrificial 
oxide layer is grown and etched away.  A gate oxide 
of 570 Angstroms is then grown.  To ensure adequate grid spacing in the growing oxide, the 
{bold} method grid.ox 
statement sets the grid to 100 Angstroms.  After the oxide growth, the 
{bold} extract 
statement is used to measure the gate oxide thickness.  The results of the EXTRACT can be found in the DeckBuild 
output window and in the file 'results.final'.  Check for this file in the directory in which  DeckBuild was 
started.  The next step is a low-energy and low-dose boron Vt-adjust
implant.   Poly deposition, poly-gate definition and drift
region implant are then performed. The drift region is masked and n+
phosphorus is implanted into the opened source and drain areas.

After the final anneal at 1000 degrees the contact holes are opened,
metal is deposited and patterned. The four electrodes are then 
specified. 

A useful parameter to measure at this stage is the threshold voltage of a 1D 
slice through the center of the gate. This is performed via the 
{bold} extract 
statement. Since the channel length is fairly long and the channel
doping is uniform laterally, this is a fairly good approximation to the 2D 
threshold voltage that Atlas would give.  This ends the LDMOS process simulation.  
The resultant structure file is saved and plotted.  

The structure created by Athena will be automatically loaded into Atlas when the command 
{bold} go atlas 
is reached.  The Atlas portion of this example begins by specifying the physical models to be used.  For this 
example, they 
are cvt:  for transverse field dependent mobility, and srh: Shockley-Read-Hall recombination.  
{bold} carriers=2 
indicates that both holes and electrons will be simulated.  The Selberherr impact ionization model is enabled 
using the 
{bold} impact selb 
statement.  The 
{bold} contact 
statement sets the gate workfunction to that of degenerately doped n-type polysilicon.
Additionally, the 
{bold} interface 
statement sets the silicon-silicon dioxide interface charge to 3E10.  

The 
{bold} method 
statement has many purposes.  First, it sets the type of solution methodology, as in this case with the 
{bold} newton 
option.  The 
{bold} trap 
option enables the reduction in applied bias when convergence is not achieved.  This is an 
important feature for large bias steps and simulations near breakdown.  The option  
{bold} climit=1e-4 
improves convergence for breakdown simulation when the pre-breakdown
current is very low. It is recommended for most power device breakdown calculations.  Many other options are 
available.  Please consult the Atlas user's manual for additional information.

The sequence of 
{bold} solve 
statements ramp the drain voltage from zero to 100V.  For this
particular device, the breakdown voltage is about 50V.  At biases
higher than this, the simulation will fail to converge.  With the
{bold} trap 
option enabled, Atlas will automatically reduce the applied bias until
the convergence criteria is met or until the maximum number of
reductions is reached.
The final 
{bold} extract 
statement reads the maximum drain voltage solved from the output log file.
A plot of the Id versus Vds curve in TonyPlot clearly shows the breakdown characteristics. A more
sophisticated technique using the curve tracing algorithm in Atlas is
also possible. This technique is demonstrated in the Advanced MOS
examples section for simulating snapback. Another technique using
compliance limits is described in the MOS examples section under the
NMOS breakdown.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} powerex08.in : LDMOS Breakdown using Ionization Integrals

Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This examples demonstrates a technique used to quickly estimate the
breakdown voltage of any device. It uses the same LDMOS power device
process simulation and structure as in the previous example.

Rather than perform a full breakdown analysis by solving for impact
ionization using a two carrier approach, this example uses ionization
integrals. Ionization integrals are based solely on the electric field
strength so zero carrier solutions can be done. The zero carrier option
is specified using
{bold} carriers=0
. Although impact ionization is not solved directly, the impact model
is used in the postprocessing analysis. For this it is necessary to
specify 
{bold} impact selb
. 

The ionization integrals are calculated along electric field lines. 
Electric field lines are specified during the solution by parameters on the 
{bold} solve
statement. The parameter 
{bold} deltav 
specifies an offset between the applied voltage and the voltage at
which the electric field lines will start. The lines should not start
exactly at a contact since the electric field is often zero at the contact.
The 
{bold} lratio 
parameter specifies the ratio of spacing between adjacent field lines. A
value less than unity means the lines occur more the left, greater than
unity they occur more to the right. In this example the drain is on the
right of the structure. So the lines should be more towards the high
field area on the left side of the drain. Hence lratio is less than
one.
The locations of the electric field lines can be saved into the solution files.
However the 
{bold} output 
statement must be used to specify the electric field line parameters as
in the solve statement. The final plot shows the electric field and the
electric field lines at the breakdown point.

The solve sequence in this example uses assigned variables from the 
{bold} extract 
statement to closely define the breakdown. The first solve statement ramps the 
drain voltage in 5V steps until the ionization integrals exceed one. This means
the breakdown is between this voltage and 5V less than this voltage. The extract
sequence steps the voltage back 5V. The 1V steps are taken until the breakdown
condition is reached and the analysis is repeated. After this, 0.1V steps are used 
to give a breakdown number to within 0.1V. 

Users should note that using this method to extract the breakdown
voltage is only approximate. The algorithm does not consider any
current and hence usually overestimates the actual breakdown voltage.
The advantage over the method in the previous example is speed.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} powerex09.in : Anisotropic Mobility Characteristics of a SiC T-MOSFET

Requires: DevEdit/Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the simulation of the forward characteristics of a trench gated MOS power transistor. 
Three simulations are performed to show the effect of the crystallographic plane mobility modeling on the device characteristics.

This device is created entirely within DevEdit and is composed of SiC, silicon dioxide, aluminum and polysilicon within a simulation domain of 6um x 16um. 
The MOSFET has been created with a gate oxide of 800A and an N-type polysilicon gate. 

The device simulations consist of the ID-VD characteristics at a gate voltage of 20V. Three characteristics were then obtained for different mobility models.

First, the standard 
{bold} isotropic mobility model 
was used where the SiC mobility coefficients were defined for the 
{bold} <1100> plane 
which is the 
{bold} high 
mobility plane.

Secondly, the standard 
{bold} isotropic mobility model 
was used where the SiC mobility coefficients were defined for the 
{bold} <1000> plane 
which is the 
{bold} low 
mobility plane.

Thirdly, an 
{bold} anisotropic mobility model 
was used where the SiC mobility coefficients were defined for 
{bold} both the <1100> and <1000> planes
.

The anisotropic model is applied by specifying a default set of mobility coefficients which apply everywhere. Then on the second 
{bold} mobility
 statement the 
{bold} n.angle
 parameter specifies the mobility at 90 degrees to the horizontal. This switches on the anisotropic mobility model.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} powerex10.in : Anisotropic Mobility Characteristics of a SiC DMOS Device

Requires: DevEdit/Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the simulation of the forward characteristics of a doubly diffused, or implanted, MOS power transistor. 

Three simulations are performed to show the effect of the
 crystallographic plane mobility modeling on the device characteristics.

This device is created entirely within DevEdit and is composed of SiC, silicon dioxide and aluminum within a simulation domain of 7.5um x 15um. 
The MOSFET has been created with a gate oxide of 800A and an aluminum gate. 

The device simulations consist of the ID-VD characteristics at a gate voltage of 20V. 
Three characteristics were then obtained for different mobility models.

First, the standard 
{bold} isotropic mobility model 
was used where the SiC mobility coefficients were defined for the 
{bold} <1100> plane 
which is the 
{bold} high 
mobility plane.

Secondly, the standard 
{bold} isotropic mobility model 
was used where the SiC mobility coefficients were defined for the 
{bold} <1000> plane 
which is the 
{bold} low 
mobility plane.

Thirdly, an 
{bold} anisotropic mobility model 
was used where the SiC mobility coefficients were defined for 
{bold} both the <1100> and <1000> planes
.

The anisotropic model is applied by specifying a default set of mobility coefficients which apply everywhere. Then on the second 
{bold} mobility
 statement the 
{bold} n.angle
 parameter specifies the mobility at 90 degrees to the horizontal. This switches on the anisotropic mobility model.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} powerex11.in : Vertical DMOS Gate Charging Simulation

Requires: SSuprem 4/DevEdit/MixedMode
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

In modern power devices the total power loss comprises both a conductance power loss 
component and a capacitive loss component. As the cell pitch decreases, the conduction 
loss will decrease while the capacitive loss will increase. Therefore for small cell 
pitch the capacitive power loss may be the dominant component in the total power loss 
in the device. The need is now clear for a method that will allow analysis of the 
capacitive component of the power loss. One technique for doing this in a DMOS device is 
to analyse the gate charging time. This example illustrates a technique whereby the 
gate charging time for a vertical DMOS structure may be simulated.

The example contains the following parts:

{bullet} Process simulation to create the vertical DMOS
{newline}
{bullet} The SPICE-like command syntax for simulating MixedMode circuits
{newline} 
{bullet} Steady state analysis that defines the DC operating point
{newline} 
{bullet} Time domain analysis that illustrates gate charging

The first section uses Athena/SSuprem 4 to build a vertical DMOS power device. This section is identical to that used in the example powerex02.in which 
is described earlier in this power device section. For information on the process description please refer to this prior example.

After the process simulation, the structure is remeshed with DevEdit
using the command
{bold} go devedit
.

At this point the solution only contains quantities from the
process simulator, so only impurity values are available as 
remeshing criteria. These are selected with the commands:

{bold} imp.refine imp="Net Doping" scale=log transition=1e+10 sensitivity=2
{bold} imp.refine  min.spacing=0.2

In addition to the doping profile, DevEdit is used to obtain a denser mesh within the channel region underneath the gate. This is performed in two stages with the commands:

{bold} constr.mesh id=1 x1=2.5 y1=0 x2=1e+06 y2=0.5 default max.height=0.1 max.width=2

{bold} constr.mesh id=2 x1=2 y1=0 x2=4.5 y2=0.5 default max.height=0.1 max.width=0.2

The mesh is then created using the DevEdit command

{bold} Mesh Mode=MeshBuild

Once the mesh has been designed for the electrical analysis it is passed on to the device simulator. This analysis is conducted using the mixed device and circuit simulator Atlas/MixedMode.
 First, a steady-state simulation of the power circuit 
is performed.  

The 
{bold} .begin 
and 
{bold} .end 
statements indicate the beginning and end of the MixedMode syntax.  The MixedMode commands are similar to those 
used in SmartSpice.  Circuit components, topology, and analysis are defined within these statements.
In general, the circuit component definition consists of three parts: the type of component, the lead or terminal 
node assignments, and the component value or model name.

For example, the  first component definition in this 
simulation is an independent current source defined by
{bold} iin 
between the circuit nodes
{bold} 0 
and 
{bold} 1
.  The final value of 
{bold} 0 
indicates that the initial current source value is 0 Amps.  The remaining circuit components are a resistor
{bold} r1
, another independent current source 
{bold} iout 
a compact diode model
{bold} dum 
and a voltage source 
{bold} vin
.

The 
{bold} amos 
statement specifies a device to be analyzed by Atlas. 
 The 
{bold} a 
part of the amos 
command specifies that this is a device statement.  The 
{bold} mos 
portion simply defines the device name.  The option 
{bold} infile= 
indicates which device structure file is to be used.  The
{bold} .nodeset 
statement defines the initial values for node voltages. The 
{bold} .dc 
statement indicates that a dc ramp is applied to the device
{bold} iout
. Additionally, the 
{bold} .options 
command specifies that a full Newton method is applied using the 
{bold} fulln 
parameter. Once the current ramp is complete, the  
{bold} .save outfile= 
statement saves the final solution to the indicated file.

Other command line options exist.  Please refer to the MixedMode 
section of the Atlas user's manual for a complete list.

To completely specify the simulation, the physical models used by Atlas must be specified.  The 
{bold} model 
statement is used to turn on the appropriate transport models.  This set includes conmob: the concentration 
dependent mobility model, fldmob: the lateral electric field-dependent mobility model, surfmob: the surface degradation component of mobility, srh: Shockley-Read-Hall 
recombination, auger: recombination accounting for high level injection
effects, and bgn: band gap narrowing.  
Refer to the Atlas user's manual for a description of these models.  Finally, an impact ionization model is enabled using the 
{bold} impact 
statement with the
{bold} selb 
option.  This specifies that the Selberherr impact ionization model is to be used.

The next step is the transient analysis which is specified in a similar manner.  The charging effect of the gate is simulated by applying a current pulse to the independent current source
{bold} iin
. The  
{bold} .trans 
statement is used to specify the time stepping parameters for the transient analysis.  In addition, the 
{bold} .log 
statement saves the diode output characteristics over the time interval specified.  TonyPlot plots the transient
response of the circuit.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} powerex12.in : modeling Low-Voltage Power MOSFET 

Requires: SSuprem 4/DevEdit/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates modeling of Low-Voltage Power MOSFET
based on the following reference:

K.Shenai, C.Cavallaro, S.Musumeci, R. Pagano, A.Raciti
"Modeling Low-Voltage Power MOSFETs as Synchronous rectifiers in Buck Converter
Applications", Industry Applications Conference, 2003. 38th IAS Annual Meeting 
pp. 1794- 1801 vol.3.

It shows:

{bullet} Structure definition using Athena 
{newline}
{bullet} Remeshing using DevEdit
{newline} 
{bullet} Transfer and Breakdown Voltage Characteristics using Atlas
{newline} 
{bullet} Output and AC small signal Characteristics using Atlas
{newline} 


The file starts with the definition of the process flow for a low
voltage MOSFET transistor in Athena. Often a mesh that is used for 
process simulation, is not optimal for use with device simulation. 
In this example, the mesh generation tool
{bold} DevEdit 
is used to recreate a mesh that has zero obtuse triangles in the
semiconductor region. It is then refined as a function of a number
of solution quantities on the mesh (eg: Nte Doping).

Popup windows under the DeckBuild Command window can be used to create
this set of commands to control DevEdit. The DevEdit GUI can be used as
well by loading the structure file from Athena, remeshing it using DevEdit
GUI and saving a DevEdit command file. The mesh syntax from this file can
then be copied and pasted into deckbuild. 

In Atlas the transfer characteristic is simulated by setting the Drain 
Voltage to 25V and ramping the Gate Voltage to 4V. The Threshold Voltage
is adjusted using the 
{bold} workf 
parameter from the contact statement.

In order to simulate the Breakdown Voltage, the initial Athena structure
has been modified by providing the body region with a contact, thus, ensuring
a short with the source region. This is done directly in Atlas by adding a 
body contact using the 
{bold} electrode name=body x.min=0 x.max=0 y.min=0.3 y.max=0.6 
statement. The breakdown Voltage can be adjusted using the parameter
{bold} AN2 
from the impact statement. To simulate the breakdown curve, the drain
electrode is ramped until the current reaches a specified compliance value.

{bold} solve vstep=1 vfinal=30 name=drain cname=drain compliance=1 

The output characteristic is obtained by ramping the Gate Voltage
to the desired value and then ramping the drain voltage from 0V
to 5V. The 
{bold} log off 
statement allows us to save multiple log files.

The body-drain diode behavior has also been simulated. The forward 
characteristic is dependent on the drain and dource contacts 
resistance as well as the epi-layer resistance. A drain contact
resistance is added using the statement
{bold} contact name=drain resist=5e03
.

The capacitances are collected by applying a bias ramp on the
drain electrode up to 15V.  The parameter
{bold} ac 
on the solve statement sets the ac analysis on. The frequency of this
signal is set to 1MHz. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} powerex13.in : Merged PiN Schottky Power Diode 

Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates modeling of a combination PiN and Schottky Power Diode device based on the paper:

S.Musumeci et. al. "Modeling and Characterization of a Merged PiN Schottky Diode with Doping Compensation of the Drift Region", 
Industry Application Conference, 2004. 39th IAS Annual Meeting.  Publication date: 3-7 Oct.2004  Volume 2, pp. 1244-1251

It shows:

{bullet} Structure definition using Athena 
{newline}
{bullet} Forward and Reverse Voltage Characteristics using Atlas
{newline} 

The device is first constructed in the process simulator, Athena (SSuprem 4), using three stages of epitaxial growth with masked boron implants prior to each stage.  
A long, high temperature anneal then diffuses these implanted regions together to create a deep p-doped region to help spread the electric field at high reverse bias.  

Once constructed, the device forward and reverse characteristics are then simulated in Atlas (SPISCES), using the "
{bold}Universal Schottky Tunneling
" 
{bold}model (UST)  
and the final results are plotted using the same X and Y axes as in the paper for a direct comparison with measured results. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} powerex14.in : CoolMOS 

Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates modeling of a CoolMOS power device based on the paper:

P. N. Kondekar et al. "Study of the Degradation of the Breakdown Voltage of a Super-Junction Power MOSFET due to Charge Imbalance", 
J. Korean Phys. Soc., Vol.48, (2006) pp.624.

It shows:

{bullet} Structure definition using Athena 
{newline}
{bullet} Reverse Voltage Characteristics using Atlas
{newline} 

The CoolMOS is a novel power Device. In the CoolMOS device, the drift region of a conventional power 
MOSFET is replaced by a superjunction (i.e. a combination on N- and P- strips in parallel). When the 
device is on, the N- strip conducts the drain current. When the device is off and a drain voltage 
is applied, it appears as a reverse bias between the N- and P- strips. A depletion region forms and 
a relatively small value of Vd fully depletes the drift region. Subsequently the drift region behavior
is similar to that of an intrinsic region allowing higher breakdown voltage.

Once constructed, the device reverse characteristics are then simulated in Atlas (SPISCES), and the 
final results are plotted showing a breakdown voltage higher than 600V. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} powerex15.in : SEU Induced Gate Rupture (SEGR) in a Power MOSFET

Requires: SSuprem 4/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R


This examples demonstrates how an SEU strike in a power MOSFET can create a 
high transitory gate field sufficient to rupture the gate oxide.  Experimnets
have shown that a transitory breakdown field across the gate oxide that only
lasts for pico-second time scales, is sufficient to rupture the gate causing
permanant damage to the device.

A gate rupture event is dependent on both the device bias and the LET of the
SEU strike.  The bias that creates the most sensitive conditions for a gate 
rupture event occurs when the field across the gate oxide from the gate bias
is in the same direction as the additional field from the induced charges from
the SEU event.  When this condition occurs, the existing field across the 
device from the gate bias is re-enforced by the additional field created by 
the SEU induced charge track, thus minimizing the LET required from the SEU 
strike to cause a gate rupture event.

The example creates a power MOSFET structure using the Athena process 
simulator.  Circular symmetry is then used for the device simulations, where
the center of the cylindrical device is at X=0 (the left hand side of the 
structure).

An SEU strike with an LET of 37.2 (corresponding to a Bromine Ion), is 
simulated, with the strike occuring at the center of the device (X=0).  At the 
time of the SEU strike, a bias of -13.9 volts is applied to the gate and
30 volts on the drain.  This bias condition creates a near critical condition
close to that required for a gate rupture event to occur.

The gate oxide field was probed near the strike, such that gate oxide field
versus time could be plotted before, during and after the SEU strike.  After
the SEU strike occurs, this critical reversed bias condition results in a
peak gate oxide field that increases by over 3 times the field from just 
the DC bias condition alone.

The evolution of the hole concentration distribution was also monitored 
at 5, 50 and 150 pico seconds after the strike. The drain current was 
simulated over a longer time span.  Just for completeness sake the breakdown
voltage and unsaturated threshold voltage (for Vd=0.1 volts) were also 
simulated.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} powerex16.in : 3D BiGT On-State Characteristics as a Function of the Anode Shorts Layout Design

Requires: Victory Process/Victory Device
{newline}
Minimum Versions: Victory Process 7.14.3.R, Victory Device 1.10.2.R

By default Victory Process and Device run on just one processor.
To ensure better perfomance on your computer the following simulation condition
{bold} simflags="-P all"
could be specidied in the 
{bold} go
line starting Victory Process or Device. This means that all processors available will be used.
If you want to use a smaller number of processors you can substitute "all" with a desired number, e.g.
{bold} simflags="-P 4".

This example compares the on-state IGBT mode performance of the Bi-mode Insulated Gate Transistor (BiGT) [1] with two different anode shorts stripe designs: parallel stripes 
S1 and radial stripes S2. Both structures S1 and S2 have the same widths of the n+ shorts 
and the p+ anode segments of 100 um and 400um, respectively. 

The 3D BiGT structures are generated by Victory Process. The process simulation starts 
with a 2.5um-thick anode/collector region (INIT SILICON DEPTH = 2.5) comprising an area 
of 0.5mm by 4 mm  (FROM = "0, 0" TO = "4000, 500"), in which the total height of the final
structure above the anode/collector region is assumed to 
be less than or equal to 200 um. A SPECIFYMASKPOLY statement defines a polygonal mask that
corresponds to each layout design, while a combination of the MASK and the DOPING 
statement allows a uniform doping to be introduced directly into a particular portion of
the device volume. Thus, the desired patterns can be produced in the anode/collector 
region. For ease of simulation, a 1 µm-thick heavily doped n-type layer of silicon 
(DEPOSIT SILICON THICKNESS = 1 PHOSPHORUS = 1E19) is put in place of MOS cells on the 
emitter side of the BiGT to render the on-state IGBT mode of the BiGT.

Victory Device performs 3D device simulations in transient mode to detect possible snapback
effects in the BiGT on-state I-V characteristics. Parallel-electric-field, inversion-layer,
temperature, and doping-dependent mobility models (CVT) as well as the Shockley-Read-Hall
(SRH) recombination model are used during 3D simulation. The collector current is ramped up
from 0 A to 30 A at a constant rate of 1 A/s, which can be done by first specifying the
current boundary condition on the collector contact with the help of the CONTACT
NAME=collector CURRENT command, and then giving a value to the ICOLLECTOR, RAMPTIME, TSTEP,
and TSTOP parameters on the SOLVE statement. With the TOL.TIME=1 parameter on the METHOD
statement, the tolerance for a local truncation error used by an adaptive time-stepping
algorithm is set to 1 instead of the default value of 5 × 10-3. Simultaneously, by means of
the NORM.SCALING.LOCAL and NEWTON parameters on the METHOD statement, the RHS norms and their
tolerances are scaled locally and the Newton solver is resorted to for transient simulations,
respectively. The ATRAP=0.1 parameter on the METHOD statement instructs Victory Device to
multiply the time-step by a factor of 0.1 once the Newton solver fails to converge. During
the transient ramp-up of collector current, the SAVE statement is repeatedly employed to 
save carrier density data to structure files at various current values for visualization in
Tonyplot. 

I-V curve of design S1 differs from that of design S2 in the occurrence of a number of 
voltage snapbacks. Furthermore, the S1 design exhibits a higher on-state voltage drop than 
the S2 design. A glance at the electron distribution in a cut plane defined along the 
z-axis at z = -40 um at three different values of collector current reveals smooth transition
of the BiGT with design S2 into full conduction as a result of the spread of electrons 
along the entire device length at a relatively low current. In the case of design S1, on 
the contrary, electrons spread over the whole device in a step-like manner, causing th
voltage to snapback at each progressive stage of the electron spread over the p+ anode
segments. 

To load and run this example, select the Load example button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the run button to execute the example.

References:
[1] L. Storasta, M. Rahimo, M. Bellini, A. Kopta, U. R. Vemulapati, and N. Kaminski,
"The Radial Layout Design Concept for the Bi-mode Insulated Gate Transistor "
Proc. ISPSD11, pp. 56-59, 2011.

{subsection} powerex17.in : Wide Bandgap Ga2O3 MOSFET 

Requires: ATLAS
{newline}
Minimum Versions: ATLAS 5.22.1.R


Single-crystal gallium oxide (Ga2O3) has attracted increasing attention as a promising
material for power device applications. It possesses excellent material properties and 
has the potential for mass productivity of low-cost and high-quality bulk crystals by 
using methods such as the edge-defined film-fed growth (EFG) method [1].

The objective of this example is to demonstrate how to simulate this new wide bandgap
oxide semiconductor material Ga2O3 and to reveal what kinds of physical models and 
settings are needed in order to reproduce experimental I-V data. The experimental 
data used in this benchmark were selected from a recently reported paper on the first
demonstration of Ga2O3 MOSFET [2]. 

The substrate is a semi-insulating single-crystal β-Ga2O3 and a 300 [nm] thick n-type 
Ga2O3 channel layer was grown on it. The dopant concentration of the layer is 
7e17 [1/cm3] and about half of this is considered to be activated. The source and drain 
contact regions were formed by multiple Si implantations with 150 [nm] deep box profile
whose concentration is 5e19 [1/cm3]. We assumed that 3e19 [1/cm3] were activated. The 
distance between the source and the drain box regions is 20 [um] and a 20 [nm] thick 
Al2O3 gate dielectric film was formed with a 2 [um] long Ti/Pt/Au metal gate on top.

We selected simple device models as much as possible. Only the LAT.TEMP parameter was 
set on the MODEL statement to solve the heat flow in the device and a constant 
thermal conductivity model was used. 

Simulated ID-VD curves and a ID-VG curve are shown in Fig.2 and Fig.3 with corresponding
experimental data. Fairly good agreements with experimental data were obtained using 
constant mobility model even without any defect trap and interface charge

To load and run this example, select the Load example button in DeckBuild. This will 
copy the input file and any support files to your current working directory. Select 
the run button to execute the example.

References:

1]. H. Aida, K. Nishiguchi, H. Takeda, N. Aota, K. Sunakawa and Y. Yaguchi,
"Growth of B-Ga2O3 Single Crystals by the Edge-Defined, Film Fed Growth Method "
Jpn. J. Appl. Phys. 47, 8506(2008).

[2]. M.Higashiwaki, K. Sasaki, T. Kamimura, M. H. Wong, D. Krishnamurthy, A. Kuramata, T. Masui and S. Yamakoshi,
"Depletion-mode Ga2O3 MOSFETs "
71st Annual Device Research Conference (DRC), 10.1109/DRC.2013.6633890.

{subsection} powerex18.in : Buffered Super Junction LDMOS

Requires: Victory Process - Victory Device
{newline}
Minimum Versions: Victory Process 7.14.3.R, Victory Device 1.10.2.R

By default Victory Process and Device run on just one processor.
To ensure better perfomance on your computer the following simulation condition
{bold} simflags="-P all"
could be specidied in the 
{bold} go
line starting Victory Process or Device. This means that all processors available will be used.
If you want to use a smaller number of processors you can substitute "all" with a desired number, e.g.
{bold} simflags="-P 4".

This example demonstrates the creation of a 
{bold} buffered super junction LDMOS.

{bold} Super junctions 
are used in LDMOS structures to 
{bold} greatly increase the breakdown voltage 
of small geometry devices
by allowing the drain depletion region to spread in two dimensions
instead of one at higher drain voltages
(the additional direction being laterally across the super junction).
The nett result is that the drain voltage can now be spread across 
a much greater total distance than would otherwise be the case,
which greatly lowers the field at the drain 
and therefore increases the breakdown voltage.

Another advantage of super junction technology is that the n doped stripes 
in the super junction can be doped to higher concentrations 
because the important depletion distance is now the lateral distance
between the super junction stripes (determined largely by the technology node)
rather than the full depletion width of the drain.  
Higher doping yields lower on resistance, increasing current drive
over a standard construction design with a similar breakdown voltage.

The 
{bold} buffered 
super junction device takes this technology one step further
by including an additional n-doped buffer layer under the super junction,
which increases the breakdown voltage to even higher values
by expanding the depletion region in the remaining third dimension
which is down into the depth of the substrate.
This example demonstrates the effectiveness of this approach 
as it has an electrical gate length of only 2.5um 
but its breakdown voltage is 95 volts.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} powerex19.in : Super-Junction "RESURF" LDMOS

Requires Victory Process - Victory Device
{newline}
Minimum Versions: Victory Process 7.14.3.R, Victory Device 1.10.2.R

By default Victory Process and Device run on just one processor.
To ensure better perfomance on your computer the following simulation condition
{bold} simflags="-P all"
could be specified in the 
{bold} go
statement starting Victory Process or Device. This means that all processors available will be used.
If you want to use a smaller number of processors you can substitute "all" with a desired number, e.g.
{bold} simflags="-P 4".

This simulation is similar to the previous
{bold} Buffered Superjunction LDMOS 
but uses a low doped substrate and longer superjunctions to increase the
off state breakdown voltage to approximately 500 volts.

The structure is modelled after the one proposed by Ming Qiao et al. 
in the "Proceedings of the 23rd International Symposium on Power Semiconductor
Devices & IC's", May 23-26, 2011 SanDiego, CA, entitled: "A Noval Substrate-
Assisted
{bold} RESURF 
Technology for Small Curvature Radius Junction".

This simulation models the active region unit cell of the above device.
By careful optimization of the superjunction widths and lengths together with
the doping concentrations of these super-junctions and the related N-Well,
a 500 volt breakdown device is realized when coupled with a high resistivity
substrate.

The 3D device is then passed to Victory Device to simulate the breakdown voltage
and threshold voltage curves (IdVg)

To load and run this example, select the
{bold} Load Example 
button in Deckbuild.
This will copy the input file and any support files to your current working
directory.  Select the
{bold} run 
button to execute the example.



{subsection} powerex20.in : 3D Vertical LOCOS power MOSFET

Requires Victory Process - Victory Device
{newline}
Minimum Versions: Victory Process 7.14.3.R, Victory Device 1.10.2.R

This example is taken from the Silvaco Simulation Standard Article:
"Vertical LOCOS Power Devices in Victory Process: From 3D Process and
Electrical Optimisation to High Speed, Full Chip Process Emulation, Volume
25, Number 2, April - May - June 2015"

The example creates a simplified process flow in Victory Process for a
curved corner vertical LOCOS MOS power device, the structure is then
exported and passed into Victory Device for electrical simulation.

The simulation is initialised with a heavily doped N+ layer, this forms the
N+ Drain. Once the volume mesh is defined, a thick N-type layer is deposited
with a doping of 8E15cm3 followed by a P-type layer of 1E17cm3 which form
the N-drift and P-base (source) respectively.

SPECIFYMASKPOLY is then used to define the masks for etching the trench. Two
masks are defined to create the trench outline, they are then merged using a
Boolean OR operation on them.

Thin oxide and nitride layers are then deposited, the former for the thin
gate oxide, the latter to stop oxide growth in subsequent thermal steps.

As a short cut, the single mask set defined previously is used to etch away
unnecessary parts of these layers and form the deep trench. The DELTACD
parameter is used to shift the dimensions of the mask layer.

Once the thick oxide is grown, polysilicon is used to fill the trench and
defined as an electrode.

Finally the device is exported using an unstructured delaunay mesh. The base
mesh size is set at 0.2um. mesh refinement is then undertaken on distance to
interface with polysilicon to provide drift region refinement along the edge
of the thick oxide. Refinement is also undertaken on the P/N junction.
Finally a refinement box is defined over the N-Drift/N+ Drain transition.

The exported structure is then passed to Victory Device, a bias is applied
to the device and ramped up. Complience is set such that the simulation
stops when breakdown is achieved. The EXTRACT statement is used to print out
the value of breakdown voltage.


To load and run this example, select the
{bold} Load Example 
button in Deckbuild.
This will copy the input file and any support files to your current working
directory.  Select the
{bold} run 
button to execute the example.


{subsection} powerex21.in : 3D Mixed-Mode Simulation of Current Filaments in Multicell IGBT 

Requires: VictoryProcess3D / VictoryDevice3D 
{newline}
Minimum Versions: Victory Process 7.14.3.R, Victory Device 1.10.2.R

When an IGBT is turned on in the presence of a short-circuit in an output circuit for a period of time, it can dissipate power in the form of heat to such an extent that current filaments evolve in a localized area within the IGBT device. The heating effects of current filaments are destructive and thus should not be allowed to arise during a short-circuit operation of an IGBT.
 
In this example, the 3D mixed-mode short-circuit simulation is performed on an IGBT composed of 8 cells to demonstrate the occurrence of current filaments in multicell IGBT. 

The 8-cell IGBT structure is constructed in cell mode of Victory Process by joining 8 duplicates of the IGBT single cell together using the parameter
{bold} mirror
on the
{bold} export
statement. Each IGBT single cell has a width of 1um and features a 1.3 kV trench-gate design with a field-stop layer (n-buffer). 
 
Short-circuit testing is conducted with a test circuit consisting of a 
{bold} vc 
600V DC power supply in series with a 10-mohm resistor 
{bold} rs 
and a 10-nH inductor 
{bold} ls
. A 
{bold} vg 
gate pulse generator in series with a 10-ohm resistor 
{bold} rg
generates a 15V pulse in 10 ns with a pulse length of 10 us. 

It is assumed that the bottom collector electrode of the IGBT is maintained at an ambient temperature of 300 K via a thermal contact with a thermal resistance of 0.3 cm2.K/W (
{bold} thermcontact name=collector ext.temp=300 alpha=1/0.3
).

As the mixed-mode simulation starts from an initial DC voltage supply of 600V, a Victory Device solution 
{bold} powerex21_1.str 
for the IGBT device 
{bold} adevice
at a collector-to-emitter voltage of 600V is first obtained from the stand-alone Victory Device simulation and then loaded into the mixed-mode part of the input deck
with
{bold} .options loadsolutions 
for use as an initial guess.

Victory Device utilizes a set of physical models for the non-isothermal (
{bold} lat.temp
self-heating) simulation including 
{bold} klassen 
low-field doping-dependent mobility ,
{bold} fldmob
lateral electric field-dependent mobility, 
{bold} srh 
Shockley-Read-Hall recombination, 
{bold} hnsaug
temperature and concentration dependence Auger recombination, and 
{bold} selb
impact ionization. The
{bold} pas 
MPI-based parallel direct solver specified in the Victory Device part of the mixed-mode input deck (
{bold} method device=adevice pas
) proves to greatly enhance Victor Device performance in terms of speed and robustness.

The simulation results give the short-circuit waveforms up to destruction of the IGBT at time
{bold} t=5.24 us 
as evidenced by a sharp rising of temperature in conjunction with the establishment of current filaments. A 3D electron current density distribution at that device destruction time is captured and saved for visualization in TonyPlot with
{bold} .save tsave="5.24us".


To load and run this example, select the
{bold} Load Example 
button in Deckbuild.
This will copy the input file and any support files to your current working
directory.  Select the
{bold} run 
button to execute the example.

{subsection} powerex22.in : UMOS Device

Requires: Victory Process - Victory Device
{newline}
Minimum Versions: Victory Process 7.14.3.R, Victory Device 1.10.2.R

By default Victory Process and Device run on just one processor.
To ensure better perfomance on your computer the following simulation condition
{bold} simflags="-P all"
could be specidied in the 
{bold} go
line starting Victory Process or Device. This means that all processors available will be used.
If you want to use a smaller number of processors you can substitute "all" with a desired number, e.g.
{bold} simflags="-P 4".

This example demonstrates
{bold} 2D 
process simulation and basic device tests for a  U-shaped trench MOSFET or 
{bold} UMOS
.

UMOS device belongs to family of Vertical MOSFET devices which differ from standard (horizontal) 
MOSFETs by the fact that the gate is "vertical" and the drain is on the bottom
of device. In UMOS, the vertical gate is formed by etching and oxidizing of a deep trench in silicon.
The device uses two connections to the source which results in much larger area 
through which the current can flow. This reduces the ON resistance of the device which 
allow to handle higher powers than standard MOSFETs. The vertical nature of the UMOS
structure allows to achieve good device characteristics with smaller "layout footprint"
than conventional power MOSFETs.

Since UMOS is a symmetrical device only half of the structure is simulated up to the very
end of processing where 
{bold} Mirror
statement is used just before final device strcuture is "exported" to VictoryDevice.

Most of important geomentrical and process parameters of the UMOS structure are parametrized using
{bold} set 
capability of
{bold} DeckBuild
which allows easy process and device optimization using
{bold} VWF.

The key process step, the trench formation, is simulated by combination of
 two etch models:
{newline}
{bullet} geometrical 
{bold} angled dry 
etch
{newline}
{bullet} geometrical
{bold} wet 
etch with the curvature of the trench bottom specified by 
{bold} RADIUS
{newline}

This deck takes advantage of Victory Process capability of adjusting volume
mesh for specific implant/diffusion steps. It starts with a very coarse volume mesh
which allow to speed up epitaxy and trench formation steps. Then additional volume mesh 
{bold} lines
are placed in important areas around the trench as well as in implanted areas. Also, the fine
grid initially required to capture a sharp peak of N+ Arsenic implant was later coarsened
by using 
{bold} Line remove
capability of Victory Process. 

In this example, in order to decrease simulation time the default analytical model is used 
for all implant steps. The Monte Carlo implant model is recommended for most real device simulation.

Several parameters of the device structure are extracted along the way and can be used
for process optimization. 

Finally, the full structure is "exported" for device simulation using 
{bold} victory(conformal)
method which preserves overall density of the volume mesh with simultaneous
"smoothing" of material interfaces and reducing the number of obtuse triangles.
For further details  of this device export method see the article
{bolditalic} "Unified Victory Conformal Export for 2D Process Mode"
published in 
{bold} Simulation Standard, Volume. 26, Number 1, 2016
. 

In the end Victory Device is used to extract two basic device characteristics:

{bullet}  Threshold voltage
{bold} Vt
{newline}
{bullet} Breakdown voltage 
{bold} BV
.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{section} HIGHK : High-k Gate Dielectric Application Examples


{subsection} highkex01.in : Simulation of Remote Phonon Scattering Mobility


Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R


This simulation demonstrates the effects or remote phonon scattering
on the effective mobility in high-k gate dielectric MISFET devices.

It demonstrates:

{bullet} Basic structure definition using Atlas syntax
{newline}
{bullet} Application of high-k remote phonon scattering mobility model
{newline}
{bullet} Using probe to extract effective mobility versus perpenicular field
{newline}
{bullet} Plotting output curves and structures.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} highkex02.in :  Simulation of Remote Coulomb Scattering Mobility


Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This simulation demonstrates the effects or remote coulomb scattering
on the effective mobility in high-k gate dielectric MISFET devices.


{bullet} Basic structure definition using Atlas syntax
{newline}
{bullet} Application of high-k remote Coulomb scattering mobility model
{newline}
{bullet} Using probe to extract effective mobility versus perpenicular field
{newline}
{bullet} Plotting output curves and structures.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{section} ISOLATION : Isolation Applications Examples


{subsection} isolationex01.in : Local Oxidation Isolation Punchthrough

Requires: SSuprem 4/DevEdit/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example simulates punchthrough between two n+ areas separated by
an oxide isolation structure. The isolation structure is a local
oxidation using Sealed Interface Local Oxidation (SILO) combined with
a p-type field stop implant.

This example demonstrates the following features:

{bullet} Processing of a local oxidation structure
{newline}
{bullet} Remeshing at the process to device simulation interface
{newline}
{bullet} Remeshing within device simulation
{newline}
{bullet} Ramping iv curves to a compliance limit


This example starts with process simulation using Athena, remeshes
using DEVEDIT, and interfaces to Atlas. Atlas ramps the voltage up to a predefined 
drain current value,
a further remesh in DEVEDIT is performed, and Atlas ramps to the
punchthrough target current.

For details on local oxidation (bird's beak) process simulations, see the
ATHENA_SSUPREM4 examples section.

The electrodes are placed at the end of the process flow and then
subsequently named with
{bold} electrode 
statements. Only the 
{bold} x 
coordinate needs to be specified in this case as the electrodes are on the surface of the structure. Should they be buried, both 
{bold} x 
and
{bold} y 
coordinates need to be specified. Both polysilicon and metal regions are treated as
possible electrodes.

The
{bold} electrode name=substrate backside 
statement will automatically place an electrode on the bottom of 
the structure. This is the best and most efficient way of approximating a well contact.


After the process simulation, the structure is remeshed with DEVEDIT
with the command:
{bold} go devedit 

At this point the solution only contains solution quantities from the
process simulator, so that only impurity values are available as 
remeshing criteria. These are selected with the commands:

{newline}
{bold} imp.refine imp="Arsenic" sensitivity=0.5 
{newline}
{bold} imp.refine imp="Boron" sensitivity=0.4 
{newline}
{bold} imp.refine imp="Phosphorus" sensitivity=0.5 

Boron is weighted so that the mesh will be more sensitive to boron
concentration gradients. In other words, the smaller the value for
{bold} sensitivity, 
the more sensitive the mesh will be to concentration gradients and the
denser the mesh will be.

In this example,
{bold} constr.mesh 
commands control the maximum allowable angle within a
triangle, specific to a material type. For example:
{newline}
{bold} constr.mesh type=Insulator default max.angle=178 
{newline}
states that very obtuse triangles are allowed in all insulator (oxide)
regions.

This is acceptable, as obtuse triangles are essentially only a problem
in semiconductor regions when solving carrier transport equations.
The reason for doing this is because by lowering the criteria for
maintaining zero obtuse triangles, the more relaxed the mesh can be
and  the simulation will run faster.


Next the structure is passed into the device simulator Atlas for 
biasing and design parameter extraction. This is accomplished with
the command 
{bold} go atlas. 

As the device is simply punching though, the current is governed almost 
completely by the potential barrier and drain induced barrier lowering
effects. Thus a special mobility model is not selected to speed up the calculation.

An interface charge of 1e11 is selected arbitrarily, and may be adjusted
as a primary calibration parameter to match experimental results.


A sequence of 
{bold} solve 
commands ramps the drain contact up to 30V using a current
compliance of 0.001uA. The simulation stops when either of these is
exceeded. In the present example, this will be at
about 14V drain voltage. It is assumed that the breakdown will not
occur during this ramp. 
For the last bias point, a single structure file,
containing both the mesh and the solution, is saved.


After the previous biasing of about 14 volts, the structure is remeshed
again using 
DEVEDIT
this time as a function of potential gradient, doping
gradient and electron concentration gradient resulting in a more accurate 
mesh. The current compliance value has been chosen such that the 
resulting drain voltage has a value that will always be lower than
the punchthrough voltage, but is high enough to offer a closer solution
to the final IV area of interest.

Another log file is opened for the final punchthrough IV curve to be held.
The solution is reloaded with the new mesh created by DEVEDIT
and the drain bias is increased up to 30 volts or 0.1um/W/L, whichever is reached
sooner.

Finally, a design parameter relating to the punchthrough voltage is extracted.

The command
{newline}
{bold}extract name="n_isolation_vpt" x.val from curve(abs(v."drain"),abs(i."drain")) where y.val = 1.0e-7
{newline}
should be allowed to run over two lines. Do not use a line continuation character
in any 
{bold} extract 
statement.  It defines the measure of punchthrough as that drain voltage at which the drain current is 0.1uA/um.



To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.






{subsection} isolationex02.in : Trench Isolation Punchthrough


Requires: SSuprem 4/Elite/S-Pisces
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This examples demonstrates punchthrough between unrelated n+ regions
separated by trench isolation. It shows:

{bullet} Trench formation by ELITE physical etch models
{newline}
{bullet} Trench doping using SSUPREM4 implant models
{newline}
{bullet} Trench fill by ELITE physical deposition models
{newline}
{bullet} Punchthrough test across the trench using Atlas

The example file consists of two parts. The first uses Athena to
construct the geometry and doping of two n+ areas separated by trench
isolation. The second uses Atlas to simulate punchthrough between these
two regions. 

Details of ELITE and SSUPREM4 syntax for trench formation and refill
can be found in the appropriate Athena example sections.

The trench is formed by Reactive Ion Etching (RIE), with different
isotropic and anisotropic etch rates for each material present.  A
field implant is performed directly into the trench.

The device is interfaced automatically into Atlas. The two carrier mode is
selected along with impact ionisation. The contact named drain is
ramped to 20 volts under the control of a current compliance limit of 3e-12 A/um.

The final drain current contours are plotted at the end of the
simulation, where the current density can be seen to avoid the field
implant doping peak.

A design parameter is measured at the end of the Atlas simulation using the
{bold} extract 
statement. The parameter is defined as the voltage required on the
drain to get 2e-12 A/um of drain current.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{section} MESFET : MESFET Application Examples




{subsection} mesfetex01.in : Ion Implanted GaAs MESFET Fabrication and Vt Test

Requires: SSuprem 4/DevEdit/Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates fabrication and electrical analysis of a
MESFET structure using the FLASH module of Athena and the Blaze
capability of Atlas.  The example uses DEVEDIT at various points
in the process to optimize the grid. The example shows:

{bullet} MESFET fabrication using FLASH 
{newline}
{bullet} Re-meshing of structure in DEVEDIT
{newline}
{bullet} Setting of device parameters for electrical simulation
{newline}
{bullet} Electrical simulation of an Id/Vgs curve


This example starts by interfacing Athena and DEVEDIT to provide a
GaAs MESFET structure using silicon and beryllium implants. Details of
using FLASH can be found in the ATHENA_FLASH examples section.

It is necessary to set contact workfunctions for every Schottky contact
in each Atlas input file. The command
{bold} contact name=gate work=4.87 
is used to set the gate workfunction. Source and drain contacts are
assumed to be ohmic. Users should note that this contact statement is
necessary even though the material Titanium was used in the Athena
simulation. Atlas does not recognize different metals, and the properties of
different metal regions are not transferred from Athena to Atlas.  Atlas
calculates the barrier height of a Schottky barrier in the following
mannor:

{bold} barrier height = (metal work function - semiconductor electron
{bold} affinity).  

Care should be taken to ensure the appropriate barrier height is chosen.

Low lifetimes typical of GaAs are set in the
{bold} material 
statement.  The  
{bold} models 
statement is used to specify appropriate models within the simulation. The
{bold} fldmob 
parameter turns on the electric field dependent mobility. 
{bold} conmob
specifies the concentration dependent mobility. These values are taken
from a look-up table and exist only for room temperature.

The solution sequence for MESFET threshold voltage is first to obtain the initial solution at zero bias on all contacts. Then the drain is set to 0.1V. A log file is opened by the 
{bold} log 
statement to store all terminal characteristics. The  final 
{bold} solve                    
statement ramps the gate from zero to -3V. Note that Atlas requires the
zero bias solution to be solved first in all cases. Thus the gate
voltage should be swept from zero to the value required. If a range of
both negative and positive gate voltages is required two sweeps can be
done by saving and loading the zero bias solution.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} mesfetex02.in : Epitaxial GaAs MESFET  S-Parameters

Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the calculation of s-parameters in a simple
MESFET. It shows:

{bullet} MESFET structure definition using Atlas syntax
{newline}
{bullet} Setting of GaAs mobility models and gate workfunction  
{newline}
{bullet} Id/Vds characteristics with Vgs=0
{newline}
{bullet} AC analysis at a single DC bias at different frequencies
{newline}
{bullet} Conversion of capacitance and conductance data from Atlas into s-parameters
{newline}
{bullet} Smith Charts of MESFET s-parameters using TonyPlot

The geometry and doping of the  MESFET device used in this example is
described using the Atlas structural syntax. 
Initially the mesh is specified in x and y, using the following command format
{bold} x.mesh loc=aaa spac=bbb 
specifying that there is a mesh spacing of bbb and x location aaa.
{bold} region 
statements are used to specify two GaAs regions which will later be
doped differently.
{bold} electrode 
statements specify the names and positions of electrodes. The
workfunction of the gate contact is set using
{bold} contact
. 
Each GaAs region is uniformly doped. An n-type active layer sits on top
of a lowly doped p-type substrate. GaAs mobility models for
concentration and field dependence are set in the
{bold} models 
statement. 

The numerical methods used at the initial stage of the simulation are
conservative. The statement
{bold} method gummel newton 
specifies that the decoupled (gummel) method is used at the start of
the simulation for each bias point. This switches to the coupled
(newton) method if convergence is not obtained. This is the most robust
method for the initial bias steps and for complex devices. It does
consume more CPU time and can lead to problems at high current levels.
If these problems occur the statement
{bold} method newton 
can be used. 

The DC simulation proceeds by ramping the drain voltage in the 
{bold} solve 
statement until Vds=3.0V. After this, a log file is opened and AC analysis begins.
The full sweep of frequency is done on the line:
{newline}
{bold} solve ac.analysis direct frequency=1.e9 fstep=2.e9 nfsteps=20 
{newline}
The 'ac' parameter switches on the AC analysis. 'direct' specifies a
robust AC solver for high frequencies. Activating the 'direct' solver
will cause more memory to be allocated than was used during the DC
simulation. If your system does not have enough virtual memory to run
the AC application, the simulation will stop here with an error
message.  The exact amount of memory required depends on the number of
mesh points. The 'frequency' value is the initial frequency of the AC
signal, fstep is the step value added to this frequency, and nfsteps is the number
of steps. 

The AC analysis in Atlas calculates the real and imaginary
current components from a small AC signal on top of the existing DC
solution. From these currents Atlas calculates the conductance and
capacitance between each pair of electrodes. By plotting the log file,
users can see graphs of drain-gate conductance (C drain>gate) or 
total gate capacitance (-1*C gate>gate).

The s-parameters (or Z, Y and ABCD parameters) are calculated by setting
the
{bold} s.param 
(or y.param etc) on the log statement preceeding the ac analysis.
The most important parameters are the *port parameters. s-parameter
analysis assumes the device is a two port device with 4 terminals.
The inport and outport are used to assign the respective electrodes. 
Users should ensure the correct definition of all ports.
In this example the input port is set to the gate and output
port to the drain. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.






{subsection} mesfetex03.in : Energy Balance and Drift Diffusion Comparison

Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates electrical analysis of a 0.2um MESFET structure
with Energy Balance (EB) and Drift-Diffusion (DD) Models. It shows:

{bullet} Structure definition using Atlas syntax
{newline}
{bullet} Specification of energy balance models
{newline}
{bullet} Simulation of Id/Vds with Vgs=0.0V
{newline}
{bullet} Repeat simulation using drift-diffusion models to compare results.

The example file consists of two Atlas runs. Both use the same device
structure defined in a similar manner to the previous example. The
first uses energy balance models to simulate Id/Vds and the second does
the same electrical simulation using the classical drift-diffusion
models. The aim of this example is to compare the effects of the
different models.

Energy balance models provide a more accurate description of physical
device effects, in particular the effect of velocity overshoot and
non-local impact ionization. These  are not handled by the classical
drift-diffusion model. These two
effects can be observed in sub-micron MESFET simulation. 
This example concentrates on the velocity
overshoot effect in GaAs. Non-local impact ionization effects can be
seen in breakdown simulations. Since velocity overshoot is not
accounted for in drift-diffusion the results from simulations with this
model will underestimate the current severely. This discrepancy gets
worse as the channel length decreases.

The sequence of simulation syntax is similar to the previous example.
The structure differs from the previous only in the addition of heavily
doped source/drain regions.

The energy balance models are defined using
{bold} model hcte.el
.
Since this is a unipolar device, only electron energy balance is
selected.  A key parameter in the energy balance model is the
relaxation time. Typical GaAs values are set on the
{bold} material 
statement. 

A choice of numerical methods exists for energy balance simulation.
Here, full coupling of the 4 equations to be solved is selected by
{bold} method newton.
The block method may also be added if convergence problems are seen 
at the initial stage of the simulation. 

The second run repeats the first but without 'models hcte.el'. Results
from the two runs can be compared by overlaying the two log files in
TonyPlot. Two solution files are also saved and these can be compared
to see the difference in simulated electron concentration between the
two models. The statement
{bold} output e.velocity 
was used in both runs to save the electron velocity information to the
solution files. Selecting to plot this for the energy balance solution
file will show the overshoot effect.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} mesfetex04.in : Deep Level Bulk Traps (EL2) - DC Analysis

Requires: SSuprem 4/Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This next three examples demonstrate the simulation of a MESFET structure with
trap states. The example consists of several sections:

{bullet} Formation of a MESFET structure and doping using FLASH
{newline}
{bullet} DC simulation of Id/Vgs characteristics including traps
{newline}
{bullet}- Transient simulation of gate turn off including traps
{newline}
{bullet}- Frequency domain AC simulation including traps
{newline}
{bullet}- S-parameter extraction including traps
{newline}

This example will create the structure for subsequent use and perform the
DC analysis.

In the process simulation section, a simple planar MESFET is formed by
implantation. The initial substrate is intrinsic GaAs. A low doping
level of 1.0e11 is specified. An active layer of 0.1um of n-type GaAs
is deposited. A nitride hard mask is used to pattern the source and
drain regions. These regions are heavily doped using a silicon implant.
Finally metal deposition and patterning is performed. The electrode names
and positions are then defined at the final stage of Athena.

Once in Atlas each run starts by setting the workfunction of the gate electrode. 
The models used in this simulation are electric field dependent mobility
and SRH recombination. The lifetimes for the SRH recombination are set
by the tau parameters on the MATERIAL statement. The vsat parameter sets
the saturation velocity.

The 
{bold} trap 
statement is used to set the parameter of the bulk trap
states. Only one state is used here but several trap statements can be
used in the same run to define multiple states. The trap type must be
set as donor or acceptor. The energy level of the trap is set using
'e.level'. The energy levels are referenced to the conduction or
valence band edges. The sign and sigp parameters set the trapping cross
sections for electrons and holes. An equivalent syntax setting
lifetimes rather than cross sections is also available. 

The DC simulation consists of setting the drain voltage to 0.5V and
stepping the gate from zero to -1.0V. Comparing the results of this
simulation with and without traps shows that a shift to a more positive
threshold voltage is caused by the presence of the donor traps.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mesfetex05.in : Deep Level Bulk Traps (EL2) - Transient Analysis

Requires: SSuprem 4/Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example is based on the structure created in example 4 within the
MESFET section - the trap simulation is now performed in transient mode.

In the transient turn-off simulation, the drain voltage is also set to
0.5V. However the gate is then ramped in a transient from zero to
-2.0V. The ramptime parameter sets the time for the gate voltage ramp,
whilst tstop sets the time until which the simulation will continue. The
parameter dt is used to set the first timestep of the transient. All
other timesteps are calculated automatically by the program. A dt value
of ramptime/100 is a safe one under most circumstances. Comparing the
results of turn-off with and without traps shows how the presence of
the fast trap states slows the time taken for the drain current to
reduce to 1pA/um.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mesfetex06.in : Deep Level Bulk Traps (EL2) - AC Analysis

Requires: SSuprem 4/Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example is based on the structure created in example 4 within the
MESFET section - the trap simulation is now performed in ac mode.

The AC simulation uses the same initial point as the previous two
cases. The gate is grounded and the drain is at 0.5V. An AC signal is
applied at this point to each contact in turn. The frequency of this AC
signal is then ramped from 1MHz to over 10GHz. The fstep parameter sets
the step size of the frequency change. However the parameter 
{bold} mult.f 
means fstep is applied as a multiplier to the frequency rather than as
a sum. 

As described in example 2 in this section, the s.param command on the
log statement is used to specify the output of s-parameters.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{section} HBT : HBT Application Examples 


{subsection} hbtex01.in : Si/SiGe HBT Gummel Plot Simulation


Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the simulation of a SiGe HBT to extract Ic
and Ib versus Vbe and plots the bipolar gain. It shows:

{bullet} Device formation using Atlas syntax
{newline}
{bullet} Specification of a graded SiGe composition fraction
{newline}
{bullet} Selection of models for SiGe
{newline}
{bullet} DC simulation for Ic and Ib versus Vbe 

The majority of this example is similar to the silicon bipolar Gummel
plot example described in the BJT section. This description will focus
on the specific SiGe syntax. More details on various types of bipolar
simulation can be found in the BJT examples section.

The 
{bold} region
statement is used to define the SiGe region in the base of an NPN
bipolar transistor. The argument of the 'material' parameter is
case-sensitive: SiGe is acceptable, but sige is not. The composition fraction 
of the area inside of x.min, x.max, y.min and y.max is defined by the 
{bold} x.composition
parameter. Outside of this box the Ge composition fraction rolls of
linearly to zero over the distance specified by the
{bold} grad.*
parameters. For more details on grad.* parameters, see the Blaze chapter
of the manual.  For non-linear composition fraction variations, DEVEDIT
is needed.

The material parameters for SiGe are selected by
{bold} material material=SiGe ...
. Here the lifetime is set differently for SiGe and Si regions. In this
example common models are used between Si and SiGe regions, but this is
not compulsory. The material parameter of the models statement can be
used to set separate models for each material.

The electrical part of the example is the same as the silicon examples
referenced above. The solution file stored at the final voltage can
be used to examine the band diagram of the HBT. The statement
{newline}
{bold} output con.band val.band
{newline}
enables the conduction and valence band edge energies to be stored in
the solution file. This command is recommended for all heterojunction
simulations in Blaze.

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.



{subsection} hbtex02.in : AlGaAs/GaAs HBT Gummel Plot Simulation

Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the simulation of an AlGaAs/GaAs HBT to
extract Ic and Ib versus Vbe and plots the bipolar gain. It shows:

{bullet} Device formation using Atlas syntax
{newline}
{bullet} Specification of s graded AlGaAs composition fraction
{newline}
{bullet} Selection of models for AlGaAs and GaAs
{newline}
{bullet} DC simulation for Ic and Ib versus Vbe 

As in the previous example the majority of this example is similar to
the silicon bipolar Gummel plot example described in the BJT section.
This description will focus on specific GaAs and AlGaAs syntax. More details
on various types of bipolar simulation can be found in the BJT examples
section.

The graded AlGaAs composition fraction is set in the 
{bold} region 
statement. The parameter
{bold} x.comp
defines the Al content inside the box defined by x.min, x.max, y.min
and y.max. Outside the box the Al content falls linearly to zero in a
distance
{bold} grad.*. 
For more details on grad.* parameters see the Blaze chapter of the
manual. Non-linear composition gradings can only be handled by DEVEDIT.
Since devices constructed in Atlas syntax must be rectangular, a silicon
dioxide region is used to fill the space to the left of the emitter.

The
{bold} material
statement sets the low-field mobilities for the AlGaAs region. Note
that the concentration dependent mobility model 'conmob' can only be
applied to GaAs so two model statements are used to define the models
used in all regions and then just the GaAs regions.

The
{bold} model
statements are used to specify the following set of models: field
dependent mobility, SRH and optical recombination. Optical
recombination (also known as band to band recombination) is an
important effect in III-V devices. The parameter 'optr' sets this model
on. 

The electrical simulation proceeds as in the silicon BJT example
referenced above. Results can be seem in TonyPlot.

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.



{subsection} hbtex03.in : AlGaAs/GaAs HBT Avalanche Breakdown

Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates avalanche breakdown in an AlGaAs/GaAs HBT with an
{bold} abrupt heterojunction.
It shows:

{bullet} Device formation using Atlas syntax
{newline}
{bullet} Specification of an abrupt AlGaAs/GaAs heterojunction
{newline}
{bullet} Selection of models for AlGaAs and GaAs
{newline}
{bullet} Ramping of the collector with an applied resistor until the breakdown voltage 

The structure specification part of this example is similar to the
previous example. The major difference is that this HBT as an abrupt
AlGaAs/GaAs heterojunction as opposed to the graded composition
fraction used before. Specifying an abrupt junction is simple. No
grad.* parameters are used and the value of
{bold} x.comp
on the 
{bold} region
statement is taken as the composition fraction throughout the AlGaAs
region right up to the GaAs region.


The models and material parameters are set exactly as in the previous
example. The only addition is the impact ionization model specified by
{bold} impact selb.
Impact ionization parameters for ternary compounds such as AlGaAs are
not well defined and their dependence on composition fraction is known
even less. Tuning of the parameters of the impact statement might be
needed to match experimental results.

The 
{bold} contact
statement is used to specify a high value resistor at the collector electrode. This
provides for a smooth transition from voltage boundary conditions to current boundary
conditions during the ramping of external collector voltage. Note that such kind
of simulation could be performed using the curve tracing algorithm, providing automatic
selection of the loaded resistor.

The emitter voltage is ramped to -1.1V. Then, holding the
emitter voltage constant, the external collector voltage is ramped to 1.e9 V.
Due to the high value resistor, the value seen on the
semiconductor-to-collector contact will, of course, not increase to
such high levels.

The results of simulation are then displayed using TonyPlot. The x-axis
of the Ic/Vcb curve should be set to
{bold} collector int. bias. 
This is the collector voltage on the semiconductor contact as opposed
to the applied voltage across the resistor.

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.


{subsection} hbtex04.in : Energy Balance and Non-Isothermal Energy Balance

Requires: Blaze/Giga
{newline}
Minimum Versions: Atlas 5.24.1.R

This example compares the results of Ic/Vce simulation of an
AlGaAs/GaAs HBT using the Energy Balance (EB) and Nonisothermal Energy
Balance (NEB) Models.
It shows:

{bullet} Graded heterojunction AlGaAs/GaAs HBT formation using Atlas syntax
{newline}
{bullet} Specification of energy balance models
{newline}
{bullet} Solution for Ic/Vce characteristics
{newline}
{bullet} Comparative simulation including lattice heat flow 


Deep GaAs submicron devices should be simulated using the energy balance
Model due to strong velocity overshoot, which may substantially
influence device characteristics. For high current levels, the thermal
self-heating effects may also play an important role due to the
relatively small heat conductivity in GaAs, thereby decreasing mobility and
leading to a negative output conductance. This example demonstrates a
comparison of Ic-Vce curves obtained with Energy Balance and
Nonisothermal Energy Balance Models.


Two Atlas runs are included in this example. The initial stages of each
uses Atlas syntax to specify a graded heterojunction HBT. The syntax
used is similar to the AlGaAs/GaAs HBT examples described before. The
first run proceeds to select and solve self-consistently the classical
equations: Poisson's equation and the two carrier continuity equations,
and the energy balance equation for electrons. The second run adds the
lattice heat flow equation to these four and solves self-consistently
using a coupled solver.

The energy balance model is selected by
{bold} models hcte.el
. The most important parameter in energy balance simulation are the
relaxation times. These are set on the
{bold} material
statement.


In each run the base bias is ramped to 1.2V. Then 
{bold} contact num=2 current
is used to set current boundary conditions
on the base electrode.  The base current is forced to a value of
15uA/um. After this the collector voltage is ramped to 2.0V to obtain
the Ic/Vce curve.


The same set of models is used, except that the solution of the  lattice energy
balance equation is activated using the syntax
{bold} models lat.temp
. For the AlGaAs region the temperature dependence of the low field
mobilities is set by the
{bold} tmup
and
{bold} tmun
parameters on the
{bold} material
statement.

As with all non-isothermal simulation, thermal boundary conditions must
be included.  These are defined in the 
{bold} thermcontact 
statement.
A value of the thermal resistance is specified at the thermal contact
located along the substrate, and thermal isolation conditions are
assumed on the all other surfaces.

The results of the two runs can be overlaid in TonyPlot. The
simulation with lattice heating shows less current for a given voltage
than the isothermal case. The elevated temperature causes mobility
reduction in the semiconductor and hence lower currents.

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.



{subsection} hbtex05.in : SiGe HBT Fabrication and Characterization Simulation

Requires: SSuprem 4/Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates fabrication and analysis of SiGe HBT. A
bipolar device with a SiGe base created in Athena, and then passed to
Atlas for electrical analysis to extract a gummel plot and bipolar
gain. It shows:

{bullet} SiGe simulation in Athena
{newline}
{bullet} Specification of donor and acceptor dopants for SiGe material
{newline}
{bullet} Athena-Atlas automatic interface 
{newline}
{bullet} DC simulation for Ic and Ib versus Vbe 
 

This example contains two parts. The first is the Athena process simulation
of the HBT, and the second is the Atlas electrical analysis. The whole of the
Atlas part of this example is as described in the first example in this
section with the exception of the Atlas structure specification syntax.  

The Athena run starts by defining the mesh and the silicon substrate.
After the buried collector formation, the structure is flipped upside
down using
{newline}
{bold} struct outf=<file>
{newline}
{bold} init inf=<file> flip.y
{newline}
The next step is the deposition of the silicon germanium layer. SiGe
is a recognized material in FLASH so no special syntax is needed. The
remainder of the bipolar processing is use of typical process simulation
commands for base and emitter implant, silicon emitter layer and
various drive steps. Metal contacts are deposited, patterned and
defined using the
{bold} electrode
statement.

The key statement required for the Athena/Atlas interface is to define
the type of dopants that boron and phosphorus are in SiGe. This is
necessary for all materials in FLASH. The command
{bold} impurity i.boron acceptor sige
sets boron as an acceptor-type dopant in SiGe. A similar statement sets
phosphorus as a donor-type dopant.

The line 
{bold} go atlas
defines the automatic interface with Atlas. In Atlas, no structure
specification syntax (including the mesh statement) is needed.


Results of the electrical simulation can be seen in TonyPlot. Ic and Ib
plots vs. Vbe can be seen from the log file. The band diagram and
other physical variables can be seen from the solution file.

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.


{subsection} hbtex06.in : InGaAs/InP HBT DC and High Frequency Characteristics 

Requires: DevEdit/Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

In this example, an HBT structure based on the InGaAs-InP material system is 
constructed using DEVEDIT. The structure is then passed to Atlas for
electrical testing. The input file consists of the following 2 main
portions:

{bullet} Construction of the device in DEVEDIT
{newline}
{bullet} Simulation of the Gummel plot  in Atlas
{newline}
{bullet} Simulation of the AC parameters 
{newline}
{bullet} S-parameter extraction


The first stage of the input constructs the HBT geometry, material regions,
doping profiles, and electrodes in DEVEDIT. The n-p-n HBT device is based on
a lattice matched InGaAs-InP material system. It consists of 
a highly doped InGaAs cap region followed by another cap region made of InP.
The next region, also made of InP, constitutes the actual emitter. As usual in 
HBTs the emitter (InP) has wider energy band gap than the base and collector
(InGaAs). The base is followed by the n- subcollector and n+ collector regions. 
The substrate is made of undoped InP.

The structure was created in DEVEDIT by drawing the device regions in
interactive mode and specifying 2D doping distribution. In this example
each region was uniformly doped. The Ga composition fraction of 0.47 was
also specified in DEVEDIT for each of the InGaAs regions. Finally the mesh was 
generated automatically by specifying basic mesh constraints and refining it
along x- and/or y-directions in the important areas of the device.


The Atlas simulation begins by reading in the structure from DEVEDIT.
DeckBuild provides an automatic interface between DEVEDIT and Atlas so that the
structure produced by DEVEDIT is transferred to Atlas without having to
indicate the mesh statement.

The first active statements in the Atlas portion of the input file are
material parameters and models definition. In this example the energy band gap, 
densities of states, and other fundamental material parameters for
InGaAs are calculated based on the composition specified in DEVEDIT.
For InP the respective default values are used.  
The band alignment is defined using the 
{bold} align 
parameter on the 
{bold} material
statement.  Material and model parameters can be specified in Atlas on
material-by-material or region-by-region basis. The latter possibility
is used here to define carrier lifetimes, low field mobilities, and
saturation velocities taking into consideration the doping levels in the
respective regions.

The same set of physical models is applied here to all the regions/materials:
Shockley-Read- Hall recombination, electric field dependent mobilities
with GaAs-like velocity-field characteristic, and Fermi-Dirac statistics.
To reflect the different properties of materials with regard to the critical
field, 
{bold} ecritn 
is specified in
separate 
{bold} model 
statements for InP and InGaAs.

The simulation is first performed to obtain the Gummel plot by biasing
simultaneously the base and collector with respect to the emitter up to 1.2 V.
At the same time, a small signal AC perturbation is applied at a frequency
of 1 MHz to calculate the AC parameters (conductances and capacitances) as
functions of Vbe. This also allows the user to obtain
the cutoff frequency using the low frequency approximation in TonyPlot
or using the extraction feature of DeckBuild. Currents, voltages, and AC
parameters are saved in a log file, and internal structure information
is saved for a bias condition (Vbe=Vce=0.95 V) where the cutoff frequency is
close to its maximum.  The calculation of s-parameters is specified on the
log statement with the s.param command.

At the end of the simulation,
{bold} extract
statements are used to determine the maximum 
cutoff frequency, the base bias, the input (base) capacitance, and the
transconductance - all at the bias of Vbe=Vce=1.0 V where the maximum cutoff
frequency was observed.

The structure plot, the Gummel plot, the AC current gain versus frequency, and S-parameters are then displayed using TonyPlot.

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.



{subsection} hbtex07.in : 3D SiGe HBT Example


Requires: Device 3D
{newline}
Minimum Versions: Atlas 5.24.1.R


This example demonstrates the use of Atlas 3D to create a hetero-junction
bipolar transistor.  The structure can be plotted using
{bold} TonyPlot3D.
  The combination of a hetero-junction device with a 3D structure requires the 
use of
{bold} Blaze 3D.
The band alignment is arranged such that all the SiGe band edge discontinuity
occurs at the valance band edge.  To correctly model abrupt band edge
discontinuities, a 10 Angstrom grid spacing is recommended at these junctions.
A careful study of the grid in 
{bold} TonyPlot3D
and in the input file will show how this stringent requirement can be met
without increasing the total number of grid points to an unacceptable level
in a 3D device.

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.



{subsection} hbtex08.in :InP/InGaAs/InP Double HBT with varying doping profile 

Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

In this example a DHBT structure based on the InP / InGaAs  material
system is constructed using Atlas.  The DHBT is then electrically tested,
and  properties  that  characterise  the  device's DC and high  frequency
performance  are calculated and presented.  The DC performance  is shown 
through a gummel plot, and the DC current gain is calculated using the 
functions property in TonyPlot. The AC performance is evaluated via 
the cutoff frequency  ft, as well as the  maximum  oscillation  frequency  
fmax. The cutoff  frequency  is  defined  as the
frequency  at  which  the  magnitude  of AC  current  gain ( i.e.  h21),
decreases  to unity.  It is  important  to note that the  transistor  is
connected in  common-emitter  configuration  for this  calculation.  The
maximum  oscillation  frequency  fmax  is the  frequency  at  which  the
unilateral power gain of the transistor  tends to unity.  The unilateral
power gain  effectively  represents the maximum power gain achievable by
the transistor. These properties can be improved though appropriate use
of  heterostructures,  stoichiometry  and  doping  to  lower  collective
resistance,  epitaxial  strain as well as several other properties, all
of which are incorporated within HBTs and indeed DHBTs offering superior performance to BJTs. 

The superior performance encountered with HBTs and DHBTs is mainly due to 
the presence of a quantum well in the emitter / base junction arising through 
the use of two    materials   of    different    band   gap.   In   this    
example InP / In(0.53)Ga(0.47)As  have been used.  The  quantum  well  
stops  back  injection  of holes  from the base into the  emitter  which
will reduce the base  current and  consequently  increase the
current  gain.  The quantum  well will also permit the base doping to be
increased  which will lower the resistance  encountered  within the base
and reduce the transit time for electrons thus increasing
frequency  performance.  By adding a second  heterostructure  within the
collector   /   base   region   (i.e.  In(0.53)Ga(0.47)As / InP)   epitaxial
relationships are improved throughout the structural growth with an
overall improvement in device performance. 

Another technique to improve a device's performance is to use a graded doping 
profile.  This will aid in  controlling  electric  fields  concomitant  with  
depletion regions and will improve breakdown characteristics. This example  
demonstrates  this ability by  importing  doping  profiles  previously  specified  in an ASCII text
editor.  These files are called upon during the  construction  stage and
the doping profiles will be replicated accordingly.  In this example the
files used are  
{bold}  hbtex08_n.dat 
and 
{bold}  hbtex08_p.dat 
for n and p type doping respectively.  The user can simply  create an ASCII text file  having two
columns.  The left column  specifies  the depth  location  and the right
column specifies the concentration at that location.

An example would be:

{bold} 0.0 1e16
{newline}
{bold} 1.0 1e20
{newline}
{bold} 1.001 0.0
{newline}
{bold} 2.0 0.0
{newline}
{bold}   ( Must put a carriage return here )
{newline}

As this is an ASCII file, a carriage  return  must be placed at the end of the
file. To use this file would require the commands:

doping (specify type) ascii infile=(filename)

It is also noted that interpolation is used between specified locations. 
Consequently the doping profile must be set to zero through certain 
locations if so desired. Otherwise an interpolated value will be used 
until the end of the device is encountered. This is demonstated in the 
above example.

The accuracy of the simulations is also improved by the use of Atlas-Interpreter 
mobility models for the materials.  The models are based on "Empirical low-field mobility 
model for III-V compounds applicable in device simulation codes", M. Sotoodeh, A. H. Khalid,
and A. A. Rezazadeh, J. Appl. Phys., 87, 2890 (2000).

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.





{section} HEMT : HEMT Application Examples


{subsection} hemtex01.in : User Model Development with the C-Interpreter


Requires: Blaze/C-Interpreter
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the use of the C-Interpreter to develop user
defined material parameters and models for AlGaAs/GaAs HEMT simulation. 
Here the interpreter is used to prototype a composition dependent electron
mobility model for AlGaAs. The interpreted function in this case corresponds
to the built-in model for AlGaAs. The two can be compared. The example
consists of the following parts:

{bullet} Construction of the device and the grid using Atlas syntax
{newline}
{bullet} Specification of material regions including a graded AlGaAs heterojunction
{newline}
{bullet} Definition of electrodes, doping, material and models parameters
{newline}
{bullet} Use of a C-Interpreter function for composition and doping dependent electron mobility 
{newline}
{bullet} Simulation of Id-Vds characteristic 
{newline}
{bullet} Display of the results in TonyPlot

In the first part of the input file the device is described using Atlas
syntax including mesh, regions and electrodes locations, and doping distribution.
The
{bold} region 
statements are used to define AlGaAs and GaAs regions. The Al composition
fraction (x.composition=0.3) and grading distance are defined here as well.

After the device description, the
{bold} material 
statement is used to specify some of the material parameters different from
the default values. These are electron and hole SRH lifetimes (capture
times) which apply to both GaAs and AlGaAs material regions. In the same 
statement we indicate that the low field electron mobility as a function of
composition and doping will be calculated using the C-Interpreter. The name of
the function and the name of the corresponding file in which this function is 
described are specified as a parameter
{bold} f.conmun=hemtex01_interp.lib 
in the
{bold} material 
statement.  Additionally, the 
{bold} alignment parameter is specified which defines the band offset between
the conduction and valance bands.  The value of 0.6 sets 60% of the 
step to the conduction band.

The
{bold} model 
statement is used to specify the following set of models: band-gap narrowing,
field dependent mobility, and Shockley-Read-Hall recombination. The two carrier
transport model is specified here by the parameter
{bold} carriers=2. 
The
{bold} contact 
statement is used to set the workfunction at the Schottky gate electrode.

The solution procedure begins from the initial solution at zero bias or
thermodynamic equilibrium. The structure of the device at zero bias is
displayed using TonyPlot. For the subsequent simulation, the combined
Gummel-Newton iteration method is specified in the
{bold} method 
statement. The 
{bold} output 
statement is used to include additional parameters in the output structure file:
conduction and valence band potentials, and electron and hole mobilities.
The gate bias is then ramped to -0.6V. For this gate bias the Id-Vd
characteristic is calculated by sweeping the drain voltage up to 5V. The results
of simulation are saved in the log file and then displayed using TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} hemtex02.in : Lattice Matched HEMT Breakdown Simulation

Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates simulation of avalanche breakdown in a single
quantum-well lattice matched AlGaAs/GaAs HEMT. It shows:

{bullet} Construction of the heterojunction structure using Atlas syntax
{newline}
{bullet} Material and models parameter specification 
{newline}
{bullet} Simulation of Id-Vds and breakdown characteristic 
{newline}
{bullet} Display of the results in TonyPlot

The device under consideration consists of the highly doped (1.e18/cm3)
AlGaAs layer with the Al composition fraction of 0.3, the GaAs channel
layer 250 A thick with the donor concentration of 1.e15 /cm3, and
AlGaAs buffer layer with the same doping. The parts of the channel
under the source and drain are heavily doped, and source and drain
electrodes are located vertically, touching the channel region. This technique 
accounts for the alloying of contact material and the tunneling of carriers 
through the heterojunction. The channel length is 0.5 micron.  

In the first part of the input file, the device is described using
the Atlas structural syntax. The description includes the mesh, regions
locations, electrodes locations, and doping distribution.
The
{bold} region 
statements are used to define the AlGaAs and GaAs regions. The Al
composition fraction (x.composition=0.3) is defined here as well. Note
that an artificial oxide layer (region num=4) is defined here providing
the possibility to specify AlGaAs surface states using the
{bold} interface 
statement.

After the device description, the first
{bold} material 
statement is used to specify the electron and hole SRH lifetimes
applied to both GaAs and AlGaAs materials. In the second
{bold} material 
statement the low field mobilities, electron affinity, and density of
states in the conduction band Nc are defined for AlGaAs. In this
example the band alignment is calculated  by using energy band gaps and
electron affinities of the materials forming heterojunctions. If not
explicitly specified in the
{bold} material
statements the default values of other material parameters are applied.

The
{bold} models 
statements are used to specify the following set of models : field
dependent mobility, and SRH. The two carrier transport model is
specified here as well (the default). In addition, the concentration dependent
mobility model is activated. 

In order to simulate avalanche breakdown the impact ionization-generation model
should be turned on. This is done using the 
{bold} impact selb 
statement in which the Selberherr impact ionization model is activated.
All basic impact ionization parameters are user-accessible and can be
modified by the user. As an example the appropriate set of parameters
is defined in this statement. The parameters apply to both GaAs and
AlGaAs materials.

The gate electrode in HEMT structures is of Schottky type. To indicate this
the 
{bold} contact 
statement is used to define the workfunction of the gate electrode,
which gives the Schottky barrier height of approximately 0.9V.

The initial solution is performed automatically if not specified.
The gate voltage is set to zero, the structure under zero bias is
displayed using TonyPlot, and the drain voltage is ramped up to 0.3V.
The solutions are obtained using the combined Gummel-Newton algorithm
specified in the statement
{bold}        method gummel newton.  
The algorithm implies that if the solution does not converge in the
course of the decoupled Gummel iterations, the program will
automatically switch over to the fully coupled Newton algorithm.

Next the drain voltage is ramped until the drain current reaches the
predefined value of 9.e-5 A/um well within the breakdown region,
using the 
{bold} compliance  
limits on the 
{solve} 
solve statement. These
calculations are performed using the Newton method :
{newline}
{bold}        method newton.  
{newline}
The results of the simulation are saved in the log file and the Id-Vds
breakdown characteristics are displayed using TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} hemtex03.in : AlGaAs/GaAs HEMT Id-Vgs and Id-Vds Characterization

Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates Id-Vds and Id-Vgs calculations in a single quantum-well 
AlGaAs/GaAs HEMT. It shows:

{bullet} Construction of the heterojunction structure using Atlas syntax
{newline}
{bullet} Material and models parameter specification 
{newline}
{bullet} Simulation of Id/Vds and Id/Vgs characteristics 
{newline}
{bullet} Display of the results in TonyPlot

The device under consideration is the same as in the previous example
in this section. The device geometry, mesh, regions, electrodes and
doping distribution
are described with the same sequence of statements as in the example above.
The same material parameters and physical models are applied except for the
impact ionization-generation model. Since the breakdown analysis is not the
goal of this example and the range of voltages applied are far away from
the breakdown region where the impact ionization effects become essential, the 
{bold} impact 
statement is excluded and no impact ionization-generation considered.
The contact and interface statements are a repeat of those from the previous example.


After the initial solution is obtained, the gate voltage is set to 0,
the structure under zero bias is displayed using TonyPlot, and the
Id-Vds characteristic is calculated. As in the previous example the
drain voltage is first ramped up to 0.3V. The solutions are obtained
using the combined Gummel-Newton algorithm specified in the
{bold} method gummel newton 
statement. The algorithm implies that if the solution does not converge
in the course of Gummel iterations, the program will automatically
switch over to the Newton algorithm.

Next the drain voltage is ramped up to 3V. This part of simulation is performed
using the Newton method:
{bold} method newton 
The results of simulation are saved in the log file and displayed using TonyPlot.

Simulation of the Id-Vgs characteristic is performed next. At the first stage the
solution for Vgs=-0.9V and Vds=0.5V is obtained. Next, the gate voltage
is ramped up to 0.6V with the step of 0.1V.

The results of simulation are again saved in a separate log file and displayed using TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} hemtex04.in : Energy Balance and Drift Diffusion Comparison

Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates Id-Vds calculations in single quantum-well
AlGaAs/GaAs HEMT using Energy Balance (EB) and Drift Diffusion (DD)
Models. It includes

{bullet} Construction of a heterojunction structure using Atlas syntax
{newline}
{bullet} Material parameter specification 
{newline}
{bullet} Physical model specification including the energy balance model
{newline}
{bullet} Simulation of Id-Vds characteristic with Vgs=0.0V 
{newline}
{bullet} Repeat simulation using drift-diffusion models for comparison
{newline}
{bullet} Display of combined results in TonyPlot

The example file consists of two Atlas runs. Both use the same device
structure defined in a similar manner to the previous two examples. The
first run uses energy balance models to simulate Id-Vds characteristics
and the second does the same electrical simulation using the classical
drift-diffusion model. The aim of the example is to compare the effects
of the different carrier transport models.

Energy balance models provide a more accurate description of physical
device effects, in particular the effects of velocity overshoot and
non-local impact ionization. These are not handled by the classical
drift-diffusion model. These two effects can be observed in sub-micron 
HEMT simulation.  This example concentrates on the velocity overshoot
effect in the GaAs-AlGaAs structure. Non-local impact ionization
effects can be seen in breakdown simulations. Since velocity overshoot
is not accounted for in the drift-diffusion model, the results from
simulations with this model will underestimate the current. This
discrepancy gets worse as the channel length decreases.

The sequence of simulation syntax is similar to the previous example. For energy
balance simulation, additional input parameters need to be defined in particular
carrier energy and mobility relaxation times. In these examples the
electron relaxation times taurel.el and taumob.el are defined in the
two separate
{bold} material
statements for the GaAs and AlGaAs materials, overriding the default values.
In the same statements the low field electron mobilities are specified for GaAs
and AlGaAs. The saturation velocity is also explicitly defined here for GaAs.
The
{bold} material 
statement for AlGaAs also contains the 
{bold} align 
parameter, which defines the portion of the energy band gap difference going
to the conduction band (60% in this example) at the GaAs-AlGaAs
heterojunction. If the
{bold} align 
parameter is present in the
{bold} material 
statement the energy band alignment is calculated
based on the value of this parameter rather than using electron
affinities of the materials forming the respective heterojunction.

Since HEMTs are majority carrier devices and the impact-ionization and breakdown
are not a subject of analysis here, the one carrier (electrons only)
transport model is used in both continuity and energy balance
equations. Thus the following three basic equations are solved in this
example to simulate the device characteristics: Poisson, electron
continuity and energy balance equations.
  
In the 
{bold} model 
statements the set of physical models used is specified: field
dependent mobility, and the one carrier transport model (carriers=1 electron). 
The solution of the energy balance equation for electrons is activated in
this statement using the parameter hcte.el.

The 
{bold} contact 
statement is used to specify the workfunction of the gate electrode, giving the 
Schottky barrier height of approximately 0.8V.

After the initial solution the gate voltage is set to 0, and the Id-Vds
characteristic is calculated. First the drain voltage is ramped up to
0.1V. The solutions are obtained using the combined Gummel-Newton block
algorithm specified in the following statement:

{bold}        method gummel block newton 

The algorithm implies that, if the solution does not converge in the course of
Gummel iterations, the program will automatically switch over to the
block algorithm where the Poisson and electron continuity equations are
solved by the  Newton algorithm with the frozen electron temperature,
and then the electron continuity equation and energy balance equation
are solved by the Newton algorithm. If the solution still does not
converge, the program will switch over to the fully coupled Newton
method.

Next the drain voltage is ramped up to 3V. This part of simulation is performed
using the Newton method:

{bold}        method newton 

The results of the simulation are saved in a log file to be displayed later
with the results of the DD simulation.

The second Atlas run repeats the first but uses the conventional one
carrier Drift Diffusion Model: Poisson's equation and the electron
continuity equation are solved self-consistently. The same set of
physical models is used, except the energy balance
equation. The latter is turned off by not indicating the hcte.el
parameter in the
{bold} models 
statement. The resulting Id-Vds characteristic is saved in a log file.
The statement
{bold} output con.band val.band e.velocity 
is used in both runs to save the conduction and valence band
potentials and the electron velocity information to the solution files.
Generating the solution files in the energy balance simulation and
selecting to plot them will show the velocity overshoot effect.

Results from two runs with the EB and DD models are compared by overlaying the two log files in TonyPlot.
 
To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} hemtex05.in : Recessed Gate Pseudomorphic HEMT DC Characterization

Requires: DevEdit/Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

In this example a pseudomorphic HEMT structure based on the
GaAs-AlGaAs-InGaAs-InP material system is constructed using DEVEDIT.
The structure is then passed to Atlas for electrical testing. The input
file consists of the following main portions:

{bullet} Construction of the device in DEVEDIT
{newline}
{bullet} Electrical simulation of a family of Id/Vds curves
{newline}
{bullet} Simulation of Id/Vgs characteristics
{newline}
{bullet} Basic parameter extraction


The first part of the input file constructs the HEMT geometry, material regions,
doping profiles, and electrodes in DEVEDIT. The structure considered is non-
planar with a non-rectangular recessed gate. This demonstrates the important
capability of DEVEDIT to generate arbitrarily shaped geometries. The device is
created in DEVEDIT by drawing the device regions in interactive mode and 
specifying 2D doping distributions. The device is based on a GaAs substrate. 
It employs a double channel HEMT concept where the InGaAs 
channel is sandwiched between two AlGaAs regions. The structure also employs
2 delta- (or pulse-) dopings above and below the channel in both AlGaAs regions.
These are modeled by narrow, 10 angstrom thick layers. The delta-doping
usually expressed in terms of planar concentration (cm-2)  must be 
recalculated into bulk doping (cm-3) given the thickness of the layers.

The delta-doped regions play an important role and are typical for
modern HEMT technologies. They are used as additional carrier
suppliers to the channel and for better control of the threshold
voltage and other device parameters. The source and drain cap regions
are made of GaAs. In practical applications the source and drain
contact alloys often penetrate deep into the structure well below the
channel. This is modeled by heavily doped areas under the source and
drain in which the vertical doping distribution is assumed to be
Gaussian, and the horizontal one is approximated by the complimentary
error function. The means and the set of functions for specifying
arbitrary 2D doping distributions are provided by the DEVEDIT. The
composition fractions of AlGaAs (0.22 for Al) and InGaAs (0.78 for Ga)
are specified in DEVEDIT as respective region attributes. The
mesh was generated automatically by specifying basic mesh constraints
and refining it along the x- and/or y-directions in the
important areas of the device. 

DEVEDIT then generates two types of files: a DEVEDIT input file and the
structure file. The first can be run in DeckBuild to produce the
corresponding structure file and is included here as the first part of
the input file. The second can be read in directly by Atlas in the MESH
statement. Note that the DEVEDIT input file can be edited as any other
input file. It is straightforward to change the type and value of the
doping associated with each region or resize regions.  More importantly,
DEVEDIT input files can also be read directly into the graphical user
interface of DEVEDIT to provide all the menu options used to construct
the structure.

The Atlas simulation begins from reading in the structure from
DEVEDIT.  DeckBuild provides autointerface between DEVEDIT and Atlas so
that the structure produced by DEVEDIT is transferred to Atlas without
having to indicate the MESH statement (commented out in this example).
Without the automatic DEVEDIT/Atlas interface under DeckBuild, the MESH
statement is needed to load the structure and the mesh.

The first active statements in the Atlas portion of the input file are
the contact, material and model  definitions. The gate workfunction is set up
in the 
{bold} contact 
statement. The material parameters and physical models are
specified in the 
{bold} material 
and 
{bold} models 
statements respectively on material-by-
material basis. Shockley-Read-Hall recombination and electric field
dependent mobility models are applied to all the material/regions. For
GaAs and AlGaAs regions doping dependent mobilities and recombination
parameters (lifetimes) are also applied. Conversely for InGaAs regions
low field mobilities and carrier lifetimes are explicitly specified in
the material statement. The band alignment
is defined here using the 
{bold} align 
parameter, which defines the portion of the energy
band gap difference applied to the conduction band. This parameter is given in the
{bold} material 
statements.

The simulation is first performed to obtain the condition of the structure
for 3 different gate biases, Vgs=0, -0.2, and -0.4 V, with the source and drain
grounded. The respective states of the structure are saved in three
separate solution files. Then the family of three Id-Vds
characteristics is calculated in three separate drain voltage sweeps
from 0 up to 2 V. Each series of the drain biasing is performed after loading 
the solutions with the respective gate bias.  The Id-Vds characteristics 
are saved in three separate log files. The final conditions of the 
structure with 2 V on the drain are also saved in separate solution files.
The zero bias condition is loaded again and the Id-Vgs characteristic is calculated.

At the end of simulation, parameter extraction statements are used to extract the
following parameters using the 
{bold} extract 
feature of DeckBuild:

{bullet} Threshold voltage
{newline}
{bullet} Maximum saturation current (Idss)
{newline}
{bullet} Gate voltage at Id=0.3*Idss 

The results are also displayed using TonyPlot:

{bullet} Id/Vds characteristics
{newline}
{bullet} Id/Vgs characteristic 
{newline}

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} hemtex06.in : PHEMT High Frequency Analysis

Requires: DevEdit/Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R


{bullet} AC parameters as a function of the gate bias
{newline}
{bullet} Frequency domain AC calculation
{newline}
{bullet} Calculation of s-parameters


This example is based on the previous example (see that text for details on
the structure).

Once the structure is loaded into BLAZE, a small signal AC perturbation
is applied at a frequency of 1 MHz to calculate the AC parameters
(conductances and capacitances) as functions of Vgs. This also allows
the user to obtain the cutoff frequency using the low frequency
approximation using TonyPlot or using the extraction feature of
DeckBuild. Currents, voltages, and AC parameters are saved in the log
file, and internal structure information is saved  in a solution file
for the final bias condition of Vgs=0V, Vds=2 V.

The next step is a full frequency domain AC simulation when the Y parameter
matrix (conductances and capacitances) are calculated as functions of frequency
from 10 Hz up to 50 GHz. These results are stored in a log file. Additionally,
with the specification of
{bold} s.param 
on the log statement, the s-parameters are stored to the file.

At the end of simulation, parameter extraction statements are used to extract the
following parameters using the 
{bold} extract 
feature of DeckBuild:

{bullet} Maximum gate-source capacitance
{newline}
{bullet} Gate-source capacitance at Vgs=0
{newline}
{bullet} Maximum cutoff frequency
{newline}
{bullet} Cutoff frequency at Vgs=0
{newline}
{bullet} Maximum AC current gain f=1MHz
{newline}
{bullet} AC current gain at Vgs=0 f=1MHz
{newline}

The results are also displayed using TonyPlot:

{bullet} Transconductance versus gate bias characteristic
{newline}
{bullet} s-parameters: S12 & S21 in polar coordinates
{newline}
{bullet} s-parameters: S11 & S22 on a Smith Chart

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{section} GANFET : GANFET Application Examples 


{subsection} ganfetex01.in : Polarization Charge Analysis


Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the interaction between polarization charges,
surface states and cap layer thickness in AlGaN/GaN HFETs.

This example was the basis for the Simulation Standard article
"Simulating the Source of Polarization Charge in AlGaN/GaN HFETs"
Simulation Standard, V. 15, N. 8, Aug. 2006, Silvaco International.

This article and example are based on the work of:
J. P. Ibbetson, et. al., Appl. Phys. Lett. 77, 250 (2000).

The input deck ganfetex01.in uses dbinternal to obtain the channel
charge density for each of the saved structure files.  It does this using
the file ganfetex01_aux.in. The advantage of using dbinternal is that the
data file containing the charge densities can be plotted using
TonyPlot. These charge densities are plotted against the cap layer thickness.

The input deck containing the actual description of the devices is 
contained in ganfetex01_aux.in.

The Atlas specification consists of the following parts:

{bullet} Construction of the device and the grid using Atlas syntax
{newline}
{bullet} Specification of material regions
{newline}
{bullet} Definition of electrodes and doping
{newline}
{bullet} Material, models, interface charge and interface trap parameters
{newline}
{bullet} Simulation of Id-Vds characteristic 
{newline}

In the first part of the input file the device is described using Atlas
syntax including mesh, regions and electrodes locations, and doping distribution.
The
{bold} region 
statements are used to define AlGaN and GaN regions. The Al composition
fraction (x.composition=0.34)is defined here as well.
After the device description, the
{bold} material 
statement is used to specify some of the material parameters different from
the default values. Whenever any of the default values of material parameters
or models are questioned you should specify the parameter values manually.

The
{bold} model 
statement is used to specify the following set of models: field dependent 
mobility, and Shockley-Read-Hall recombination, Fermi-Dirac statistics, and
incomplete ionization.

Next the interface characteristics are specified.  In particular the
polarization charges and surface traps are specified.  We could have
used the built-in polarization models that calculate the polarization 
charges as a function of composition, strain and lattice constant for
the various materials, but in this case we are specifying polarization
charges directly to simplify calibration to the data presented in the paper.

Next the 
{bold} solve 
statement is used to obtain a zero biassed solution.  The
{bold} save 
statement is used to save this solution for subsequent examination in
TonyPlot.  TonyPlot is used to look at the channel electron
charge as a function of cap layer thicknress.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} ganfetex02.in : GaN HEMT Breakdown

Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates simulation of avalanche breakdown an
AlGaN/GaN HEMT. It

This example is based on the paper:

Karmalkar and Mishra "Enhancement of Breakdown Voltage in AlGaN/GaN
High Electron Mobility Transistors Using a Field Plate", ED 48, No. 8,
pp 1515-1521,  August 2001.

At the outermost level, the simulation uses the DeckBuild looping and 
variable assignment capabilities of LOOP, L.END and SET.   Near the
end of the input deck, the simulation again uses the built-in capabilities
of DeckBuild to perform complex parameter extraction using the EXTRACT
statements.

This Atlas part of the example demonstrates:

{bullet} Construction of the heterojunction structure using Atlas syntax
{newline}
{bullet} Material and models parameter specification 
{newline}
{bullet} Simulation of Id-Vds and breakdown characteristic 
{newline}
{bullet} Display of the results in TonyPlot

The device under consideration consists of a simple 0.4 micron gate length
GaN HEMT augmented with a field plate used to increase the breakdown
voltage.  This simulation loops on increasing field plate lengths to 
examine the relationship between field plate geometry and breakdown
voltage.  

In the first part of the input file, the device is described using
the Atlas structural syntax. The description includes the mesh, regions
locations, electrodes locations, and doping distribution.
The
{bold} region 
statements are used to define the AlGaN and GaN regions. The Al
composition fraction (x.composition=0.295) is defined here as well. 

After the device description, 
{bold} material 
statement are used to define the characteristics of the various materials
used in the simulation.

The
{bold} models 
statements are used to specify the following set of models : field
dependent mobility, SRH recombination  and Fermi-Dirac statistics.

In order to simulate avalanche breakdown, the impact ionization-generation model
should be turned on. This is done using the 
{bold} impact selb 
statement in which the Selberherr impact ionization model is activated.
All basic impact ionization parameters are user-accessible and can be
modified by the user.

The gate electrode in HEMT structures is a Schottky contact. This is specified
by using the 
{bold} contact 
statement to define the workfunction of the gate electrode.

Here the 
{bold} beam 
statement is used to specify an optical source of carrier pair generation
in addition to the thermal generation provided by SRH.  This is generally a
good strategy for analyzing breakdown especially in wide bandgap materials
or at low temperatures to improve convergence.  This is not recommended when
estimating sub-breakdown diode leakage currents though.

Next the drain voltage is ramped to 1200 volts.  At that point the 
drain boundary is changed to a current boundary using the 
{bold} contact current 
statement.

This is performed to improve convergence up throught the breakdown portion
of the curve where current is changing much faster than voltage.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} ganfetex03.in : AlGaN/GaN HEMT Id-Vgs and Id-Vds Characterization

Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates Id-Vds and Id-Vgs calculations in an
AlGaN/GaN HEMT. 

This example demonstrates:

{bullet} Construction of the heterojunction structure using Atlas syntax
{newline}
{bullet} Material and models parameter specification 
{newline}
{bullet} Simulation of Id/Vds and Id/Vgs characteristics 
{newline}
{bullet} Display of the results in TonyPlot

The device under consideration is a simple AlGaN/GaN HEMT. The main
concept here is that the polarization charge is calculated using the 
built-in models as specified by the 
{bold} polarization 
parameter on the
{bold} model 
statement.

After the initial solution is obtained the gate voltage is ramped to -10 V,
then the IdVg characteristic is extracted from Vg=-10 to Vg=1.0 V.

A family of drain current characteristics are then simulated with
and without lattice heating taken into account by ramping the drain 
from 0 to 15 V at various gate voltages. 

Finally, the family of curves is plotted using the TonyPlot tool.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} ganfetex04.in : InGaN/AlGaN/GaN HEMT Polarization Charge Calculation

Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example illustrates the automatic calculation of polarization charges
for the AlGaN/InGaN material system.. 

This example demonstrates the calculation of polarization
charge as a function of material composition fraction for InGaN and 
AlGaN.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} ganfetex05.in : Intrinsic Stress Effect on AlGaN/GaN HEMT IdVg Characteristic

Requires: SSuprem 4/Victory Stress/Blaze 
{newline}
Minimum Versions: Athena 5.22.3.R, Victory Stress 2.4.2.R, Atlas 5.24.1.R

This example demonstrates:

{bullet} Construction of the heterojunction structure using Athena syntax
{newline}
{bullet} Stress simulation, Material and models parameter specification 
{newline}
{bullet} Simulation of Id/Vgs characteristics 
{newline}
{bullet} Display of the results in TonyPlot

The device under consideration is a simple AlGaN/GaN HEMT. The 2D structure is 
obtain by Athena and the stress distribution is simulated by VICTORYSTRESS. 
This example produces stress distributions via the stress-liner made of nitride
(tensile or compressive). Note that the stressor in this example is used to 
illustrate strain polarization, on top of lattice and spontaneous polarization.

The polarization model that supports dependency on loaded strain tensor 
has been used in this example. The model is enabled by the 
{bold} TEN.PIEZO 
flag of the 
{bold} MODELS 
statement.  

The main concept of GaN based power devices is to use epitaxial strain to create
2DEG. The polarization model that supports epitaxial strain due to lattice 
mismatch is enabled by the
{bold} CALC.STRAIN 
flag on the 
{bold} MODEL 
statement. 

When both models are set in the simulation both the imported strain and the 
lattice mismatch calculation are accounted for.  

The lattice and imported strain dependent components of polarization can 
be independently scaled using the scale factors 
{bold} TENSO.SCALE 
and
{bold} PIEZO.SCALE 
on the 
{bold} MODEL 
statement. By default these are set to 1.0.

When enabling the
{bold} TEN.PIEZO 
flag spontaneous polarization is automatically included in the calculation. 
The size of the spontaneous component can be scaled using the
{bold} PSP.SCALE 
parameter of the
{bold} MODELS 
statement.

After the initial solution is obtained the drain voltage is ramped to 1 V,
then the IdVg characteristic is extracted from Vg=-5 to Vg=1.0 V.

The effect of strain is seen on IdVg characteristic. For illustration purpose 
we combined, in this example, different intrinsic stress (compressive or tensile)
leading to different stress distribution and sign in the channel and the source 
and drain region. As a result IdVg curves change accordingly.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} ganfetex06.in : A Normally-off GaN MISFET with High Vth uniformity  

Requires: Blaze 
{newline}
Minimum Versions: Atlas 5.24.1.R
    

This example demonstrates the simulation of a GaN metal-insulator-semiconductor 
field effect transistor (MISFET) with Piezo Neutralization Technique (PNT). 

This example is based on the work of:

Ota, K. et. al. "A Normally-off GaN FET with High Threshold Voltage 
Uniformity Using A Novel Piezo Neutralization Technique", IEDM 2009, pp. 153-156.

The features of the PNT structure are described below and simulated with Blaze
                                                     
The first feature is an AlGaN buffer layer to realize a
normally-off operation. The polarization charges at the interface 
between the AlGaN buffer and the GaN channel act as virtual p-type
doping and contribute to simustaneously increase Vt and charge
density in the channel.The band diagram and IdVg simulations 
demonstrate the impact of the buffer Al-concentration on the 
electron-channel energy beneath the gate and Vth respectively

The second is an Al0.07Ga0.93N PNT layer having an identical 
Al composition with the buffer layer to realize high Vth uniformity.
Since PNT and buffer layers have an identical Al mole fraction, the polarization charges formed between these layers are completely 
canceled and hence, a flat band condition occurs throughout the PNT 
layer. Vth dependence on the AlGaN layer thickness under the gate
electrode was simulated. For the GaN FETs with the PNT structure, 
the Vth is not affected by the variation of AlGaN thickness whereas 
it varies for the conventional Al0.15Ga0.85N/GaN single heterojunction 
FETs.    

The last is the 2nd supply layer at the region outside the gate 
electrode to reduce on-resistance of the GaN FET. Since the 2nd 
supply layer is consisted of AlGaN with higher Al composition than
that for the 1st supply layer, a large amount of 2DEG is produced 
both in the channel layer and the PNT layer when enabling the
{bold} TEN.PIEZO 
model of the
{bold} MODELS 
statement. This polarization model accounts for the fact that a 
layer may not have homogenous strain due to e.g. recessed gates 
so polarization charge is calculated locally. 
  

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

              
{subsection} ganfetex07.in : A Normally-off GaN HFET with p-type GaN gate  

Requires: Blaze 
{newline}
Minimum Versions: Atlas 5.24.1.R
    

This example demonstrates how to simulate a GaN HFET with p-type GaN gate
and is based on the following paper: 

"Normally-off AlGaN/GaN HEFT with p-type GaN Gate and AlGaN Buffer"

O. Hilt, A. Knauer, F. Brunner, E. Bahat-Treidel and J. Würfl
Ferdinand-Braun-Institut, Leibniz Institut fuer Hoechstfrequenztechnik
Gustav-Kirchhoff-Strasse 4, 12489 Berlin, Germany.
Proceedings of The 22nd International Symposium on Power Semiconductor 
Devices & ICs, Hiroshima

While a Schottky-type metal on the AlGaN barrier acts as gate for normally-on 
HEMTs, a p-type doped semiconductor as gate is able to deplete the transistor 
channel when unbiased, thus yielding a normally-off device. The simulation of
the transfert characteristic reveals a Vt of around 1.25V.

The sub-threshold leakage current drops significantly immediately below the
threshold voltage, however the drop slows down to around 4uA/mm at VGS=0V.
The leakage current is determined by traps. 

The gate current in the on-state (defined as VGS=5V) is around 3uA/mm and 
thus around 5 orders of magnitude below the drain current. In order to ensure
that the charge are present at the interface between p-type GaN, AlGaN and Nitride the
{bold} PCH.INS REGION=5 
parameters of the
{bold} MODELS 
statement are used. 

The output characteristic shows a negative differential resistance due
to lattice heating and simulated by solving the lattice heating equation 
set by the
{bold} LAT.TEMP 
parameter of the
{bold} MODELS 
statement. The maximum drain current is about 0.4A/mm.

The Breakdown Voltage of thisdevice is 870V, and the leakage current 
is controlled by the traps. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.
     
{subsection} ganfetex08.in : Enhancement-Mode N-Polar GaN MISFETs  

Requires: Blaze 
{newline}
Minimum Versions: Atlas 5.24.1.R
    

This example demonstrates how to simulate an Enhancement-Mode N-Polar GaN MISFETs
based on the following paper: 

"Enhancement-Mode N -Polar GaN MISFETs With Self_Aligned Source/Drain Regrowth"
Uttam Singisetti, et al., IEEE Electron De3vice Letters. Vol,32, NO. 2 feb 2011

There is a growing interest in high performance enhancement mode GaN channel
devices because of single voltage operation and simpler circuit topologies. The
advantages of the enhancement mode GaN FETs fabricated on N-polar GaN include 
reduced source/drain access resistance and wide bandgap barrier layers 
used for polarization-induced field allowing 2DEG depletion under the channel.
Removal of the AlN layer from the access region recovers the 2DEG induced by 
the bottom AlN layer. Plots of the bang diagram under the gate and under the 
nitride sidewall reveal indeed 2DEG under the access region but not under the
gate.

Since in this structure N-Polar GaN (instead of Ga-polar GaN) was used the
parameter 
{bold} polar.scale 
was set to
{bold} -1 

Charge was also set at the interface between the nitride and AlN layer under
the gate. To do so the model
{bold} pch.ins 
was set for region=2 (i.e capping AlN layer)

The simulation of the transfert characteristic reveals a Vt of around 1V 
and a maximum Ids of around 0.7A/mm at Vgs=5V.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.
     


{subsection} ganfetex09.in : General Current Collapse and Recovery Phenomenon

Requires: Blaze 
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates simulation of the "Current Collapse" and "Current
Recovery" phenomenon resulting from population and de-population of 
both un-intentional insulator interface traps and intentional iron (Fe)
traps near and under the gate of the GaN FET as a result of Gate to Drain 
Electric Fields.

The device structure in this example is based on work by Daniel Balaz from 
his PhD Thesis from University of Glasgow in 2011 entitled "Current collapse
and device degradation in AlGaN/GaN heterostructure field effect transistors"

The structure is created using Atlas syntax and the spontaneous and piezo-
electric charge concentrations are automatically calculated using the
"substrate, polarization and calc.strain" parameters in the region statements.

Substrate leakage current is controlled by a graduated concentration of 
deep level iron (Fe) acceptor traps located 1eV below the conduction band 
edge using the doping statement and the key parameter "trap".

The insulator interface traps are created using the "inttrap" statement.  
For analytical simplicity, only a single level interface acceptor trap, 
located 0.8eV below the conduction band edge was used.
The areal density of the interface traps used in this example, was 2e12/cm2.
Using a different energy location in the bandgap for the intentional Fe
doping and the un-intentional insulator interface traps, allowed the
contribution from both types of trap to be distinguished on the resulting
transient I-V curves.

The device is first biased with zero volts on the gate and 5 volts 
on the drain. After 1 mili-second at this bias, the device is field stressed
for only one further milli-second at 25 volts on the drain 
and -4 volts on the gate. After this short bias stress, 
the device was returned to it's original bias of 
zero volts on the gate and 5 volts on the drain.

After only one milli-second of bias stress, the drain current is 
significantly reduced demonstrating the currnet collapse phenomenon.
For completeness, the unstressed bias remained on the device until the traps
became de-populated with electrons and the drain current returned to it's
original value.  Interestingly, it takes over one week for the device to 
recover !  (6e5 seconds).  This very long recovery time may be incorrectly 
interpreted as device degredation from field induced traps which is an
irreversible effect resulting from electric field induced 
reverse piezo-electric stress.

It will be seen from the transient recovery curve that there are two recovery
'bumps".  The first current recovery "bump" at a time of around 30 seconds,
is from the re-population of the interface traps and the main recovery at
approximately 1e5 seconds, is from the intentionally doped bulk iron (Fe) 
traps.  Obviously a wide distribution of insulastor interface trap energies
will "smear out" this initial recovery bump making it difficult to 
distinguish this individual contribution from the bulk iron traps.  That is
why a single interface trap energy was selected for this example to clarify
the effect on the current recovery curve.

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} ganfetex10.in : Fe Bulk Doping Related Current Collapse Phenomenon

Requires: Blaze 
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates simulation of the "Current Collapse" and "Current
Recovery" phenomenon resulting from population and de-population of 
Intentional Iron (Fe) Doping Traps under the gate of a GaN FET as a result 
of Gate to Drain Electric Fields.

Many publications suggest that un-intentional surface traps are the main cause
of the GaN current collapse phenomenon.  In this example, we show that 
sometimes this is not actually the case.  Current collapse in this device, is
mostly caused by intentional iron doping, whose main purpose is to create a 
semi-insulating buried layer to reduce the buried layer source to drain 
leakage path.

The device structure in this example is based on work by Daniel Balaz from his
PhD Thesis from University of Glasgow in 2011 entitled "Current collapse and 
device degradation in AlGaN/GaN heterostructure field effect transistors"

The structure is created using Atlas syntax and the spontaneous and piezo-
electric charge concentrations are automatically calculated using the
"substrate, polarization and calc.strain" parameters in the region statements.

Substrate leakage current is controlled by a graduated concentration of 
deep level iron acceptor traps located 1eV below the conduction band edge
using the doping statement and the key parameter "trap".

The device is first biased with zero volts on the gate and 5 volts 
on the drain. After 1 mili-second at this bias, the device is field stressed
for only one further milli-second at 25 volts on the drain 
and -4 volts on the gate. After this short bias stress, 
the device was returned to it's original bias of 
zero volts on the gate and 5 volts on the drain.
After only one milli-second of bias stress, the drain current is 
significantly reduced demonstrating the currnet collapse phenomenon.

A comparason structure file plot of the pre and post stress ionized Fe trap
density, shows the cause of the current collapse is actually the change in
charge state of the Fe doping deep in the substrate under the gate and
also on the drain side between the gate and drain contacts.

For completeness, the unstressed bias remained on the device until the traps
became de-populated with electrons and the drain current returned to it's
original value.  Interestingly, it takes over one week for the device to 
recover !  (6e5 seconds).  This very long recovery time may be incorrectly 
interpreted as device degredation from field induced traps which is an
irreversible effect resulting from electric field induced 
reverse piezo-electric stress.  

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} ganfetex11.in : Large Signal Output Power Analysis


Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example describes how to simulate typical 10 GHz large signal measured 
performance quantities related to power output, such as power out versus 
power in, power gain and amplifier efficiency as the device is over-driven 
into high distortion.  The example also plots the output signal shape versus
time for each of the ten input signal levels simulated.

Ten large signal input amplitudes are defined using
{bold} WAVEFORM 
statements.  Each of these waveforms are applied to the gate in order of
increasing amplitude by using the
{bold} LOOP 
statements. After each waveform simulation is complete, a number of
large signal parameters are calculated using a number of
{bold} EXTRACT 
statments.

First the peak input and output voltages are extracted, followed by the exact
times at which these peak voltages occurred.  Then the input and output 
currents are extracted at the same times as the peak voltages occur.  It is
important to extract the currents at the same time as the peak voltages in
order to take account of the phase between current and voltage, so that the
correct power values can be calculated.  For example, if the current is zero
at the time the peak output voltage occurs, the calculated power is correctly
calculated to be also zero, since in this case the output signal would be 
purely reactive. 

After each waveform simulation, all the calculated quantities are entered into
a data file format using
{bold} SYSTEM 
statements.  At the end of the last simulation, the tonyplot format data file
is complete and the results are displayed as a number of plots.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} ganfetex12.in : Normally-off AlGaN/GaN Transistor with Conductivity Modulation

Requires: Blaze 
{newline}
Minimum Versions: Atlas 5.24.1.R

The device structure in this example is based on the work from Yasuhiro Uemoto 
published at IEDM 2006 "A Normally-off AlGaN/GaN Transistor with Ron=2.6mOhmcm2
and BVds=640V Using Conductivity Modulation"

This example demonstrates simulation of a normally-off AlGaN/GaN transistor 
with conductivity modulation resulting from hole injection from a p-AlGaN 
gate to the AlGaN/GaN heterojunction. The p-AlGaN gate allows normally-off
operation. 

When the gate voltage increases and reaches the built-in pn junction
voltage at the gate (around 3.5V here) hole starts to inject into the channel 
and generate the equal number of electrons increasing the 2DEG. Electrons with
high mobility will reach the drain under the effect of the electric field 
whereas the hole will stay since their mobility is much lower than the 
electron. The current is thus modulated by the number of holes injected.
It is also interesting to notice that this device exhibit a double peak
in the transconductance curve a second proof of hole injection.

Electrons injection from the channel to the gate is limited by the AlGaN/GaN 
heterojunction. As a consequence no current offset is observed at zero drain 
since gate current is very low. 

This device exhibit a threshold voltage around 1V, a maximum drain current at
vd=10V and Vg=5V of 200mA/mm and a breakdown voltage of 640V.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} ganfetex13.in : 3D AlGaN/GaN HEMT Including Intrinsic Stress Effect  

Requires: Victory Stress/Blaze 
{newline}
Minimum Versions: Victory Stress 2.4.2.R, Atlas 5.24.1.R

This example demonstrates:

{bullet} Construction of the 3D heterojunction structure
{newline}
{bullet} 3D Stress simulation, Material and models parameter specification 
{newline}
{bullet} 3D Simulation of Id/Vgs characteristics and comparison with 2D for validation


The device under consideration is a 3D AlGaN/GaN HEMT. The 2D structure is first
obtained by Athena and then extruded in 3D using DEVEDIT. This is in fact the structure
created in ganfetex05.  3D stress distribution is simulated by VICTORYSTRESS. 
This example produces stress distributions via the stress-liner made of nitride.
Note that the stressor in this example is used to illustrate strain polarization, 
on top of lattice and spontaneous polarization.

The polarization model that supports dependency on loaded strain tensor 
has been used in this example. The model is enabled by the 
{bold} TEN.PIEZO 
flag of the 
{bold} MODELS 
statement.  

The main concept of GaN based power devices is to use epitaxial strain to create
2DEG. The polarization model that supports epitaxial strain due to lattice 
mismatch is enabled by the
{bold} CALC.STRAIN 
flag on the 
{bold} MODEL 
statement. 

When both models are set in the simulation both the imported strain and the 
lattice mismatch calculation are accounted for.  

The lattice and imported strain dependent components of polarization can 
be independently scaled using the scale factors 
{bold} TENSO.SCALE 
and
{bold} PIEZO.SCALE 
on the 
{bold} MODEL 
statement. 

When enabling the
{bold} TEN.PIEZO 
flag spontaneous polarization is automatically included in the calculation. 
The size of the spontaneous component can be scaled using the
{bold} PSP.SCALE 
parameter of the
{bold} MODELS 
statement.

After the initial solution is obtained the drain voltage is ramped to 1 V,
then the IdVg characteristic is extracted from Vg=-8 to Vg=1.0 V.

The effect of strain is seen on IdVg characteristic. Overlay of 2D simulation
results with 3D simulation results obtained with width=1 validates our 3D
implementation.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} ganfetex14.in : GaN HEMT Thermal Optimization using Flip Chip structure   

Requires: Blaze 
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates two-dimensional electro-thermal simulations with heat sink structures.

Although the superiority of GaN HFET device characteristics has been demonstrated, the self
heating effect has hindered the production of high power and high speed GaN-based switching 
devices. This effect can be significantly reduced by the cost effective heat-sink approach. 
in this EXAMPLE, in order to understand and control the self heating effect, GaN HFET with 
flip chip concept is simulated, and device characteristics  are compared versus normal 
structure using Atlas.

For HFETs, the GaN/AlGaN epitaxial layers have been grown on either sapphire or SiC substrates.
Although sapphire has the advantage of lower cost and availability in larger  wafer sizes, its
poor thermal conductivity (0.3 W/cm-K) limits the achievable powers due  to severe self-heating.
The self heating effect can be significantly reduced by flip-chip mounting the devices 
onto highly conducting substrates such as AlN (1.8 W/cm-K).

The typical GaN HFET flip chip structure in this example is a Al0.25Ga0.75 N-GaN HFET on a 
sapphire substrate. The structure consists of an AlN layer as a heat sink, a 2.7nm undoped
AlGaN layer, and 2 GaN layers which includes 20nm doped 1e15 GaN and 1um undoped GaN.

The self-heating is a local increase of crystal temperature due to dissipated Joule electric 
power, this effect can significantly reduce the electron mobility and degrade device performance.

DC, Transient and AC simulations are done and compare with and without the flip chip
structure. As expected the performance of the device is better when lattice temperature is reduced. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} ganfetex15.in : GaN HEMT BV versus Gate to Drain distance   

Requires: Blaze 
{newline}
Minimum Versions: Atlas 5.24.1.R


This example demonstrates the influence of the Gate to Drain distance on the
breakdown voltage with and without silicon substrate. This example is based on 
the following reference

Experimental and simulation study of breakdown voltage enhancement of AlGaN/gaN 
heterostructures by Si substrate removal. D.Visalli et al Apl. Phys. Lett. 97, 113501 2010.

The structure consists of 20nm AlGaN with xcomp=0.2 and 1um GaN buffer layer. 
Donor and acceptor traps are included in the simulation. Gaussian profile 
acceptor traps are used with a peak concentration close to the bottom of the
buffer layer to mimic the fact that the material quality improves toward
the surface of the device. 

Donor Interface traps at the AlGaN/Nitride interface and acceptor interface
traps at the GaN/Silicon interface are also included during the simulation.

Forward charateristic simulation reveals a threshold voltage of around -2V.
Slow transient simulation is used to simulate the breakdown voltage curve.

The deck is parametrized so that we can make variation of the distance between
gate and drain (LGD). Deckbuild DoE capability is used to automate simulations
of BV versus LGD with and without substrate.

We can observe in tonyplot an almost linear increase of BV versus LGD when silicon
substrate is not present. An increase of the gate current is observed near breakdown
and the value is of the same order as the drain current. This result indicates
that BV is defined by an avalanche phenomenon between the gate and the drain.

BV does not depend significantly on LGD when silicon substrate is present due to 
charge accumulation at the GaN/Silicon interface, related to the presence of interface
traps, which screen the electric field. During the simulation and for comparison
purpose, a resistance is added to the substrate so that the current leakage through
the substrate is reduced. Note that if no resistance is added to the substrate
an increase of the substrate current is observed near breakdown and the value is
of the same order as the drain current. This result indicates that BV is defined 
by an avalanche phenomenon between the gate and the substrate in this case.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} ganfetex16.in : GaN Super Heterojunction Field Effect Transistor 

Requires: Blaze 
{newline}
Minimum Versions: Atlas 5.24.1.R

Field plate (FP) technologies are generally used in order to manage surface electric 
field distribution of GaN HEMTs. Recently, GaN Super Heterojunction Field Effect 
Transistors (Super HFETs) based on the polarization junction (PJ) concept have been 
demonstrated [1, 2]. This concept is based on the compensation of positive and negative
polarization charges at heterointerfaces such as AlGaN/GaN to achieve similar effect 
to RESURF or Super Junction (SJ) in silicon devices. In this example, we will 
demonstrate device simulation of GaN Super HFETs in comparison with the experimental 
data based on [1, 2].

The Super HFET structure consists of an undoped double-hetero GaN/AlGaN/GaN structure 
with a p-GaN cap layer. The feature of the Super HFET structure is the presence of 
the 2-D hole gas (2DHG) induced by negative polarization charge at the upper GaN/AlGaN 
heterointerface as well as the 2-D electron gas (2DEG) at the lower AlGaN/GaN heterointerface. 
The computation of 2DEG and 2DHG due to polarization effect was performed automatically 
during the simulation with our built-in model and can be seen in tonyplot.

Performance of GaN device and convergence can be significantly influenced by the presence
of defects. We introduced bulk and interface traps in the simulation. Threshold voltage 
and substrate leakage current are controlled by a concentration of acceptor and donor 
traps in the GaN buffer layer, respectively. Moreover, we put the interface traps to 
represent Fermi level pinning at the bottom of the GaN buffer. This assumption is properly 
valid because an actual GaN epitaxial layer has quite many defects around the interface 
with the substrate. It should be noticed that even with traps and a floating undoped-GaN 
buffer region convergence is very ggod.

The simulation results of the Id-Vg and Id-Vd characteristics can be seen in tonyplot.
Very good agreement between simulations and experiments were obtained.

Breakdown characteristics and impact ionization rate distribution is also shown in tonyplot
and were simulated by using slow transient simulation. An increase of the gate current 
(including the base current) is observed near breakdown and the value is of the same order
as the drain current. In addition, it should be noticed that impact ionization occurs near 
the drain-side edge of p-GaN region. These results indicate that breakdown voltage is 
dominated by the hole current into the base electrode through the p-GaN layer.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

References:

[1]. A. Nakajima, Y. Sumida, M. H. Dhyani, H. Kawai, and E. M. S. Narayanan,
"GaN-based super heterojunction field effect transistors using the polarization junction concept "
EEE Electron Device Lett., vol. 32, no. 4, p.p. 542-544, Apr. 2011.

[2]. A. Nakajima, Y. Sumida, M. H. Dhyani, H. Kawai, and E. M. S. Narayanan,
"High density 2-D hole gas induced by negative polarization at GaN/AlGaN heterointerface "
Appl. Phys. Express, vol. 3, no. 12, p. 121004, Dec. 2010.


{subsection} ganfetex17.in : HEMT: AlGaN/GaN Electro-Thermal simulation

Requires: Victory Device
{newline}
Minimum Versions: Victory Device 1.10.2.R

This example demonstrates Id-Vds and Id-Vgs simulations for a 2D and 3D
AlGaN/GaN HEMT. 

This example demonstrates:

{bullet} Construction of the heterojunction structure using Victory Device syntax
{newline}
{bullet} Material and models parameter specification 
{newline}
{bullet} Simulation of Id/Vds and Id/Vgs characteristics 
{newline}
{bullet} Display of the results in TonyPlot and TonyPlot 3D


By default Victory Device run on just one processor.
To ensure better perfomance on your computer the following simulation condition
{bold} simflags="-P all" 
could be specidied in the 
{bold} go 
line starting Victory Device. This means that all processors available will be used.
If you want to use a smaller number of processors you can substitute "all" with a desired number, e.g.
{bold} simflags="-P 4".

The device under consideration is a AlGaN/GaN HEMT. The main concept here 
is that the polarization charge is calculated using the 
built-in models as specified by the 
{bold} POLARIZATION 
parameter on the
{bold} MODEL 
statement.

After the initial solution is obtained, the gate voltage is ramped from 0V 
to -7.6 V to get the IdVg characteristic at Vd=1 V.

A family of drain current characteristics are then simulated with
lattice heating taken into account by ramping the drain from 0 to 15 V 
at various gate voltages. 

Since the width of the 3D device is set to 1um a direct comparison with 2D
results is possible for validation purpose.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} ganfetex18.in : Polarization Charge Analysis

Requires: Victory Device
{newline}
Minimum Versions: Victory Device 1.10.2.R

This example demonstrates the interaction between polarization charges,
surface states, cap layer thickness and Al composition in AlGaN/GaN HFETs.

By default Victory Device run on just one processor.
To ensure better perfomance on your computer the following simulation condition
{bold} simflags="-P all" 
could be specidied in the 
{bold} go 
line starting Victory Device. This means that all processors available will be used.
If you want to use a smaller number of processors you can substitute "all" with a desired number, e.g.
{bold} simflags="-P 4".

The input deck vdex06.in uses dbinternal to obtain the channel charge density 
(i.e 2DEG) for each of the saved structure files.  It does this using the file 
vdex06_aux_0.in and vdex06_aux_1.in. The advantage of using dbinternal is that
the data file containing the charge densities can be plotted using 
{bold} TonyPlot
. 
These charge densities are plotted  against the cap layer thickness and Al 
composition in AlGaN Cap layer.

The input deck containing the actual description of the devices is found in 
ganfetex01_aux_0.in and ganfetex01_aux_0.in.

Victory device is a 2D and 3D device simulator.In this example we demonstrate 
the use of Victory Device in 2D mode. 

The Victorydevice input deck consists of the following parts:

{bullet} Construction of the device and the grid using victorydevice syntax
{newline}
{bullet} Specification of material regions
{newline}
{bullet} models, interface charge and interface trap parameters
{newline}
{bullet} Extraction of the 2DEG. 
{newline}

In the first part of the input deck (ganfetex01_aux_0.in) the device is described 
using Victorydevice syntax, including mesh, regions and electrodes locations.
The
{bold} REGION 
statements are used to define AlGaN and GaN regions. The Al composition
fraction (x.composition=0.27) is defined here as well.
After the device description, the
{bold} MODEL 
statement is used to specify the built-in polarization model set by specifying
{bold} POLARIZATION 
for spontaneous polarization and
{bold} CALC.STRAIN 
for piezoelectric polarization. 
{bold} PCH.INS and PCH.ELEC 
are set in order to allow charges at the interface between AlGaN and Oxide
(pch.ins) and between GaN and conductor at the bottom of the structure (pch.elec).

Next the 
{bold} SOLVE 
statement is used to obtain a zero biased solution.  The
{bold} SAVE 
statement is used to save this solution for perform extraction of the 2DEG.

In the second part of the input deck we do the same simulation but instead
of using the built-in polarization model that calculate the polarization charges 
as a function of composition, strain and lattice constant for the various materials, 
we set polarization charges directly using the
{bold} INTERFACE CHARGE=
statement.  

2DEG simulation results using the built-in polarization model, manually added 
charges and measurement taken from the dissertation "High voltage GaN HEMTs with 
low on-resistance for switching  applications" written by Naiqian Zhang UNIVERSITY 
of CALIFORNIA Santa Barbara September 2002 are compared and show good correlation.

The built-in polarization model being validated, it can be used to perform the same
simulation but instead of making variation of cap layer thickness, Al composition
is used instead (ganfetex18_aux_1.in). As expected 2DEG increases with Al composition.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} ganfetex19.in : Effect of Nitride Intrinsic Stress Simulated with Victory Process

Requires: Victory Process / Victory Device 
{newline}
Minimum Versions: Victory Process 7.14.3.R / Victory Device 1.10.1.R

In this example, a 2D GaN HEMT structure with the stress distribution resulting from intrinsic stress in the nitride passivation layer is produced by Victory Process in process mode. The process modeling is then inputted into Victory Device for device simulation of IdVg characteristics.

In order to accomplish stress simulation with Victory Process, the
{bold} STRESS.HIST 
parameter of the 
{bold} METHOD 
statement must be activated as follows: 
{bold} METHOD STRESS.HIST=ON

This will instruct Victory Process to calculate the stresses and evolutions of geometry after each processing step using the so-called "stress evolution" or "stress history" model. Since this example is intended for illustrating stress polarization as a consequence of nitride intrinsic stress, besides spontaneous and piezoelectric polarization, lattice mismatch stress must be explicitly excluded from stress calculation by 
{bold} METHOD 
statement:
{bold} METHOD STRESS.HIST=ON STRESS.LATTICEMISMATCH=OFF

An intrinsic stress can be introduced into the nitride passivation layer during the deposition using the parameters
{bold} STRESSXX
and
{bold} STRESSZZ 
of the
{bold} DEPOSIT
statement for the xx-component and the zz-component of the stress tensor. The default unit of intrinsic stress is dyne/cm2.

The IdVg characteristics at a drain bias of 1 V are ramped from -6 to 1.0 V. With the scale factor 
{bold} TENSOR.SCALE 
on the 
{bold} MODEL 
statement, Victory Device allows piezoelectric charges due to imported stress to be scaled independently from those due to lattice mismatch stress and spontaneous polarization. 

The effect of nitride intrinsic stress, which can be either compressive or tensile, is visible on IdVg characteristics. The results are also compared for different 
{bold} TENSOR.SCALE
factors as well as different nitride layer thicknesses.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the
{bold} run 
button to execute the example.

{section} SiC : SiC Application Examples

{subsection} sicex01.in : SiC Extended Precision PiN Diode simulation

Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates simulation of a reverse SiC PiN Diode characteristic
versus different levels of arithmetic precision. 

Simulation of wide band gap semiconductor devices is challenging mainly
because the intrinsic carrier concentration is small. One solution to
overcome this problem is to artificially increase the intrinsic carrier
concentration. A more rogorous method consists of using different levels
of arithmetic precision. 

For well-converged solutions, run-time increases with precision. The 
increase is especially significant at the highest precision levels.

On the other hand, certain problems (e.g. SiC devices) that have difficulty 
converging at the lower precision levels are likely to run faster if the
precision level is increased. Accordingly, the optimum precision level for 
a particular problem is likely to be the minimum level that yields good 
convergence during the solution.

The maximum precision that may be required for a well-converged solution can 
be estimated from the semiconductor bandgap. However, it is often possible to 
simulate a given device, under particular bias conditions, using a precision 
less than this maximum. Conversely, we can say that a given precision level 
is supportive of bandgaps up to a certain value, and convergence may be 
difficult if materials with higher bandgaps are simulated. 

SiC may need to be simulated using a nominal precision of 256-bits. 
However in this example and as mentionned above 128 bits precision
is enough in this case.

In the first part of the input deck a simple SiC PiN diode is created.
Then multiple breakdown voltage simulations are performed with different 
levels of arithmetic precision. The level of arithmetic precision is set
in Atlas using the 
{bold} simflags="-128" 
parameter in the 
{bold} go atlas 
statement for a 128 bits precision.

All the simulation were performed with the
{bold} SiC anisotropic Impact Ionization model 

Simulation time are extracted for all simulations in deckbuild using
{bold} extract name="t" clock.time 

The results are plotted and overlayed in tonyplot showing that the
Breakdown Voltage is independent of the precision used during the
simulation. As mentionned above the 128 bits precision is enough to
allow accurate simulation of the leakage current.

It is also interesting to notice that the simulation time as a 
function of precision exhibits a bell shape and confirm what we 
mentioned above.  

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} sicex02.in : Anisotropic Mobility Characteristics of a SiC T-MOSFET

Requires: DevEdit, Blaze, SiC
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the simulation of the forward characteristics of a trench gated MOS power transistor. 
Three simulations are performed to show the effect of the crystallographic plane mobility modeling on the device characteristics.

This device is created entirely within DevEdit and is composed of SiC, silicon dioxide, aluminum and polysilicon within a simulation domain of 6um x 16um. 
The MOSFET has been created with a gate oxide of 800A and an N-type polysilicon gate. 

The device simulations consist of the ID-VD characteristics at a gate voltage of 20V. Three characteristics were then obtained for different mobility models.

First, the standard 
{bold} isotropic mobility model 
was used where the SiC mobility coefficients were defined for the 
{bold} <1100> plane 
which is the 
{bold} high 
mobility plane.

Secondly, the standard 
{bold} isotropic mobility model 
was used where the SiC mobility coefficients were defined for the 
{bold} <1000> plane 
which is the 
{bold} low 
mobility plane.

Thirdly, an 
{bold} anisotropic mobility model 
was used where the SiC mobility coefficients were defined for 
{bold} both the <1100> and <1000> planes.

The anisotropic model is applied by specifying a default set of mobility coefficients which apply everywhere. Then on the second 
{bold} mobility
 statement the 
{bold} n.angle
 parameter specifies the mobility at 90 degrees to the horizontal. This switches on the anisotropic mobility model.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} sicex03.in : Anisotropic Mobility Characteristics of a SiC DMOS Device

Requires: DevEdit, Blaze, SiC
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the simulation of the forward characteristics of a doubly diffused, or implanted, MOS power transistor. 

Three simulations are performed to show the effect of the
 crystallographic plane mobility modeling on the device characteristics.

This device is created entirely within DevEdit and is composed of SiC, silicon dioxide and aluminum within a simulation domain of 7.5um x 15um. 
The MOSFET has been created with a gate oxide of 800A and an aluminum gate. 

The device simulations consist of the ID-VD characteristics at a gate voltage of 20V. 
Three characteristics were then obtained for different mobility models.

First, the standard 
{bold} isotropic mobility model 
was used where the SiC mobility coefficients were defined for the 
{bold} <1100> plane 
which is the 
{bold} high 
mobility plane.

Secondly, the standard 
{bold} isotropic mobility model 
was used where the SiC mobility coefficients were defined for the 
{bold} <1000> plane 
which is the 
{bold} low 
mobility plane.

Thirdly, an 
{bold} anisotropic mobility model 
was used where the SiC mobility coefficients were defined for 
{bold} both the <1100> and <1000> planes.

The anisotropic model is applied by specifying a default set of mobility coefficients which apply everywhere. Then on the second 
{bold} mobility
 statement the 
{bold} n.angle
 parameter specifies the mobility at 90 degrees to the horizontal. This switches on the anisotropic mobility model.

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} sicex04.in : Aluminum Implant into 6H-SiC.

Requires: SSuprem 4, MC Implant
{newline}
Minimum Versions: Athena 5.22.0.R

This example compares Monte Carlo simulation with experimental profiles
for wide energy range implants in 6H-SiC. The details of corresponding
experimental conditions can be found in J.M. Hernandez-Mangas et.al.
J. Appl. Phys, Vol. 91, pp.658-667, 2002 (see Fig.16). Note, that Athena
simulation results have better agreement with experiments than the specialized
simulator used in the paper above. 


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} sicex05.in : Al implant in 4H-SiC in [0001] Crystallographic Direction.

Requires: SSuprem 4, MC Implant
{newline}
Minimum Versions: Athena 5.22.0.R

This  example show very pronounced channeling effects 
for on-axis implantation in 4H-SiC. The Al implant energy is 60 keV and
implant direction condition corresponds to on-axis implantation in [0001]
crystallographic direction. The experimental profiles are taken from Wong-Leung
et al. J. Appl. Phys. vol.93, pp 8914-8916, 2003.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} sicex06.in : Al implant in 4H-SiC in [11-23] Crystallographic Direction.

Requires: SSuprem 4, MC Implant
Minimum Versions: Athena 5.22.0.R

This example shows very pronounced channeling effects 
for on-axis implantation in 4H-SiC. The Al implant energy is 60 keV and
implant direction condition corresponds to on-axis implantation in [11-23]
crystallographic direction. Comparison with results of sicex06.in shows that 
crystallographic orientation significantly affects the length of channeling tails. 
Crystallographic analysis shows that channels in [11-23] direction are 
"wider" than in [0001] direction which result in almost 2 times longer channeling 
tails when implanting in [11-23] direction. The experimental profiles are taken from 
Wong-Leung et al. J. Appl. Phys. vol.93, pp 8914-8916, 2003.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} sicex07.in : Enhancement Mode IEMOSFET I-V and Breakdown Curves

Required Blaze TFT
{newline}
Minimum Versions: Atlas 5.24.1.R

This example is based on the following paper submitted by 
{bold} AIST 
Japan:
"4.3 m-ohm.cm2, 1100 V 4H-SiC Implantation and Epitaxial MOSFET",
Shinsuke Harada et. al., Material Science Forum Vols. 527-529 (2006) 
pp 1281-1284.

The paper investigated the effect of a Nitrogen implant in the surface of the
lightly doped drain region, that was the electrical N-type doping connection 
to the main vertical drift region to the back of the device where the drain 
contact resides.  In order to allow users to experiment with this n-type 
doping concentration, this concentraion was defined as a variable called
{bold} "CN" 
near the begining of the input file.  In the example, this doping 
concentration was set to the near optimal value of
{bold} 1e17/cm3
.

For large band-gap semiconductors, it is necessary to use extended precision
when simulating the device in the "off" condition, such as when simulating
breakdown.  In this example,
{bold} 160 bit precision 
is used, which is defined in 
the "go atlas" statement at the begining of the input file.  For the 
simulation of the I-V curves, it is not strictly necessary however, but it is
still used here for completeness.

The "
{bold}mesh
" startement defines the width of the device.
In order to convert the simulated currents into Amps/cm2 used in the paper,
the 1.5um gate length device needs to be multiplied by 6.67e7 um.

One of the features of SiC/oxide interface is the very high density of 
{bold} interface states 
under the gate, which dominate the determination of the 
threshold voltage.  Most publications place the typical interface state 
density as high as 1e14/cm2/eV at the band edges, dropping to a near constant
value of 2e11/cm2/eV throughout the rest of the band gap that is more than 
0.5eV away from each of the band edges.  These interface states are modelled
using the "
{bold}intdefects
" statement.

The high density of interface states, effectively turn off the channel,
naturally creating a normally off (enhancement mode) device with a high
threshold voltage.  In order to reduce the threshold voltage to the more 
acceptable 3.4 volts required for this paper, an n-type channel implant is
required, with a surface concentraion as high as 1.2e17/cm3 as specified in
the paper.  Using this surface implant specified in the paper and the 
distribution of interfaces states found in the open literature, the correct
threshold voltage of 3.4 volts was obtained.

Finally, very tight tollerances are applied to the solution using the "
{bold}method
" statement, which force the simulator to resolve currents down to 
approximately 1e-30 amps, which is necessary to accurately account for 
leakage currents.

To load and run this example, select the
{bold} load example 
button in Deckbuild.
This will copy the input file and any support files to your current working
directory.  Select the
{bold} run 
button to execute thie example.

{subsection} sicex08.in : 3D SiC MOSFET 

Required Device 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates 3D SiC MOSFET simulation using DEVICED3D. 

Since the 3D MOSFET in this example has a rectangular shape Device 3D can be used to both create 
the 3D structure and perform the device simulation. Device simulation were performed using extended 
precision arithmetic to be sure to resolve low intrinsic carrier concentration. 80 bits was used for IV curves 
whereas 128 and 160 bits were used for breakdown Voltage simulation. The purpose of using two different
precision arithmetic was to show that we can get the same Breakdown Voltage for both precision. However
using 128bits(compare to 160 bits) reduces simulation time but prevent to captur very low leakage current.

To load and run this example, select the
{bold} load example 
button in Deckbuild.
This will copy the input file and any support files to your current working
directory.  Select the
{bold} run 
button to execute the example.

{subsection} sicex09.in : 3D Trench IGBT 

Required Victory Process Victory Device
{newline}
Minimum Versions: Victory Process 7.14.3.R Victory Device 1.10.2.R

By default Victory Process and Device run on just one processor.
To ensure better perfomance on your computer the following simulation condition
{bold} simflags="-P all"
could be specidied in the 
{bold} go
line starting Victory Process or Device. This means that all processors available will be used.
If you want to use a smaller number of processors you can substitute "all" with a desired number, e.g.
{bold} simflags="-P 4".

Silicon based power devices are still dominant today in power electronics. However, wide bandgap semiconductors like SiC are
now more and more used for  high power, high-temperature applications because of superior thermal conductivity, lower intrinsic
carrier concentration and better on-resistance compare to Silicon, which is a key figure of merit in power switching applications.

Simulating SiC devices is however more challenging compare to Silicon. Indeed very low intrinsic concentration combined with
high doping values is usually detrimental to convergence. Victory Device can handle this situation thanks to his
built-in extended precision solvers. Indeed whereas normal 64bits version has a relative accuracy of around 1e-16, 80 bits version
can increase the accurary up to 1e-19, 128bits to 1e-32 and 256bits to 1e-63.  We may however get some penalty in term of simulation 
time especially for 128 and 256 bits version. SiC exhibits hexagonal crystal structures. As a consequence anisotropy features in many important physical parameters like impact ionization must be taken into account.
 
The following example demonstrate 3D trench SiC IGBT simulation using Victory Cell and Victory Device.  

The particularity of this device is to have low doping long drift region of about 160um. This will lead to high breakdown voltage.
In this example we did not focus only on breakdown voltage simulation but we also wanted to perform IV simulation including
IDVG and IDVD to illustrate a 3D specific effect. Indeed a "hump" effect was observed on the IDVG characteristic due to their
non planar structure as reported in "Quantitative Analysis of Hump Effects of Gate-All_Around Metal_Oxide_Semiconductor Field_Effect
Transistors" Woojun Lee,and Woo Young Choi Japanese Journal of Applied Physics 49 (2010) 04DC11. This "hump" effect is characterized in the IDVG curve as a parasitic transistor. This may be problematic in term of power consumption since it increases the off-current. In order to overcome this problem a non-Manhattan structure 
(including rounded trench corner instead of 90 degree trench corner) was simulated. The "hump" effect is reduced and the
 breakdown voltage improved.

In order to create the 3D structure we used Victory Cell our 3D process simulator. Victory Cell is very suitable for 3D SiC
power devices simulation since it is layout driven, accurate, fast and easy to use. The 3D structure creation takes only few
minutes. After the process simulation is done a 3D structure is saved using a tetrahedron mesh to ensure that any shape created
during 3D process simulation is well conserved and transferred to Victory Device for further device simulation. Device simulation
were performed using extended precision arithmetic, 80 bits or 128-bit depending on the type of simulation done, to be sure to
resolve low intrinsic carrier concentration. 

As mentioned above we can clearly see the effect of the trench corner on the IDVG and IDVD characteristics. 2D cut plane
were also made on the diagonal of the device right at the trench corner where we can clearly see higher electron current
density for the Manhattan compare to the case where the trench corner was rounded. Note that BV is also affected by this
effect and BV of around 12KV is obtained when the trench edge is rounded. We can clearly see when we plot the 3D structure
that the maximium of the Electric Field as well as the Impact Generation rate is located at the bottom of the trench. 



To load and run this example, select the
{bold} load example 
button in Deckbuild.
This will copy the input file and any support files to your current working
directory.  Select the
{bold} run 
button to execute the example.


{subsection} sicex10.in : 3D Trench Shape Effect on IV and BV Characteristics  

Required Victory Process Victory Device
{newline}
Minimum Version Victory Process 7.14.3.R Victory Device 1.10.2.R

By default Victory Process and Device run on just one processor.
To ensure better perfomance on your computer the following simulation condition
{bold} simflags="-P all"
could be specified in the 
{bold} go
statement starting Victory Process or Device. This means that all processors available will be used.
If you want to use a smaller number of processors you can substitute "all" with a desired number, e.g.
{bold} simflags="-P 4".

The following example demonstrates the effect of the shape of a trench on IV and
BV characteristics.

The 3D layout-driven structure is created using Victory Process. 3D device simulation
is done using Victory Device built-in extended precision numeric. 

In this example we compare 3 different structures. One fully Manhattan (i.e right
angle layout and trench) versus 2 structures one having rounded layout and another
one having rounded layout and angled trench.

Aluminum implantation is simulated in 1D (to save simulation time) in Athena using 
Monte Carlo implantation before being imported in the 3D structure using the
{bold} PROFILE 
statement in Victory Process.

The 3D structure is saved using a full 3D Delaunay mesh using
{bold} EXPORT victory(Delaunay) 
statement in Victory Process.
Different options are available in order to optimize the mesh under the gate
and at the p/n junction. This 3D refinement is fully automatic.

The 3D structure is then loaded in Victory Device. The default 3D Delaunay
discretization method combined with a parallelized iterative solver set by
{bold} PAM.MPI 
statement in Victory Device allow good convergence, speed and accurate results.

To make the optical axis parallel to the z-axis for 3D simulation so that the 
optical axis points toward the SiC surface, we set ZETA=90 degrees and THETA=90 
degrees on the MATERIAL statement. 

We can clearly see the effect of the trench shape on the IDVG and BV characteristics.
Indeed a known "hump" effect is observed on the IDVG characteristic especially
on the device with full Manhattan shape. However this parasitic effect is removed
with the device using rounded layout and angled trench.

BV simulation reveals that the breakdown voltage can be increased by 30% using
rounded layout and angled trench due to impact ionization not occurring anymore
only at the corner of the trench.

To load and run this example, select the
{bold} load example 
button in Deckbuild.
This will copy the input file and any support files to your current working
directory.  Select the
{bold} run 
button to execute the example.

{subsection} sicex11.in : Comparison Between 2D and 3D BV Simulation 

Required Victory Process Victory Device
{newline}
Minimum Version Victory Process 7.14.3.R Victory Device 1.10.2.R

By default Victory Process and Device run on just one processor.
To ensure better perfomance on your computer the following simulation condition
{bold} simflags="-P all"
could be specidied in the 
{bold} go
statement starting Victory Process or Device. This means that all processors available will be used.
If you want to use a smaller number of processors you can substitute "all" with a desired number, e.g.
{bold} simflags="-P 4".

The following example shows comparison between 2D and 3D breakdown voltage simulation of a vertical SiC MOSFET. 

The 3D layout-driven structure is created using Victory Process. 3D device simulation
is done using Victory Device built-in extended precision numeric. 

Hatakeyama, et al. [1] have developed an anisotropic impact ionization model for materials with
a hexagonal crystal structure, including 4H-SiC. The ionization coefficients in this model 
depend on the strength of the electric field and on the orientation of the field with respect 
to the optical axis of the crystal.

You can specify the orientation of the optical axis of the crystal in Victory Device by supplying values for 
{bold} ZETA 
and
{bold} THETA 
parameters on a 
{bold} MATERIAL 
statement. ZETA defines the angle the optical axis makes with the y coordinate axis. theta 
defines the angle that the projection of the optical axis onto the x-z plane makes with 
respect to the x-axis (measured clockwise around the yaxis). The defaults are zeta=0 degrees 
and theta=0 degrees, making the <0001> direction parallel to the y-axis.

To make the optical axis parallel to the z-axis for 3D simulation so that the optical axis points
toward the SiC surface for both 2D and 3D, we remove the SIC4H0001 parameter on the IMPACT statement
and replace it by ZETA=90 degrees and THETA=90 degrees on the MATERIAL statement. 

As expected the breakdown voltage is the same in 2D and 3D for the same structure.

[1] Hatakeyama, T., J. Nishio, C. Ota, and T. Shinohe, "Physical Modeling and Scaling Properties of 4H-SiC Power Devices," Proc. SISPAD, Tokyo (2005): 171-174.

To load and run this example, select the
{bold} load example 
button in Deckbuild.
This will copy the input file and any support files to your current working
directory.  Select the
{bold} run 
button to execute the example.



{subsection} sicex12.in : 4H-SiC Schottky Diode DLTS simulation 

Required S-Pisces 
{newline}
Minimum Version Atlas 5.24.1.R  


Deep-level transient spectroscopy (DLTS) is an experimental tool for studying 
electrically active defects (known as charge carrier traps) in semiconductors.
DLTS establishes fundamental defect parameters and measures their concentration 
in the material. 

DLTS investigates defects present in a space charge (depletion) region of a 
simple electronic device. The most commonly used are Schottky diodes or p-n junctions. 
In the measurement process the steady-state diode reverse polarization voltage is 
disturbed by a voltage pulse. This voltage pulse reduces the electric field in 
the space charge region and allows free carriers from the semiconductor bulk to 
penetrate this region and recharge the defects causing their non-equilibrium charge 
state. After the pulse, when the voltage returns to its steady-state value, the defects 
start to emit trapped carriers due to the thermal emission process. The technique 
observes the device space charge region capacitance where the defect charge state 
recovery causes the capacitance transient. The voltage pulse followed by the defect 
charge state recovery are cycled allowing an application of different signal 
processing methods for defect recharging process analysis. The emission rate is 
temperature dependent and characteristic for each type of defect. From the temperature 
dependence of the emission rate the activation energy of a deep level can be deduced.

In this example we demonstrate how to simulate capacitance variation versus
time and temperature on a 4H-SiC Schottky barrier Diode (SBD). To do so we used 
the loop statement combined with the set statement to run multiple simulations 
at different temperature and save files accordingly. 

From the simulation results we also show how to simulate temperature dependence 
of the capacitance difference (extracted at 2 different simulation time i.e 20ms 
in that case). In this input deck carrier capture cross section
{bold} SIGN 
and
{bold} SIGP 
were set to 5.6e-15 but could easily be changed to verify emission rate is 
temperature dependent

Simulation results agree very well with DLTS theory. 

To load and run this example, select the
{bold} load example 
button in Deckbuild.
This will copy the input file and any support files to your current working
directory.  Select the
{bold} run 
button to execute the example.


{subsection} sicex13.in : An alternative inversion layer mobility model for 4H-SiC

Requires: Atlas 
{newline}
Minimum Versions: Atlas 5.24.1.R

This example introduces an alternative inversion layer mobility model for 4H-SiC. The model being a function of doping concentration and temperature takes into account bulk, surface roughness and surface phonon scattering, as well as Coulomb scattering at interface charges at 4H-SiC/dielectric interface, using Matthiessen's rule. To enable the model, specify the 
{bold} ALTCVT.N 
flag for electrons and/or the
{bold} ALTCVT.P 
flag for holes on the
{bold} MOBILITY
statement. 

The bulk component combines contributions from ionized impurity scattering in the bulk with those from optical bulk-phonon scattering. It cannot be excluded from the model, but a proper choice of the model parameters will force it to be constant.

The surface roughness contribution can be disabled by clearing the
{bold} ALT.SR.N
flag for electrons and/or the
{bold} ALT.SR.P
flag for holes on the
{bold} MOBILITY
statement.

The surface phonon component can be disabled by clearing the
{bold} ALT.SP.N
flag for electrons and/or the
{bold} ALT.SP.P
flag for holes on the
{bold} MOBILITY
statement.

The contribution from Coulomb scattering at interface charges can be disabled by clearing the
{bold} COULOMB.N
flag for electrons and/or the
{bold} COULOMB.P
flag for holes on the
{bold} MOBILITY
statement.

An enhancement-mode n-channel 4H-SiC MOSFET with high density of interface traps at the 4H-SiC/SiO2 interface serves to demonstrate the influence of the mobility components on the total inversion layer mobility. The 2D net doping profile of the simulated 4H-SiC MOSFET is plotted along with the acceptor and donor interface state density distributions defined by the
{bold} INTDEFECTS
statement. From the simulated Id-Vg characteristics for various combinations of mobility components, the electron mobility and the perpendicular electric field are extracted at the 4H-SiC/SiO2 interface using the 
{bold} PROBE
statement and then plotted against each other to show the contributions of each of the scattering mechanisms to the total inversion layer mobility. The results clearly indicate that the Coulomb scattering at the interface charges significantly influences the total inversion layer mobility in the low electric field regime before losing out to the surface phonon scattering in the moderate electric field regime. At high electric fields the surface roughness scattering has the dominant influence on the total inversion layer mobility of electrons, as can be confirmed by a plot of electron mobility as a function of position along the channel depth at Vd=0.1V and Vg=10V. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{section} TFT : TFT Application Examples



{subsection} tftex01.in : Amorphous Silicon TFT : Passivated Device

Requires:  S-Pisces/TFT
{newline}
Minimum Versions: Atlas 5.24.1.R

This file performs Id/Vgs simulation of a TFT device with material
properties corresponding to passivated alpha-Si:H material. The example
shows:

{bullet} Structure formation using Atlas syntax
{newline}
{bullet} Material and model settings for passivated a-Si
{newline}
{bullet} Forward Id/Vgs characteristics

The key command in TFT simulation is the
{bold} defect 
statement. It is used to define a continuous density of trap states in
the silicon and the relevant trapping cross-sections.

The Id/Vgs ramping is done in a similar manner to the threshold voltage
tests for MOS devices described in the MOS example. Results from this
example can be compared with the un-passivated a-Si device.

A more detailed description of TFT material settings is given in the
{italic} Forward/Reverse Gate Voltage Characteristic 
example. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.





{subsection} tftex02.in : Amorphous Silicon TFT : Un-Passivated Device

Requires:  S-Pisces/TFT
{newline}
Minimum Versions: Atlas 5.24.1.R

This file performs Id/Vgs simulation of a TFT device with material
properties corresponding to un-passivated alpha-Si:H material. The example
shows:

{bullet} Structure formation using Atlas syntax
{newline}
{bullet} Material and model settings for un-passivated a-Si
{newline}
{bullet} Forward Id/Vgs characteristics

The key command in TFT simulation is the
{bold} defect 
statement. It is used to define a continuous density of trap states in
the silicon and the relevant trapping cross-sections.

The Id/Vgs ramping is performed in a similar manner to the threshold voltage
tests for MOS devices described in the MOS example. Results from this
example can be compared with the passivated a-Si device.

A more detailed description of TFT material settings is given in the
{italic} Forward/Reverse Gate Voltage Characteristic 
example. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.





{subsection} tftex03.in : Polysilicon TFT : Passivated Device

Requires:  S-Pisces/TFT
{newline}
Minimum Versions: Atlas 5.24.1.R

This file performs Id/Vgs simulation of a TFT device with material
properties corresponding to passivated polysilicon material. The example
shows:

{bullet} Structure formation using Atlas syntax
{newline}
{bullet} Material and model settings for passivated polysilicon
{newline}
{bullet} Forward Id/Vgs characteristics

The key command in TFT simulation is the
{bold} defect 
statement. It is used to define a continuous density of trap states in
the silicon and the relevant trapping cross-sections.

The Id/Vgs ramping is performed in a similar manner to the threshold voltage
tests for MOS devices described in the MOS example. Results from this
example can be compared with the un-passivated polysilicon device.

A more detailed description of TFT material settings is given in the
{italic} Forward/Reverse Gate Voltage Characteristic 
example. 

This corresponds to a passivated polysilicon material.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} tftex04.in : Polysilicon TFT : Un-Passivated Device

Requires:  S-Pisces/TFT
{newline}
Minimum Versions: Atlas 5.24.1.R

This file performs Id/Vgs simulation of a TFT device with material
properties corresponding to un-passivated polysilicon material.  The
example shows:

{bullet} Structure formation using Atlas syntax
{newline}
{bullet} Material and model settings for passivated polysilicon
{newline}
{bullet} Forward Id/Vgs characteristics

The key command in TFT simulation is the
{bold} defect 
statement. It is used to define a continuous density of trap states in
the silicon and the relevant trapping cross-sections.

The Id/Vgs ramping is performed in a similar manner to the threshold voltage
tests for MOS devices described in the MOS example. Results from this
example can be compared with the passivated polysilicon device.

A more detailed description of TFT material settings is given in the
{italic} Forward/Reverse Gate Voltage Characteristic 
example. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} tftex05.in : Forward/Reverse Gate Voltage Characteristic 

Requires: SSuprem 4/S-Pisces/TFT
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

This example demonstrates how integrated process and device TFT simulations
can be performed in Athena and Atlas. The input files consists of :

{bullet} Construction of TFT device in Athena
{newline}
{bullet} Forward (positive) Vgs sweep in Atlas
{newline}
{bullet} Reverse (negative) Vgs sweep in Atlas

The first part of the file uses Athena to construct the geometry and
doping of a TFT device. The starting substrate is defined as silicon
dioxide to emulate the flat panel display glass. The transistor is
simulated with a metal gate on the bottom and a gate insulator made
from Oxide and Nitride. A lightly doped Silicon layer is deposited to
act as the channel region. A heavily doped layer is placed on top to
become the source/drain regions. Single crystal Silicon or Polysilicon
could be used equally well at this stage. However the important
electrical properties of the material are set in Atlas, so at this stage
it is not important which material is used.  Metal for the source/drain
contacts is then applied. An etchback through the metal and
heavily doped silicon is then carried out. Some of the lightly doped silicon layer
is also removed. This final etch separates the source and drain. The
final stage in Athena is to define the electrodes for use in Atlas.


The Atlas part of this file is used to simulate the gate voltage bias
from -20V to +20V with the drain at +10V. Before the biasing is applied
it is first necessary to set all the relevant material parameters.

In simulating TFTs, the most important requirement is setting of the
{bold} defect 
statement specifying the density of states in the semiconductor
bandgap. The defect states are specified as donor-like and
acceptor-like and as tail and mid-gap gaussian states. This  gives a
total of four distributions each with their own trapping cross sections
for electrons and holes for a total of eight cross section values. The
values included in this example are typical of amorphous silicon used
in TFT transistors, but each user has a different process. The defect
densities are sensitive to the hydrogen annealing of the device and so
must be tuned by the user.
  
The 
{bold} material 
statement is used to set the material constants of the
semiconductor to those of amorphous silicon. The interface step defines
an interface charge on each semiconductor/insulator interface. It is
possible to vary this charge by position using the bounding box
parameters on the interface statement.

The models needed for TFT simulation are simple. A constant mobility as
defined by the material statement is used and SRH recombination is
included. In order to simulate reverse leakage the band-band tunneling
model is included by:
{bold} models bbt.std
. The exponential parameter of the band-band tunneling model is
adjusted for amorphous silicon.

The first step in the solve sequence is to ramp the drain voltage up to
+10V. At this point a file is stored. The reverse gate voltage
ramp is then applied. The gate voltage is ramped up to -20V. The drain
current will increase during this ramp due to tunneling current in the
TFT. The magnitude of this is controlled by the parameters of the
band-band tunneling model. at the end of the ramp the final drain
current is extracted. 

At the highest reverse gate bias a structure file is saved. By plotting
the recombination in the device at this bias it is possible to see the
band-band generation current as a negative recombination term.

The final step is the forward gate voltage sweep. This is performed by first
loading the solution saved with zero gate voltage. Then the gate is
ramped to +20V. From this data the 
{bold} extract 
syntax is used to get the
sub-threshold leakage slope. This slope, which is typically 0.5-1.5
V/decade is sensitive to the defect distribution in the semiconductor.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} tftex06.in : 3D TFT Simulation 

Requires: Device 3D/TFT 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates Ids/Vgs and Id/Vds  3D analysis of a 10um
channel length, ultra-thin TFT transistor. The example shows:

{bullet} Formation of 3D structure using Atlas syntax
{newline}
{bullet} Id/Vgs solution with Vds=0.1V
{newline}
{bullet} Id/Vds solution with Vgs=1.5V

The formation of this 3D structure is performed using the Atlas syntax.
The syntax used is very similar to that used to create a normal 2D example. The
definition of dimensions in the third direction is defined by the
{bold} z 
indicator. Thus z.min and z.max define extents in the z direction, just
as x.min and x.max do in the x direction. 

The TFT device is composed of a 0.05 micron layer of polysilicon on a 0.45
micron silicon dioxide substrate.  The device has a 12 nm thick gate
oxide and a gate length of 10 microns.  The gate width is 80um.

After the device description the
{bold} model 
statement is used to select a set of physical models for this simulation.  In this case,
these models are 'srh' recombination, bandgap narrowing, and the conmob and fldmob mobility models.
The 
{bold} impact 
statement is used to specify the Selberherr model for impact ioisation in the 3D simulation. This is necessary to model "kink" effects that are often observed in TFT Id-Vd characteristics.
The 
{bold} contact 
statement is used to assign the work function on the gate material. It this case an aluminum gate is used which assigns a workfunction of 4.10 V to the gate contact.

The numerical methods used are also similar to the previous example:
{bold} METHOD gummel newton carr=2
. This means that if convergence is not reached in decoupled mode (gummel) the simulator
will automatically switch to coupled mode (newton). In addition, a two carrier solution 
is performed by solving Poisson's equation for potential and the electron and hole 
continuity equations.


The drain voltage is set to 0.1V, and then the gate voltage is swept to 1.5V to measure the Ids/Vgs curve. 


Then the gate voltage is set to 1.5V, and then the drain voltage is
swept to 3V.  At this point faster solutions are obtained using the
coupled newton algorithm so the simulation switches to this
method.  The drain voltage is then ramped to 4V.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} tftex07.in :  Comparing a Discrete and Continuous Distribution of Traps

Requires: S-Pisces/TFT
{newline}
Minimum Versions: Atlas 5.24.1.R

It is possible to specify an energy dependent distribution of traps in
two ways using SPISCES/TFT. The original method assumed a discrete set
of traps across the bandgap but now it is possible to use a
mathematically continuous energy distribution of states.

The syntax used in this example is identical to that in tftex03.in
except that now two simulations are performed each with the density of
states assumed to contain 24 energy levels across the bandgap. This is
speciied using the 
{bold} DEFECT
 parameters 
{bold} numa
 and 
{bold} numd
. The first simulation is otherwise identical to that described in tftex03.in. The second simulation uses the keyword  
{bold} continuous
 on the 
{bold} DEFECTS
 statement to define that the distribution is continuous. The simulation then compares the Id-Vg characteristics for the two simulations.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} tftex08.in :  TFT Simulation Using the C-interpreter

Requires: S-Pisces/TFT/C-Interpreter
{newline}
Minimum Versions: Atlas 5.24.1.R

The DEFECTS statement only allows the user to specify a fixed density of states 
versus energy distribution. This would normally comprise one Gaussian
and/or one exponential energy distribution of traps across the bandgap. This 
may not necessarily accurately reflect the users material. 

However, Atlas allows the user to use the C-interpreter to specify the density 
of states versus energy distribution. On the 
{bold} DEFECTS 
statement the options 
{bold} f.tftacc
 and 
{bold} f.tftdon
 specify files which should contain the distributions written as standard C routines.

In this example the acceptor and donor densities are defined by two exponential 
equations each which begin from the conduction and the valence bands. The 
parameters that would normally specify the density of states should be set to
{bold} nta=ntd=nga=ngd=0 
otherwise they would be added to the C-interpreter values.

The capture cross sections are then taken from the parameters in the DEFECTS statement. 
The acceptor capture cross section is defined by the Gaussian 
acceptor value and the donor capture cross section is defined by the Gaussian donor value.

The remainder of this TFT input deck is the same as that described in tftex03.in.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} tftex09.in :  TFT Simulation of Grains and Grain Boundaries

Requires: S-Pisces/TFT
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates how Atlas and SPISCES may be used to model the influence of 
grain boundaries on the device simulation results. The input deck has been created in 
such a way as to allow easy implementation into a VWF automation tools environment.

The input deck initially uses the
{bold} internal
 simulator within DeckBuild to define a number of variables using the DeckBuild
{bold} set
 statement syntax. There are six variables the the user is required to specify which 
define the physical geometry of the TFT.  The other variables are automatically defined 
and are used to create the mesh, regions and electrodes.

The grain and grain boundary are created by defining two regions in the polysilicon. 
Each region then has its own
{bold} material
and 
{bold} defect
 statements that define the properties within the grain and the grain boundary.

The remainder of the syntax is as normal and is described in the previous TFT examples.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} tftex10.in : Amorphous IGZO TFT Simulation

Requires:  Blaze/TFT
{newline}
Minimum Versions: Atlas 5.24.1.R

This file performs Id/Vgs and Id/Vd simulations of a TFT device with material
properties corresponding to amorphous IGZO (indium galium zinc oxide) material.
The example shows:

{bullet} Structure formation using Atlas syntax
{newline}
{bullet} Material and model settings for passivated IGZO
{newline}
{bullet} Forward Id/Vgs characteristics
{newline}
{bullet}  On state Id/Vds characteristics

The key command in TFT simulation is the
{bold} defect 
statement. It is used to define a continuous density of trap states in
the silicon and the relevant trapping cross-sections.

The Id/Vgs and Id/Vd ramping is done in a similar manner to the threshold voltage
tests for MOS devices described in the MOS examples. Results from this
example are compared with published experimental data.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} tftex11.in : 3D Amorphous TFT simulation

Requires:  Victory Process/Victory Device
{newline}
Minimum Version Victory Process 7.14.3.R Victory Device 1.10.2.R

By default Victory Process and Device run on just one processor.
To ensure better perfomance on your computer the following simulation condition
{bold} simflags="-P all"
could be specidied in the 
{bold} go
line starting Victory Process or Device. This means that all processors available will be used.
If you want to use a smaller number of processors you can substitute "all" with a desired number, e.g.
{bold} simflags="-P 4".

Although various design and physical effects have been successfully analyzed in 2D, it becomes 
important to start to analyze and predict device performance dependent on layout effect with 3D
simulations. We will show in the following example here that a complete 3D process and device 
simulation solution is available to address future challenges in TFT design.  Using SILVACO tools,
designers  can accelerate and optimize the development of  for next generation display technologies.
 
This example demonstrates 3D A-Si:H TFT simulation using  3D process simulation Victory Cell and 3D device simulation
Victory Device. 

in order to create the 3D structure we used Victory Cell our 3D process simulator. Victory Cell is
very suitable for 3D TFT devices simulation since it is layout driven, accurate, fast and easy to use.
The 3D structure creation takes only few minutes. The particularity of the structure under test is that
non 90 degree side-wall was used but 45 degree instead.  After the process simulation is done a 3D
structure is saved using a tetrahedron mesh to ensure that any shape created during 3D process 
simulation is well conserved and transferred to Victory Device for further device simulation.
 
Disordered materials contain a large number of defect states within the band gap of the material. 
To accurately model devices made of polycrystalline or amorphous materials, we need to take into 
account these defects. Victory Device can model interface states as well as defect states. Defect 
states is a combination of two exponentially decaying band tail states and two Gaussian distributions
of mid-gap states. In addition to the defect models, band to band tunneling model was used to simulate
accurately TFT devices in reverse. Device simulation were performed using 80 bits extended precision 
arithmetic to be sure to resolve accurately low current at low Vds. It is also very interesting to 
notice that due to the specific 3D effect the simulated IDVD curve when we reverse the source and 
the drain are different.

The
{bold} e.field.derivs 
parameter causes Victory Device to consider the partial derivatives of the field-dependent band
to band tunneling model with respect to the gradient of the potential. Including these derivatives 
slows down the computation and is usually not necessary, but in this case it helps the convergence.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} tftex12.in : Atlas : Insulator Trap Induced Measurement Sweep Hysterisis

Requires: SSuprem 4/Blaze/TFT
{newline}
Minimum Versions: Athena 5.22.3.R,  Atlas 5.24.1.R


This example shows the effect of measurement time on the results obtained for
typical TFT DC I-V measurements.  For some TFT devices, where the insulator 
contains traps that are within communication distance of the semiconductor
channel, the time and bias dependent trapping and de-trapping events create a
{bold} hysterisis effect 
in the IV curves.  The time dependency of the insulator trapping and 
de-trapping events, creates a hysterisis effect, the magnitude of which depends
on the time taken to take the measurements.

In order to greatly simplify the time dependency simulation of insulator trap
induced effects, the device simulator has incorporated the 
{bold} Heiman model 
which is invoked by specifying the "heiman" parameter in the 
{bold} inttrap 
statement.
The Heiman model allows the simulation of insulator trap time dependency 
effects using simple DC solve statements.  The maximum effective communication
distance of the insulator traps with the semiconductor channel, is specified
using the 
{bold} depth 
parameter in the "inttrap" statement.  The depth resolution of the insulator
traps is specified by the
{bold} hpoints 
parameter in the inttrap statement.  Other than these Heiman related 
parameters, the rest of the inttrap statement is exactly the same as a normal
inttrap statement.

All that remains to take account of the measurement time dependency effects,
caused by the insulator traps, is to specify the total measurement time on
the solve statement.   This is done using the 
{bold} timespan 
parameter on the solve statement.  In this particular example, the "timespan"
parameter is set as a variable called 
{bold} measurementtime 
at the begining of the Atlas section of the input file, so that the input file
can be easily modified to create a design of experiments using the measurement
time as a variable.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} tftex13.in : Amorphous IGZO TFT Simulation 2. Simulation v.s Experiment

Requires:  Athena/Blaze/TFT
{newline}
Minimum Versions: Athena 5.22.3.R / Atlas 5.24.1.R
{newline}
This example performs Id/Vgs, Id/Vd, and CV simulations of TFT device with material
properties corresponding to amorphous IGZO (indium galium zinc oxide) material and show comparison with
published experiment data. Measured a-IGZO material DOS(density-of-state) by CV analysis is inserted
into simulation input and show almost the same transfer curve and output curve behaviour.
{newline}

Reference: Amorphous InGaZnO thin-film transistors - Part I: Complete Extracton of Density of States Over the Full Subband-Gap Energy Range, Yongsik Kim, et al., IEEE Transactions On Electron Devices Vol. 59, No. 10, Oct 2012
{newline}
The example shows:

{bullet} Structure formation using Athena syntax
{newline}
{bullet} Material and model settings for passivated IGZO
{newline}
{bullet} DOS(Density Of State) in a-IGZO bulk and at interface between IGZO and gate insulator
{newline}
{bullet} Forward Id/Vgs characteristics and comparison with experiment
{newline}
{bullet}  Ouput Id/Vds characteristics and comparison with experiment
{newline}
{bullet} multi-frequency CV characteristics with extracted DOS(Density Of State)

The key command in a-IGZO:TFT simulation is the
{bold} Source/Drain Schottky barrier and height
This is done by proper workfunction of source/drain metal and activated by model UST(Universal Schottky Tunnling Model). gate metal and both S/D metal are the same workfunction=5.0 [eV]
{newline}
{bold} DOS-defect/intdefect statement. 
It is used to define a continuous density of trap states in
the a-IGZO active channel and the relevant trapping cross-sections.Also bottom interface fixed charge.
For this purpose, we used C-interpreter function to define DOS in IGZO active channel region.
{newline}
{bold} IDVG/IDVD DC Analysis
The Id/Vgs and Id/Vd ramping is done in a similar manner to the threshold voltage
tests for MOS devices described in the MOS examples.
{bold} CV-analysis
The Cgs and Cgd are simulated and compared to published data for each frequency.
{newline}
The measured data were taken from published paper with digitizer. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} tftex14.in : Amorphous IGZO TFT Pixel MixedMode Simulation

Requires:  Athena/Blaze/TFT/MixedMode
{newline}
Minimum Versions: Athena 5.22.3.R / Atlas 5.24.1.R
{newline}

The purpose of example explains how to make an equivalent TFT pixel circuit in Atlas/Mixedmode simulation softwares.
This aims at demonstrating how to set up TFT pixel equivalent circuit including passive element
such as resistance and capacitance arising from pixel and liquid crystal.
The actual pixel size is very large in scale and practically device simulation takes long time to simulate pixel behavior and charging/discharging characteristics of liquid crystal.
MixedMode circuit simulation performs both device level simulation and circuit level simulation,
in which IGZO TFT test active structure is for device level and TFT pixel(Cst), liquild crystal(Clc) is for circuit level. As a result, users could trace pixel electrode's voltage during TFT on/off periods and additionally estimates pixel voltage shift by active device characteristics such as a-IGZO
traps, backlight, and other facts. 

{newline}
This example performs 
{bold}MixedMode pixel simulations of IGZO TFT device 
with material properties corresponding to amorphous IGZO (indium galium zinc oxide) material.
For pixel simulation, we refer to articles on SILVACO website(http://www.silvaco.com/content/kbase/tftlcd_sol.pdf or http://www.silvaco.com/tech_lib_TCAD/simulationstandard/2008/apr_may_jun/a2/a2.html).
{newline}
{bold} MixedMode syntax description
Mixedmode circuit description starts with .BEGIN statement and ends with .END statement.
Some passiive elements(Cst and Clc) are connected to Atlas TFT structure in ATFT element. 
Here, Cst is storage capacitance and  Clc is liquid crystal capacitance.
Both are connected to active IGZO TFT device. Gate, Drain, and Vcom pulse are applied to circuit using "Vname" statement. For liquid crytal capacitance model, we used simple constant capacitance value.
Regarding real LC capacitance model, we can use user-defined two terminal element which is defined in
C-interpreter function(tftex14_0.c) and uncomment "bLC" statement.
{newline}

The example shows:

{bullet} Structure formation using Athena syntax
{newline}
{bullet} Structure loading into Atlas and regioin modification to have a region name "GI" and "channel"
{newline}
{bullet} MixedMode Active IGZO device and circuit element description
{newline}
{bullet}  Pixel transient simulation
{newline}
{bullet} Plotting transient response of pixel
{newline}

The key command in a-IGZO:TFT Mixedmode pixel simulation is the
{bold} active device element which is defined in "Aname" statement between .BEGIN and .END.
"atft" device's each electrodes name(gate,source,drain) is connected to passive element and
time dependent voltage source via node number.
For two termianl user-defined device( here, bLC), please refer to 
{bold}tftex14_0.c c-function file and detail descriptions on www.silvaco.com link.
{newline}
{bold} .numeric 
controls various mixedmode convergence and iteration during solution.
{bold} .options fulln
sets the numerical method in mixedmode. Default is full newton method
{newline}
{bold}go atlas  
activates Mixedmode simulation.
{newline}
After completion of transient simulation, it plots charging and discharging behavior of LC in Tonyplot.
{newline}
To load and run this example, select the
{bold} Load example 
button in DeckBuild or File. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.


{subsection} tftex15.in : 3D Amorphous Bottom-Gate IGZO TFT Simulation

Requires:  Victoryprocess/Vcitorydevice
{newline}
Minimum Versions: Victoryprocess 7.14.3.R / Victorydevice 1.10.2.R
{newline}
The oxide TFTs utilizing amorphous InGaZnO material is the candidate material as a switching transistor for pixel or driver transistor for AMOLED in the future large scale and flexible consumer electronics. The foundamental and basic understanding of IGZO materials is very important to realize such a devices in display area. This example performs 3D bottom gate oxide TFT structure generation using 3D Victoryprocess process simulation and then simulates IDVG device characteristics extracting threshold voltage and subthreshold swing.
{newline}

{bullet} Structure formation using Victoryprocess syntax
{newline}
{bullet} Material and model settings for bottom gate passivated IGZO TFT
{newline}
{bullet} DOS(Density Of State) in a-IGZO bulk and at interface between IGZO and gate insulator
{newline}
{bullet} Forward Id/Vgs characteristics and extraction of Vth and Subthreshold swing
{newline}

The bottom gate oxide TFT is initialized by glass substrate thickness of 5um using 
the init statment. The device size in x-y plane is defined by loading Maskviews's layout file "tftex15_0.lay". The initial mesh is added by cartesian statement from loaded mask polygon edge information.
{newline}
The next step is to deposit bottom gate metal and then make gate pattern with mask statement.
The gate edge angle is defined by geometrical etching with 45 degree. The electrode statement is
used to attach "gate" electrode name which is defined in Maskviews layout file.
{newline}
The double gate insulator is composed by SiO2(50nm) and Si3N4(400nm) and deposited by conformal deposition which
is uniformly deposited on the bottom gate topography.
{newline}
The active oxide semiconductor(here, amorphous IGZO) with thickness of 50nm is uniformly deposited
and then patterned by mask "ACT" layer. Here we used a silicon as a default active channel material which will be modified to physical IGZO material in Victorydevice part using REGION MODIFY statement.
{newline}
The etch stopper oxide is deposied for active channel length and source/drain metal contact size.
For etch stopper size we used the same mask layer as "SD" with reverse polarity. This makes a contact to channel layer, channel length, and gate source/drain overlap length. And then source/drain metal
layer is deposted on this etch stopper layer. In this example, 10um channel length is assumed.
The final electrode satement is to make source/drain electrode names.
{newlines}
The SiO2/Si3N4 passivation layers are deposited and then final structure is exported to "tftex15_0.str" file using Delaunay triangulation for subsequent victorydevice simulation.
For better accuracy we used "max.size=0.5" as a global mesh refinement, which means minimum feature size is not exceeded to 0.5um.
{newline}
For more information about Delaunay meshing refinement, you can refer to victoryprocess example section.

The key command in amorphous InGaZnO oxide TFT device simulation is the
{bold} n-type doping in the channel layer
We put 1e16/cm^3 n-type doping for electron carrier in the channel layer using region modify statement.
{newline}
{bold} Source/Drain metal workfunction with barrier height
The source/drain metal workfunction is the sume of IGZO affinity(4.16) and barrrier height of 0.16eV.
{newline}
{bold} Physical model parameters for transport.
You can use finite non-zero contact resistance at source/drain by CONTACT statement.
The dielectric permittivity constant and basic band parameters such as band gap, band-edge mobility, and effective mass of electron were considered in MATERIAL statement. The effective density of states
in band(Nc,NV) were assumed by matching tails states of density of state in sub-band gap. The electron effective mass of 0.34*me is Nc~5e18/cm^3 at room temperature.
{bold} Density of states in sub-band gap of oxide semiconductor 
It is used to define a continuous density of trap states in the a-IGZO active channel bulk with DEFECT
statement. Next, we added interface traps site to the interface between gate insulator and channel using INTDEFECT statement. It is now believed that density of states for oxygen-vacancy(Vo) in a-IGZO material is formed by shallow donor-like states or deep donor-like states. The tail distribution from 
conduction band-edge(Ec) is taken into account by NTA and WTA which are very important factor to characterize the performance of a-IGZO TFT under sub-threshold or below threshold conditions. The high
mobility of amorphous IGZO materials as compared to a-Si:TFT is due to the low acceptor-like tail states(NTA).
{newline}
{bold} Model statement
In this model statement, we assumed the ambient temperature of 300K and Fermi statistics for carrier.
The field-dependent saturation mobility model is taken into account to saturation current level.
{newline}
{bold} Nemerical method
Next, we use PAM.GMRES(64bit) muti-threaded version of iterative numerical solver. it is possible to define the number of CPUs used (-P "all" or -P "# of CPUS) during simulation. The default is 1.
{newline}
For detailed numerical options, please refer to victorydevice manual.
{newline}
{bold} IDVG DC simulation
The IdVg at low drain bias and high bias conditions were simulated and then threshold voltage
and subthreshold swing values are extracted by EXTRACT statement. For sub-threshold swing value, we used slope of transconductance curve and then extracted by 1/Gm.
For accurate subthreshold extraction, it is required to use very small voltage step during DC bias sweep.
{newline}
To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{section} Quantum : Device Simulation with Quantum Mechanics 



{subsection} quantumex01.in : CV Analysis Of Thin Gate Oxide PMOS Capacitor

Requires: S-Pisces/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the CV characteristics of a N-type substrate
MOS capacitor with a nominal 30A gate oxide. The example shows:

{bullet} Calculation of CV curves using AC Analysis 
{newline}
{bullet} Use of the Quantum moments quantum model
{newline}
{bullet} Difference between classical and quantum gate thickness
{newline}
{bullet} Classical and Quantized electron density


A simple 1D MOS capacitor is created in this example with a 30A gate
oxide thickness.  An AC analysis is performed on the device firstly
with the 
{bold} classical 
simulation and the with the 
{bold} quantum 
model swtiched on.

The quantum model is activated by using the 
{bold} quantum 
switch in the models statement for electrons.  Note that this activates 
a quantum moments model which uses a quantum temperature calculation.
This quantum temperature can be viewed in the structure files.  Also,
the cutline created in TonyPlot can be used to examine the classical
and quantum electron concentration differences in the structure.

In accumulation, the channel carrier concentration is changed by the
addition of quantum mechanics. The peak is not so high and the electrons
spread more deeply into the substrate. The difference in gate
capacitance is noticable on the CV plot. Since gate oxide thickness is
often measured using CV techniques, this leads to erroneous results if
QM effects are not accounted for.
{bold} extract 
statements are used to show the calculated Tox from the classical and QM CV curves.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} quantumex02.in : CV Analysis Of Thin Gate Oxide NMOS Capacitor

Requires: S-Pisces/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the CV characteristics of a p-type substrate
MOS capacitor with a nominal 30A gate oxide. The example shows:

{bullet} Calculation of CV curves using ac Analysis 
{newline}
{bullet} Use of the Quantum moments quantum model for holes
{newline}
{bullet} Difference between classical and quantum gate thickness
{newline}
{bullet} Classical and Quantized electron density


A simple 1D MOS capacitor is created in this example with a 30A gate
oxide thickness.  An AC analysis is performed on the device firstly
with the 
{bold} classical 
simulation and the with the 
{bold} quantum 
model swtiched on.

The quantum model for holes is activated by using the 
{bold} p.quantum 
switch in the models statement for holes.  Note that this activates 
a quantum moments model which uses a quantum temperature calculation.
This quantum temperature can be viewed in the structure files.  Also,
the cutline created in TonyPlot can be used to examine the classical
and quantum hole concenration differences in the structure.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} quantumex03.in : Channel Quantization in a PHEMT

Requires: Blaze/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the behaviour of a Pseudomorphic HEMT structure
using the quantum model.  The device is a standard AlGaAs / GaAs / InGaAs
PHEMT with a delta doped layer.

The structure is created within the Atlas syntax.  For more information
on HEMT simulation see the HEMT Examples Section.

Before any external biases are applied,  
{bold} qfactor 
is ramped from zero to unity -
this allows the inclusion of the quantum moments function to be introduced 
gradually into the equation set. A value of one represents a unity pre-multiplier
on the quantum moments function. 

With the Quantum model, the electron concentration will typically be quite 
different to classical prediction. This presents some difficulty for the 
program in terms of the initial estimate to the electron concentration. In 
classical simulations a very good initial estimate to the carrier concentration 
can be derived from the doping profile. However, with Quantum this is not 
always the case. Thus the quantum moments effect can be turned on gradually 
using the parameter
{bold} qfactor
.
{bold} qfactor 
might need to be ramped from very small values to unity to obtain
convergence for difficult problems.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.






{subsection} quantumex04.in : Heterojunction Diode Leakage

Requires: Blaze/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the difference between an AlGaAs / GaAs
heterojunction diode modeled with and without quantum physics.

In the first half of the file, the example calculates the forward and
reverse characteristics of a classically modeled diode.  In the second
half of the example, the quantum model is switched on.  Note that, as
in the previous example, the 
{bold} qfactor 
is used to ramp the level
of quantum moments included in the example for zero to unity.

The overlayed results show around an order of magnitude higher reverse
leakage in the quantum case. This is due to the
{italic} smearing
 of the electron concentration across the heterojunction.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} quantumex05.in : Calibration of Electron Bohm Quantum Potential 

Requires: S-Pisces/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:

{bullet} Use of the BQP model and Schrodinger-Poisson model on same structure
{newline}
{bullet} Calculation of very low frequency C-V curves using QSCV  
{newline}
{bullet} Calibration process
{newline}

This example illustrates calibration of the Bohm Quantum Potential model against 
the Schrodinger-Poisson model for an N-MOS capacitor being biased into
inversion. Because the calibration takes place under conditions of negligible
current flow, the CARRIERS=0 option may be specified on the METHOD statement.  
The N-MOS has a nominal gate oxide thickness of 20 A. The quantity which was
chosen to compare the results of the two models was the quasistatic 
capacitance. The voltage range was 0V to 1V which includes the depletion 
to inversion transition region.

The first section calculates the Quasi-static C-V curves using the Schrodinger
Poisson model.  Note the NUM.DIRECT = 3 specification on the MODELS statement.
This ensures that the anisotropic conduction band structure of Silicon is
accounted for.  Note also that NEW.EIG is also specified on the MODELS statement, this
causes a more efficient method to be used to solve the Schrodinger-Poisson
equation. QSCV is specified on the solve statement and a fine voltage increment
is used in order to give accurate calculation of the Quasi-static Capacitance
as a function of voltage.
The next three sections calculate the C-V curves over the same voltage range
and with the same voltage increment as for the S-P model.  Three different
sets of BQP parameters are used,  the last set gives C-V curves with very good
agreement with the S-P results.  It is possible that a different set will
give even better results, but the ones shown give the same threshold voltage
as for S-P and excellent agreement going into inversion.  It may take many
attempts to obtain close calibration.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} quantumex06.in : Semi-classical versus BQP Quasistatic Capacitance for an N-MOS. 

Requires: S-Pisces/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:

{bullet} Use of the BQP model.
{newline}
{bullet} Calculation of very low frequency C-V curves using QSCV  
{newline}
{bullet} Effects of quantum mechanics on C-V characteristics of NMOS.
{newline}

In this example we illustrate the effects of quantum mechanics on the
quasi-static (i.e. very low frequency) capacitance of an N-MOS capacitor
as the gate bias varies, taking the device from being in accumulation
through to strong inversion.  The main features are the shift in threshold
voltage, equality of the capacitances near flat band and in depletion, and
the different asymptotic capacitance as the gate voltage becomes large,
both +ve and -ve.

The first part invokes the BQP model for both electrons and holes. This
is because quantum effects for both electrons and holes are important on
the same bias sweep.  There is negligible current flow in this device and
so CARRIERS=0 mode can be used,  which is sufficiently robust that the
model can be solved with the gate bias at -3.0 V directly.  A structure file
is saved at this point as an example of the device in accumulation. By
specifying P.Quantum on the output statement the BQP is written to the 
structure file. The gate bias is then ramped all the way up to 3.0V with
QSCV specified on the solve statement in order to calculate and save the 
quasistatic C-V curves. After the final voltage,  another structure file
is output as an example of inversion.  The quantum effects are only apparent 
near the Si/SiO2 interface.

The second part does the semi-classical calculation over the same bias
range.
 
Remarks :  The BQP calculation is a self-consistent one and can take much
longer to run than the equivalent semi-classical one.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} quantumex07.in : Comparison of transport models for a Double gate MOSFET including quantum effects.

Requires: S-Pisces/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:

{bullet} Use of the BQP model coupled with drift-diffusion and energy balance.
{newline}
{bullet} Effect of quantum confinement on carrier and current density.
{newline}
{bullet} Effect of carrier transport model on drain current of device.
{newline}

In this example the drain current of a double gate MOSFET is calculated 
using the BQP to model quantum effects.  A drift-diffusion model featuring
field dependent mobility is compared with an energy balance model with an
energy dependent mobility.  For a device of such small dimensions as in 
this MOSFET,  non-stationary effects will have a significant effect on the
carrier transport.  The energy balance model can approximate these effects,
and when coupled with the BQP model it includes quantum effects too.

The first part of the deck does the calculation with energy balance
(HCTE.EL on the MODELS statement) and Bohm Quantum Potential (BQP.N
on the MODELS statement). FLDMOB with EVSATMOD=0 on the MODELS statement
invoke an energy dependent mobility calibrated for Silicon.
The NOCURRENT parameter is specified on the first SOLVE statement to
directly get a solution with a gate voltage of -0.5 V. A small drain bias
is applied and then the gate biases ramped to gradually turn the MOSFET on.

The second part of the deck does the same calculation using a drift-diffusion
model,  and with the CVT mobility model (which includes velocity saturation). 
The quantum effects are included by using the BQP model.

From the difference in the value of drain currents it is evident that 
non-stationary effects are very important.  The energy balance model
approximates these effects via its energy dependent mobility.
By looking at the electron concentration or electron quantum potential one
can see that confinement effects are similar in the two cases.


Remarks: Explicitly setting the material parameters in the oxide as done
here is not strictly necessary, although it can improve convergence in some
cases.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} quantumex08.in : Silicon FINFET device in 3D with BQP

Requires: DevEdit 3D/Device 3D/Quantum 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:

{bullet} Application of the BQP model coupled with energy balance to
a complex 3D device.
{newline}
{bullet} Application of BQP in case of 2D quantisation.
{newline}
{bullet} Effect of quantum confinement on carrier density in FINFET.
{newline}

The example illustrates the modelling of a FINFET device using BQP and Energy balance in 3D.
The quantisation inside the channel is almost 2-dimensional and since we 
do not have a principal direction of quantisation we cannot be sure that
the model is calibrated until we do a calibration against a 2D 
Schrodinger-Poisson model. This is not currently available in Atlas but
a calibration performed for SILVACO by the authors of the BQP model suggests 
using isotropic effective masses in Silicon of 0.7 m0 with BQP.NALPHA = 0.3
and BQP.NGAMMA = 1.4.  

The 3D device structure is created in DevEdit 3D and the required 
models are set.  After the SOLVE.INIT statement, the solution for
a gate voltage of 0.2 Volts is obtained using the NOCURRENT initial
guess parameter.  A drain bias is applied and then the gate voltage is
ramped to turn the device on. The drain current is plotted in TonyPlot
and the device structure in TonyPlot3D. The cutplane facility of 
TonyPlot3D can be used to look at the electron density and quantum 
potential in the channel, which illustrate the reduced electron density
at the Si/Oxide interface.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} quantumex09.in : AlGaAs/InGaAs/GaAs PHEMT - Approximate calibration

Requires: Blaze/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:

{bullet} Application of the BQP model to III-V materials.
{newline}
{bullet} Example of setting BQP parameters on a material by material basis.
{newline}
{bullet} Rough calibration of BQP by comparing with S-P charge density.
{newline}


In this deck, a pHEMT structure is solved at equilibrium for the Schrodinger
-Poisson model and BQP model.  The BQP parameters are set on a material by
 material basis, and the ones that are chosen represent a reasonable fit of the electron
 density profile. The electron density profile in the channel is matched by
varying the BQP parameters. By observing the change of the key features of 
the profile as the BQP parameters are varied, one can arrive at values which
give close agreement.  This is a time consuming activity.  
 By comparing Q-V or C-V curves one can verify that the chosen parameters are
good enough or refine the calibration further. In this case, fairly good 
agreement was found with the C-V curves from a Schrodinger-Poisson model,
and so these parameters are used in the next example.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} quantumex10.in : Quantum Tunnelling in a Silicon Diode

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This examples demonstrates:

{bullet} Example of a QTREGION statement.
{newline}
{bullet} Example of BBT.NONLOCAL and BBT.NLDERIVS commands.
{newline}

In this example, the QTREGION statement is used to set up a mesh suitable
for tunneling calculations. The device is a degenerately doped silicon p-n
diode.  Non-local Band-To-Band tunneling is selected on the MODELS
statement by using the BBT.NONLOCAL keyword. Because the solution will go
to relatively high levels of tunneling current,  convergence may become 
difficult.  The optional parameter BBT.NLDERIVS is used to improve this.
The diode is biased into both forward and reverse biases.  In forward bias
a tunneling current occurs up to about 0.3 V, and at higher bias the 
usual forward bias diffusion current occurs as can be seen in the LOG file.
The STRUCTURE files, with the BBT tunneling current displayed, show the
actual tunneling current being injected into the device. Under reverse
bias it acts like generation, under forward bias like
recombination.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} quantumex11.in : Quantum Tunnelling in a Silicon Structure with a non-linear junction profile.

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:

{bullet} Example of a QTREGION statement applied to a non-linear junction profile.
{newline}
{bullet} Example of BBT.FORWARD and BBT.REVERSE parameters.
{newline}

In this example the QTREGION statement is used to set up a mesh suitable
for tunneling calculations. The device has two junctions, one which is 
a straight line and the other which is curved. Multiple QTREGION statements
are used to create two QTREGIONs. The contour of the junction is approximately
followed and the SNRM.BEG and SNRM.END parameters are used to match the
QTREGION meshspacing with the device mesh spacing in the direction 
perpendicular to the tunneling direction
is approximately normal to the junction.  An example of F.RESOLUTION is given 
in the QTREGION for the linear junction.  This takes the relative mesh
spacing in the tunneling direction from a data file.

The curved junction is forward biased,  the optional BBT.FORWARD parameter
is used.  The linear junction is then reverse biased,  the BBT.FORWARD
parameter is cleared and the optional BBT.REVERSE parameter is set.  These
two parameters determine where the tunnel current is injected into the device.
BBT.FORWARD injects at the edges of the QTREGIONS, and BBT.REVERSE averages 
over the junction itself.   These schemes can be more stable than the default
option,  which injects the current at the position it actually occurs in the 
model.

From the LOG files we see that there is a forward bias tunneling current,
and from the Structure files we see exactly where the current is injected.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} quantumex12.in : Coupled Mode Space NEGF approach to Double Gate FET

Requires: S-Pisces/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:

{bullet} Use of NEGF_MS model
{newline}
{bullet} Quantum confinement, ballistic transport 
{newline}

This is an example of modeling the ballistic I-V characteristics of a nanoscale double 
gate transistor using the Non Equilibrium Green's function approach.  
Atlas solves a 1D Schrodinger equation in order to find
eigenvalues and eigenfunctions at each slice of the device. 
A quantum transport equation (NEGF) is then solved. 
Due to a varying cross-section of the transistors, Atlas will automatically 
account for coupling between subbands, which is called the coupled modespace approach.
 
First, a rectangular mesh is created. A spacing in the transport direction 
should be fine enough, so that a half-bandwidth of discretized 
effective mass Hamiltonian is 
larger than applied bias.  
Here we consider a simple double gate transistor with flared up 
source and drain extensions.
Device length is 35 nm, channel thickness is 1 nm, and gate oxide is 1 nm
gate length is 10nm. Source and drain extension thickness is 5nm.
Only two carrier injecting contacts (source and drain) are supported in Atlas. 
There can be any number of gates.  
   
Due to the ballistic nature of transport, there is no voltage 
drop near the source and drain contacts. Moreover, the potential 
in the source and drain has to be allowed to float because  the number 
of electrons reflected backward and thus total carrier concentration in  contacts
can change with bias.

For these reasons we use REFLECT on the CONTACT statement to apply 
von Neumann boundary conditions for potential. Note that Fermi levels 
in contacts are fixed.

SCHRODINGER and/or P.SCHRODINGER parameters on the MODELS statement
will tell Atlas that this is a quantum solution. A Schrodinger 
equation will be solved in each slice of the device for electrons and/or holes.  
NEGF_MS parameter specifies that we want to compute transport
using Non Equilibrium Green's Function (NEGF) approach in the mode (subband) space.
If the cross-section is not constant, Atlas 
will take into account coupling between subbands. 
 
The coupling is especially strong near the wide-narrow region interface.
A parameter NEGF_CMS instead of NEGF_MS will enforce the coupled mode space approach. 
A parameter NEGF_UMS instead of NEGF_MS will enforce uncoupled mode space approach.  
Parameter EIGEN can be omitted on the MODELS statement. Atlas will 
automatically decide on the optimum number of subbands required. This 
number may change with bias. Setting the EIGEN parameter will fix the number 
of subbands, which may either cause a loss of precision (if it is too small),
or increase the computation time (if it is too large).

Note that the number of subbands taken into account  may vary along the device.
Parameters OX.SCHRO and OX.MARGIN control wavefunction penetration into oxide.
This ensures that electron density is smooth at the semiconductor-oxide interface.
Here, a parameter NUM.DIRECT is set to 1, which means that only one 
isotropic mass is taken into account.

When all NUM.DIRECT=3, all three pairs of valleys (in the case of Si)
are treated independently. Note that while primed subbands have the same eigen energy due
to the same effective mass in the confinement direction, their transport 
effective mass is different. Therefore, transmission and current due to primed subbands 
are different.

A predictor-corrector scheme for Poisson convergence  is used, where after 
each quantum solution (corrector), a quasi Fermi level is extracted and several 
iterations with classical electron density (predictor) are performed.  
NPRED.NEGF=7 (default) sets the number of predictor iterations to 7
QCRIT.NEGF=3e-3 (default) sets the potential convergence criterium in the NEGF case to 3 mV 
ESIZE.NEGF=2001 (default) sets the number of energy grid points to 2001. 
A nonuniform energy grid is constructed. A larger number may improve precision 
in the electron density calculation  and improve convergence, but increase the computation time.
Parameter CARRIERS on the METHOD statement is set to zero which means  
that only a Poisson equation 
is solved self-consistently with  NEGF equations. 

In the structure file, quantities of interest are potential, carrier density, current density profiles,
bound state energies and wavefunctions.
A user can also probe various energy dependent quantities, which are specific to NEGF method,
and store them in a file at each bias.

Set NEGF.LOG parameter on SOLVE or SAVE statement to save the probes.
ESIZEOUT.NEGF=500 (default) sets the number of energy grid points to 500 in the output
.log file if the PROBE statements are present (see below). A uniform energy grid is used.
The Parameter FILENAME can be specified only once. In this case a file TransvsE$.log 
will be created at each bias point, where $ is the number of the bias point.
Comment lines in the file give the values of terminal bias.
All probes are plotted as functions of Energy. A uniform energy grid is used.

The size of the grid is regulated in the OUTPUT statement (see above).
TRANSMISSION is the number of modes that can pass through the device at a particular energy.
One can also separate contributions due to each pair of valleys using the parameter BAND.
DOSVSE is the local density of states. It can be characterized by the parameters 
BAND, STATE and location X.
DENSVSE is the local carrier density versus Energy, and integrating DENSVSE gives the 
total carrier concentration at this location. CURDVSE is the local current density versus energy,
and integrating CURDSVE gives the total current density at this location. In 
the ballistic case, i.e. when no inelastic 
phonons are present, this quantity should not change with location. 
It can be characterized by the parameters  BAND, STATE and location X.
If the parameters BAND or STATE are omitted, a summation is performed over the 
band or state indices. 

Warning: Poor convergence usually results when there is no injection barrier.
  
To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} quantumex13.in : Drift Diffusion mode space approach to cylindrical Surround Gate FET

Requires: S-Pisces/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:

{bullet} Use of DD_MS model
{newline}
{bullet} Quantum confinement  
{newline}
{bullet} Generation-recombination effects within DD_MS model 
{newline}
{bullet} Floating body effects 
{newline}

This example demonstrates the importance of quantum confinement and floating body effects 
in nanoscale surround gate FETs and shows how to use the  Drift Diffusion mode space  (DD_MS) model.
The first part computes Id-Vg characteristics of an 4 nm in diameter SurFET without generation-recombination
mechanisms. The second part switches on Shockly-Read-Hall recombination, band-to-band tunneling and 
impact ionization, and then compares the results.

Usage of DD_MS model  is quite analogous 
to that of Schrodinger or mode-space NEGF (NEGF_MS) models. 
The DD_MS models is activated by an option DD_MS along with SCHRO (for electrons) 
and/or P.SCHRO  (for holes) on the MODELS statement. The variable CARR on the METHOD 
statement should be set to zero, since multidimensional drift-diffusion solvers are not used.  
Due to a variation of electron density and potential in transverse direction, Dirichlet boundary 
conditions in contacts are not the best option. Instead, a quasi Fermi level is fixed, while 
electrostatic potential is subjected to von Neumann (zero electric field) boundary conditions, 
which are set by specifying REFLECT on the CONTACT statement. 

The Schrodinger equation is solved in each transverse slice to find electron and/or hole eigen energies 
and wave functions.  The minimum required number of eigen states is determined automatically, but may 
also be set by the parameter EIGEN on the MODELS statement. The DD_MS model is compatible with all Atlas 
Schrodinger solvers: 1D and cylindrical in Atlas2D and 2D in Atlas3D. In this example, the 1D Schrodinger
equation is solved in cylindrical coordinates  for all orbital quantum numbers 
at each slice in X direction. The eigen energies are then sorted together with the 
corresponding wave functions.

Position dependent 
eigen energies play a role of conduction (valence) band edge and are used to solve 1D drift-diffusion 
transport equations in each subband. The equations are discretized using Scharfetter-Gummel scheme.   
Atlas mobility models are fully integrated with the method and used in the discretization.  DDMS 
always employs a rigorous mobility-diffusion relation, which is dimensionality dependent in case of 
Fermi-Dirac statistics.  

Generation-recombination (G-R) mechanisms such as Shockley-Read-Hall, Auger and optical recombination, 
band-to-band tunneling, and impact ionization are available in the method. When generation-recombination 
mechanisms are present, it is possible to iterate between carrier density and G-R rates before solving 
the Poisson equation. The self-consistency between carrier density and G-R rates, achieved in this inner 
iteration procedure, will result in a more stable Poisson convergence. The number of inner iterations is 
controlled by the RGITER.DDMS=N and the RGCONV.DDMS=X parameters on the METHOD statement.  Here, N is 
the maximum number of inner iterations (default is 0) and X is the minimum error between 0 and 1 (default is 1e-5). 
It is recommended that you first run a simulation without G-R mechanisms to get a feel for device behavior,
and then increase G-R parameters. 

In addition to a regular structure file, a detailed information on each subband can be stored in an extra 
log file by using option DDMS.LOG on SAVE or SOLVE statements. The file will contain subband-resolved 
quantities, such as eigen energies, carrier densities, current densities, quasi Fermi levels and 
generation-recombination rates.

Unlike the mode-space NEGF_MS model, the DD_MS model can handle only devices with uniform cross-section, 
because quantum mechanical coupling between electron subbands is neglected. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} quantumex14.in : Comparison of DD_MS and NEGF_MS models for nanoscale  SOI FET

Requires: S-Pisces/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:

{bullet} Comparison of quantum and classical transport models
{newline}
{bullet} Quantum confinement  
{newline}

This example compares classical drift-diffusion (DD_MS) and quantum 
 (NEGF_MS) transport models in a 6nm thick Si SOI FET with 30 nm gate length. 
 Both solutions employ uncoupled mode space approach, based on exactly the same 
 Schrodinger and Poisson solvers and exactly the same material constants,
 and thus allowing a one-to-one comparison.
 
 While it is generally accepted that a quantum transport solution should
 give slightly higher current due to source-to-drain tunneling (absent in DD_MS),
 the detailed comparison shows that other factors are more important.  
 A comparison of 
 eigen energy (bound state energy) profiles shows that a potential drop in the 
 source in DD_MS model gives rise to a lower source injection barrier and 
 higher classical current. 
 
 In addition, it is possible to look at the transmission function computed by 
 NEGF and compare its steps with eigen energies at the source injection barrier. 
 Once can see that transmission is non zero below the the maximum of eigen energy, 
 which is due to source-to-drain tunneling. However, the magnitude of a single 
 transmission step never reaches a value of one, which signals a strong 
 reflection of electrons back into the source. 
 
 Slightly higher energy barrier and strong reflection lead to decrease 
 of quantum current as compared to classical solution. 
 
 
 load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} quantumex15.in : Fast  product-space 2D Schrodinger solver

Requires: S-Pisces/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:

{bullet} Using SP.FAST parameter to invoke a fast product-space 2D Schrodinger solver
{newline}
{bullet} Quantum confinement  
{newline}
{bullet} Electron density in a FinFET channel
{newline}

This example demonstrates a fast  product-space 2D Schrodinger solver. 
The product-space solution is a linear combination of products of 1D solutions in X and Y directions. 
This approach is excellent for rectangular geometries, but can also tolerate moderate deviations 
from rectangle. In this example a 10 by 10 nm channel of a FinFET, n-type doped to the density of 
1e20, is considered.   

The solver is invoked by the
SP.FAST parameter on the MODELS statement. Also, a user has to specify a geometry and dimensionality
of Schrodinger solution by writing  SP.GEOM=2DXY. OX.SCHRO and OX.MARGIN parameters which control the 
penetration of electrons into oxide. FIXED.FERMI parameter always sets Fermi level to zero. NUM.DIRECT=3
specifies that all three pairs of conduction band valleys will be taken into account. In the structure file, 
these values are denoted as "Longitudinal", "Transverse1", and "Transverse2", which corresponds to a 
value of effective mass in Y direction equal to ml=0.98, mt1=0.19 or mt2=0.19 respectively.

A comparison can be done to a full 2D solution by switching off 
the SP.FAST parameter.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} quantumex16.in : 3D comparison of DD_MS and NEGF_MS models for nanoscale  FinFET

Requires: Device 3D/Quantum 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:

{bullet} Comparison of quantum and classical transport models in 3D
{newline}
{bullet} Schrodinger-Poisson mesh
{newline}
{bullet} Fast product-space 2D SChrodinger solver 
{newline}
{bullet} Quantum confinement in a FinFET channel 
{newline}

This example compares classical drift-diffusion (DD_MS) and quantum 
 (NEGF_MS) transport models in a 6 by 7 nm thick Si FinFET with 30 nm gate length. 
 Both solutions employ an uncoupled mode space approach, based on exactly the same 
 Schrodinger and Poisson solvers and exactly the same material constants,
 thus allowing a one-to-one comparison. 
 
 A 2D Schrodinger solution in each slice of the device is obtained with 
 a fast product-space 2D Schrodinger solver by specifying the SP.FAST parameter 
 on the MODELS statement. Transport solution (drift diffusion or NEGF) is performed 
 in all uncoupled subbands. 
 
 In order to decrease computational cost, we use a rough mesh in transport (X) direction for
 3D Poisson equation. On top of this mesh, we specify a finer Schrodinger-Poisson mesh
 to decrease a discretization error in mode space drift-diffusion equations, and to avoid 
 insufficient bandwidth of discretized transport Hamiltonian in NEGF equations.
 The S-P mesh is specified similar to the original Atlas mesh by statements SPX.MESH, 
 SPY.MESH and SPZ.MESH. To lower interpolation error and interpolation time, it is
 a good idea to have the S-P mesh  as similar as possible. Thus we keep 
 SPY.MESH and SPZ.MESH the same as the original mesh and change only SPX.MESH.
 Note that due to the prismatic nature of the Atlas mesh, the
 SPZ.MESH statement is optional. If it is not specified, SPZ.MESH will 
 be identical to the original mesh in the Z direction.
 
 S-P mesh can be specified on top of the Atlas mesh to refine the quantum solution, 
 but it becomes especially useful when an external non Atlas mesh is loaded and 
 a rectangular mesh is required by the Schrodinger solver. 
 A rectangular mesh is required by the 2D Schrodinger 
 solver with the SP.FAST option and by 1D solvers in X and Y directions. A general 2D 
 Schrodinger solver and 1D Schrodinger in Z direction 
  can work on a triangular mesh in the X-Y plane.
 
To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} quantumex17.in : Band-to-band tunneling at low temperature

Requires: Blaze
{newline}
Minimum Versions: Atlas 5.24.1.R

This gives an example of using the 
{bold} BBT.NONLOCAL
model to study the forward tunneling current in a degenerately-doped
 Germanium diode at 4.2K.

The deck uses the 
{bold} dbinternal
interface to consider 6 values of doping and to obtain the results in a
format suitable for use with TonyPlot.  The auxiliary file quantumex17_aux.in
is run for the 6 values of doping specified in quantumex17.in.

The auxiliary file sets up a simple p-n diode in Germanium, with a fine
mesh being specified near the actual junction.  Both the donor and acceptor
concentration are set to be the same value, as specified by the $doping
parameter supplied by the main deck.  The actual tunneling junction is set
up by the
{bold} QTREGION 
statement.  Its limits in the y-direction (-0.2 microns to 0.2 microns)
are sufficient to ensure that the tunneling slices start and end outside
the depletion region under the biasing conditions considered.

There are 6 tunneling slices which are parallel and regularly spaced, 
with 151 points each on which to do the tunnel current calculation. 

The parameters on the MATERIAL statement

{bold} me.tunnel and  mh.tunnel

have the major influence on the tunneling current and can be used as 
fitting parameters. ni.min is specified to avoid underflow at these
low temperatures.

The model 
{bold} BBT.NONLOCAL 
is specified on the MODELS statement, along with
{bold} BBT.NLDERIVS
which includes fully non-local coupling into the jacobian matrix.

If you wish to save out a structure point at a given value of bias, you
can see the internal quantum tunnel current as a generation rate. This
is optional.

The bias is ramped up to 0.15 V of forward bias and the I-V curves saved
in logfiles.  The 
{bold} extract
statement is used to find the peak value of the current, and the value
of bias at which it occurs.  The I-V curves are plotted.

The other plots are of the logarithm of the peak current versus the reciprocal
of the square root of the doping level.  This curve is approximately a 
straight line as is observed experimentally.  Also shown is the bias at which
the tunnel current is a maximum.  This increases with the doping level,
reflecting the more favourable band lineup for tunneling under more
degenerate doping.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} quantumex18.in : GaAs n-type Resonant Tunneling Diode

Requires: Blaze/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R


This example considers n-type GaAs RTD with 2nm wide double barriers separated by a 2nm well.
The sumulation is based of a self-consistent solution of Poisson and Non-Equilibrium Green's 
function equations.
To launch the model, use N.NEGF_PL1D and/or  P.NEGF_PL1D on the MODELS statement. 
This will solve a 1D model in one slice and copy it to all other slices.
If slices are not equivalent, use N.NEGF_PL and/or  P.NEGF_PL to solve a 1D model
for each slice. Energy grid size in the NEGF solver is regulated 
by ESIZE.NEGF on the MODELS statement (default is 2001). You may increase it up 
to 10000   for better convergence. To set broadening in quazi-equilibrium regions, 
use ETA.NEGF (default is 0.0066 eV). Increase it to 0.01 eV for better convergence.
Physically, the broadening corresponds to inelastic electron-phonon scattering, and 
is necessary  to fill emitter  quazi-bound states.

In order to solve for eigen energies and wavefunctions, we use the NEGF.EIG paramater of the 
SOLVE and SAVE statement.  NEGF.EIG can be switchedoff to save computation time, 
if the information on eigen energies is not required.  Use EIG.YMIN and EIG.YMAX 
parameters on the models statement to choose only states localized in this region.

To gain insight into  transmission, DOS and current spectra, we use PROBE statements.
Spectra files will have names quantumex18_TranvsE_1.log, 
quantumex18_TranvsE_2.log etc. for each time you set NEGF.LOG on the SAVE statement.
Setting X-location is not needed if you solve only one slice (N.NEGF_PL1D).

Additionally, we probe total charge and resonant energies at each bias point 
and store them in the IV log file.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} quantumex19.in : SiGe p-type Resonant Tunneling Diode

Requires: S-Pisces/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R


This example considers a p-type SiGe RTD with 2nm wide double Si barriers separated by a 
2nm SiGe well. A two-band model is used for hole bandstructure. 
Band offsets and effective masses are set by DEV.HH, DEV.LH and MHH, MLH parametrs on 
the MATERIAL statment. The convergence criterium  for the maximum change in potential is set 
by the QCRIT.NEGF parameter on the MODELS statement to 0.1 meV.

In order to solve for eigen energies and wavefunctions, we use NEGF.EIG paramater of the 
SOLVE and SAVE statement.  NEGF.EIG can be switchedoff to save computation time 
if the information on eigen energies is not required.  Use EIG.YMIN and EIG.YMAX 
parametrs on the models statement to choose only states localized in this region.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} quantumex20.in : Non-local inelastic trap assisted tunnelling in a MOS-C

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

This example shows how to model the tunneling current through an insulator defect level
using the ITAT.SC.EL model.

It demonstrates :

{bullet} Setting up a Trap level for tunnelling using the DOPING statement
{newline}
{bullet} Setting up a self-consistent version of the ITAT model.
{newline} 
{bullet} Visualising the results of the ITAT model.

A simple MOS-C is set up using Atlas mesh commands,  and the statement
{newline}
{bold} doping region=2 uniform tat.trap conc=1.0e19 acceptor sign=1.0e-13 sigp=1.0e-13  e.level=3.0
{newline}
sets up a spatially uniform trap concentration with the tat.trap parameter.  These
traps are unlike conventional traps and their occupancy fractions are determined solely
by the tunnel current passing through them.  This statement also sets the trap capture cross
sections (1.0e-13 cm^2), type (acceptor) and energy level below the conduction band (3.0 eV).
The ITAT.SC model for electrons is enabled on the models statement
{newline}
{bold} models itat.sc.el tat.slicepts=51 
{newline}
This causes a quantum tunnelling region to be automatically set up, with 51
points along each tunnelling slice.  The self-consistency means that the
tunnel current is injected into the current continuity equations in the semiconductor.

The next part is a steady state voltage ramp of the gate.  This causes a tunnel
current to flow through the traps in the oxide, and affects their occupation
probabilities by charging them up.  After this the gate voltage is returned
to zero on a transient ramp and the current obtained up to a simulation time
of 0.01 s. After the initial transients,  the tunnelling current decays with 
a power law dependence on time.  The change of charge in the device causes a 
displacement current to be present too.  The trap occupancy is shown as a
function of depth in the oxide for the equilibrium case, when the steady-state
bias is 2.0V and after partially discharging.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} quantumex21.in : Quantum Well Infrared Photodetector: Spectral and Angular Response

Requires: S-Pisces/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R


In this example, we simulate intersubband GaAs/AlGaAs n-type multiple quantum
well infrared photodetector (QWIP). We optimized the material and geometrical 
aspects of the QWIP to tune the wavelength of its peak responsivity, and to 
eliminate all but one bound state per well. 

At a voltage bias commonly found in experimental conditions for these systems, 
we calculate the optical gain, and estimate the radiative capture rate of the
device. We confirm the radiative capture to be much slower than the known 
phonon-driven capture for such detectors.

Intersubband n-type QWIP detectors only operate at oblique incidence angles.
We simulate the response of the detector for angles ranging from 0 to 80 degrees
with respect to the normal, and close to the wavelength of peak response. 
The results take into account the coherent multiple reflections of radiation 
inside the active region thanks to the Transfer Matrix Method used.

We simulate the spectral response of the detector, obtaining the absorption 
and the generated photocurrent for a beam at 30 degrees with respect to the 
normal. The physical structure and material properties of the device allow 
only 1 bound state to exist. We set WELL.CNBS=2 in order to allow Atlas to 
search for up to two states, and we confirm in the output that only 1 state 
exists. This is why the bound-bound transition contribution to spontaneous 
emission is zero. A non-zero contribution would indicate the existence of 
multiple bound states, and therefore, degraded device performance.

Detailed description of models and corresponding parameters used in this 
simulation can be found directly in the input deck. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} quantumex22.in : Laser Diode Simulation using Luttinger-Kohn k.p model

Requires: S-Pisces/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R

The example demonstrates the use of Luttinger-Kohn k.p model to calculate the band 
structure and optical response of the active layer of a simple quantum well laser 
diode. The response is fully coupled to the drift diffusion equations during the  
simulation, which biases the diode into a positive gain regime.

The example illustrates the differences between the coupled k.p model with its
corresponding effective mass approximation. The comparison is made between:
band structure,
density of states,
optical gain,
optical transition matrix elements,
and band character 

Detailed description of models and parameters used during the simulation can be found 
in the input deck itself. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{section} OPTOELECTRONICS :  Optoelectronics Application Examples

{subsection} optoex01.in :  Photodetector : Overview and Structure Definition

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

The following set of examples demonstrates how to extract device
characteristics for general photodetectors.  These characteristics are
of interest to those involved in the design of PN and PIN photodiodes,
avalanche photodiodes, photoconductors, phototransistors, optical FETs
and MSMs.  These examples focus principally on optoelectronic
characteristics as opposed to the purely electronic behavior of
photodetectors (e.g. dark current, capacitance). 

The following examples will address a PIN photodetector.  The extraction 
techniques used on the PIN device will equally apply to other
photodetector devices.  The device for these examples is described
in the input file "optoex01.in".  This input file should be run before
any of the other examples in this section as it provides the base
device structure used in the other examples.

The first section of the input file specifies the mesh.  In this 
case, the mesh is 10 microns by 10 microns.  The spacings were chosen 
to help resolve the P+ N and N N+ junctions.  The 
{bold} space.mult 
parameter is used to make the mesh coarse for fast simulation.  For more accuracy,
the value should be set to unity.

The second section of the input file specifies the structure of the 
device.  The device is a square of silicon with an anode extending
across the front surface (y=0.0) and a cathode across the bottom.
It is uniformly doped N-type at 1.0e14, with heavily doped P+ and
N+ regions at the front and back surfaces respectively.

The third section of the input file specifies which material models
will be used in the simulation.  Here SRH and Auger recombination
mechanisms have been specified since they have important effects
on the quantum efficiency of photodiodes.  Concentration and
field dependent mobility models are also specified.

The last section of the input file is used to obtain an initial
solution.  The initial solution is written to a solution file that is
used in all the subsequent photodetector analysis examples.  The output
file   can be viewed using TonyPlot.  This shows the structure of the
device and the device mesh.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} optoex02.in :  Photodetector : DC Characterization

Requires: S-Pisces/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

The first example involves characterization of steady state
characteristics of the device, and demonstrates extraction of
DC currents as a function of optical source power.  It 
also demonstrates the use of multi-spectral sources.  The source
spectrum is described in the file "optoex02.spec".

The first section of the input file specifies that the mesh
and device structure is taken from the previous example. The second section
of the file sets the same material models that were specified
in the previous example.

The third section of the input file specifies the optic source.
In this example the source originates 1 micron above the device
and is directed normal to the front surface of the device.  The
source spectrum is described in the file "optoex02.spec".  This
spectrum is sampled at 5 discrete samples between the wavelengths
of 0.5 and 0.8 microns.

The fourth section of the file sets up the initial operating
bias for the simulation.  In this case an operating bias of 2.0 volts
is chosen.

The last section of the input file specifies that the optical
source intensity will be ramped from 0 to 1 W/cm^2.  During
this ramp, steady state currents are extracted and saved in
the log file. 

The results are displayed by TonyPlot. The first figure shows several
curves.  The first, source photo current, is the equivalent current
what would be observed if all the light from the source were detected.
The second curve, available photo current is the equivalent current
that would be observed if all the light absorbed were converted to
terminal current.  The difference between the source and available
photo currents is due to part of the light passing all the way through
the device.  The third curve is the cathode current.  By taking the
ration of the cathode current with the source photo current, the quantum
efficiency as a function of source intensity is plotted in the second
figure.  Here the device quantum efficiency is about 91% and is
relatively independent of source intensity.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} optoex03.in :  Photodetector : Transient Response 

Requires: S-Pisces/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R


This example deals with time domain response of the device
to time dependent optical sources.  This example
will extract the transient response of the device to an optical
source being "turned off".  

The first and second sections of the input file are the same as in the
DC example described previously. The first section specifies that the device
structure is read in from an external file. The second section specifies the material
models used.  The third section of the file specifies a normally
incident monochromatic source.  The wavelength of the source is 623 nm, 
 equivalent to a HeNe laser wavelength.

The fourth section of the input file sets the initial biasing
conditions of the device.  Here again the device is biased 
to 2.0 volts.

The last section of the input file specifies the transient.  In this
case the DC solution at a source intensity of 5 W/cm^2 is obtained.
Then, the source intensity is ramped linearly to 0 over a time
of 1 ns.  Terminal data is then collected over the next 9 ns.  The
terminal data is saved to the log file.

The results of the example are viewed in TonyPlot. They compare the
available photo current with the cathode current as a function of
time.  In this case the cathode current lags the source transient by a
fraction of a nanosecond.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} optoex04.in :  Photodetector : AC Response 

Requires: S-Pisces/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This input file analyzes the small signal response of the device
to a small signal optical source.

The first four sections of the input file are identical to the
corresponding sections in the input file for the DC example
described previously.  

The fifth section of the file specifies that a DC solution at
a source intensity of 5 W/cm^2 is obtained.  After the DC
solution, the small signal response of the device to an small
signal optical source of 1 mW/cm^2 is extracted for frequencies
ranging from 100KHz to 100GHz.  The full AC terminal characteristics 
are saved in the log file.

When the results are viewed in TonyPlot, they show that the device has a
cutoff frequency of about 1 GHz.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} optoex05.in :  Photodetector : Spectral Response 

Requires: S-Pisces/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

The final example in this set involves the extraction of spectral
response data.  

The first four sections of the input file are the same as those in the
previous examples.  The exception is that a monochromatic wavelength of
100nm is specified.  In the last section of the file, solutions are
obtained for a 1 W/cm^2 intensity at discrete source wavelengths of 0.1
to 0.8 microns. The
{bold} lambda 
parameter of the 
{bold} solve 
statement is used to set the wavelength for each solution. The terminal
characteristics and wavelength results are saved to the log file.

The results of the simulation shows that the device exhibits good
quantum efficiency below a wavelength of about 700 nm.
 
To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} optoex06.in :  Luminous Efficiency of a III-V LED Device  

Requires: Blaze/LED
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates how the radiative recombination models 
in Atlas can be used to analyze the luminous efficiency
and of LED devices. 

The objective of this example is to forward bias the LED such that
radiative recombination occurs in the active layer of the device.  Then
by extracting the integrated radiative recombination rate and total
integrated recombination rate, the luminous efficiency
of the device can be measured.  Also, the integrated radiative recombination rate as a
function of bias voltage can be extracted to estimate the luminous
power versus bias voltage.

{bold} Mesh Generation 

In the first section of the input file, a mesh
covering an area of 4 microns by 4 microns is defined.  The mesh uses the
"diag.flip" option since it is symmetric about the center in "X".
Mesh spacings are specified to try to resolve the heterojunctions
in the "Y" direction and the doping profiles in the "X" direction.
An eliminate statement is used to reduce the number of grid points
used, in the direction of the substrate.  Also, the value of the
"space.mult" parameter has been set to 2.0 to provide faster
simulation.  For better accuracy (and longer simulation time)
this value should be set to a smaller number.

{bold} Region and Electrode Specification 

The device is composed of five regions: a GaAs "p" contact
region, an AlGaAs cladding layer, the GaAs active
region, a second AlGaAs cladding layer and an
n-type GaAs substrate.  In this example the "grad" parameters
were used to grade the heterojunctions between the first and
second layers and the fourth and fifth layers.  The heterojunctions
at both sides of the active layer are modeled as abrupt.

A "p" contact electrode is defined at the center of the top of the
device.  The "p" contact is narrower than the device to confine the
photo-luminescence to a narrow region in the active layer.  The
substrate electrode extends across the device at the bottom.

{bold} Doping Profile Specification

The doping profiles in the device are specified in the third section
of the input file.  Here the first three layers are lightly doped
"P" type, while the last two layers are heavily doped "N" type.
In addition a "P+" type profile is defined around the "p" contact.

{bold} Material Models

In the fourth section of the file,  a set of material
and model parameters is specified.  For analyzing luminous efficiency,
all principal recombination mechanisms are selected.  In addition,
a radiative recombination constant for all the
materials is set.  In the solution part of the file 
the individual contributions of the various mechanisms to estimate
luminous efficiency will be extracted.

{bold} Output

In the fifth section of the file, the various
output parameters that will be written to the solution file during
the solution process are chosen.  These parameters will allow the user to look
at the conduction band edge energy, the valence band edge energy,
the total recombination rate, the SRH recombination rate, the
Auger recombination rate and the radiative recombination rate.

{bold} Initial Solution

In the sixth section of the file, an initial
solution with no carriers is done.  This usually provides a good
initial guess for the full, 2 carrier solutions to follow.

{bold} Bias Ramp

In the seventh section of the file the bias voltage
across the LED is ramped from 0.0 V to 2.0 V in the forward bias direction.
In this section a full two carriers solution  will be done so
that recombination data can be observed.  In the first line
of this section of the file, an output log file
is specified. Current-voltage data will be written to this file. In the
solve statement, a luminous wavelength 
{bold} l.wave 
is set so that luminous power can be extracted during the ramp.  In
addition, the saving of an output file is set in the solve statement so
that  snapshots of the device can be displayed at each step of the
bias ramp.

{bold} Extraction

In the last section of the input file, the integrated
total and radiative components of the recombination rate in the
device are extracted.  The luminous efficiency can be estimated by the ratio
of these values.

{bold} Results

From these  results,  the luminous efficiency can be calculated.
The luminous efficiency is defined at the ratio of the radiative
recombination rate to the total recombination rate.  The extracted
values of these rates should be printed at the end of the run, giving
a ratio a value of 70%.

To view the results, first start up TonyPlot with the solution file .
This file corresponds to the device structure after the completed
voltage ramp. Once TonyPlot has started you should choose to display
a contour plot of the radiative recombination rate.  In this plot
we can see the relative luminescence in the active layer compared
to other regions of the device.  In this case most of the radiative
recombination should be confined to the active layer of the device.

The log file contains all the terminal characteristics.  This file
contains values of the calculated luminescent power as a function of
device bias voltage.  Once the file is loaded into TonyPlot you should
select to display "anode bias" along the x axis and "Luminescent power"
along the y axis.  In this figure it is seen that the device "turns-on" at
about 1.4 Volts.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} optoex07.in :  User-defined Photo-Generation Rate

Requires: S-Pisces/Luminous/C-Interpreter
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates how an interpreter function can be used to
specify arbitrary generation rate profiles in the device. It shows:
{newline}
{bullet} Definition of a 2D diode structure using Atlas syntax
{newline}
{bullet} Setting of a user-defined generate rate in the 
{bold} beam 
statement

In this example,
the interpreter function is used to emulate the absorption of normally
incident light.  Since this model is a built-in feature of Luminous,
the results can be compared with the built-in model.  To do this
run radiate.in and look at the output.  Edit radiate.in and comment
out the parameter
{bold} f.radiate=optoex07.lib 
and run the file again.  In 
either case the results should match.  The function in optoex07.lib
can be varied to prove that the interpreted functions is being used
in the first case.

The user-defined function is in the text file 
{bold} optoex07.lib 
. This file can be edited manually to set any function or
shape of photogeneration profile in the device. The value of the
photogeneration rate from the subroutine is multiplied by the value of
the
{bold} b1 
parameter of the 
{bold} solve 
statement. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} optoex08.in : Observation of coherent effects.

Requires: S-Pisces/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:
{newline} 
{bullet} Standing wave pattern created by interfering waves
{newline}

This example shows an added capability of Luminous to describe coherent
effects in 2D. The 
{bold} bpm 
parameter used in the beam statement ensures
that the beam propagation method be used by Luminous instead of ray
tracing. This is equivalent to using the wave optics approach instead of
geometrical optics. The effects of optical wave diffraction and
interference are automaticly taken into account when the beam
propagation method is used.

Interference between forward propagating wave and back reflected wave
creates a standing wave pattern shown in this particular example.

Other parameters that can be specified in the beam statement for the
beam propagation method are 
{bold} longit.step 
and 
{bold} transv.step
. These
parameters are used to set respective step sizes for the internal bpm
grid. When the step sizes are not defined explicitly, the default
values are used. The default step size in both directions is equal to
wavelength/16.0. It is 
{bold} emphatically not recommended 
to use step sizes
larger than wavelength/2.0, especially if coherent effects are of
interest. The user is also cautioned against use of extremely small step
sizes as they can result in unnecessarily long computation times.
Default values provide for adequate treatment in most cases.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} optoex09.in :  Use of Anti-Refective Coating 

Requires: S-Pisces/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This example shows how anti-reflective coatings can be simulated in
Atlas. This example demonstrates:
{newline}
{bullet} Construction of simple silicon region
{newline}
{bullet} Specification of normally incident light beam
{newline}
{bullet} Definition of anti-reflective layer using the INTERFACE statement
{newline}
{bullet} Simulation of spectral response

The structure and beam definition sections of this example are similar
to other simple examples in this section. The wavelength of the beam
will be set on the
{bold} solve
lines, so it is not defined in the 
{bold} beam
statement.

The 
{bold} interface 
statement is used to define optical properties of a coating associated 
with that interface. A user can define an anti-reflective coating 
(considered in this example), a dielectric mirror, or an ideally reflecting
surface using the 
{bold} interface 
statement. Note that the coating is not physically present in 
the structure defined for Atlas. This allows a user to specify certain
optical properties while not affecting electrical properties of the structure. 
The parameter 
{bold} ar.thick 
defines the thickness of the coating layer. 
{bold} ar.index 
defines the refractive index of the layer. Most commonly the thickness 
of a single-layer anti-reflective coating is a quarter of a wavelength 
(in the material of the coating). For a single-layer coating or for the 
first layer of a multi-layer coatingi, a user needs to specify the coordinates 
of the points defining the coated surface 
{bold} p1.x
, 
{bold} p1.y
, 
{bold} p2.x
, and 
{bold} p2.y
.
If a coating has more than one layer, each subsequent layer must have 
the number of the coating and the number of the layer specified by parameters 
{bold} coating 
and 
{bold} layer
. 
Coatings should be specified in order. Layers of one coating should also 
be specified in order from top to bottom.

If a coating is made of an absorbing material, it is possible to take absorption
into account by specifying 
{bold} ar.absorb 
parameter. Totally reflective coatings are also allowed. The coating will 
behave as an ideal reflector if 
{bold} ar.index 
parameter is set to a value > 1000.

The refractive indexes in the structure can be checked using the
{bold} index.check 
parameter. This produces output of the real and imaginary index in the silicon
as a function of the specified wavelength.

The final plot compares the spectral response of the cases with and
without the ARC. Note the increase around 0.6um wavelength for the one-layer 
ARC. A two-layer coating is capable of reducing the reflectivity over a wide 
range of wavelengths. In this example the terminal current is not important 
since we consider a one terminal device with no applied bias. 
The 
{italic} source photocurrent
is the amount of current generated by the light source.
{italic} available photocurrent
is the amount of current absorbed by the semiconductor. Differences
between these two are due to reflection, transmission or absorption in
non-semiconductor materials. The ratio of available/source photocurrents
is often known as 
{italic} external quantum efficiency.
This quantity can be plotted using the functions in TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} optoex10.in : Defining a 2D Gaussian Intensity Profile

Requires: S-Pisces/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:
{newline} 
{bullet} How to define a 2D Gaussian intensity profile

This example shows an added capability of Luminous where, instead of a uniform beam intensity applied to the surface of the silicon, a Gaussian profile for the beam intensity can be defined.

The definition of the beam is now:

beam num=1 x.origin=2.5 y.origin=-5.0 angle=90 wavelength=0.623 rays=101 gaussian mean=0 xsigma=0.25

The additional parameters are 
{bold} gaussian
, 
{bold} mean
 and 
{bold} xsigma
. The GAUSSIAN parameter defines that the intensity distribution is a gaussian, 
MEAN specifies the location of a mean value of the Gaussian source 
in the X direction related to the beam coordinate system, and XSIGMA specifies 
the standard deviation in the X direction of the beam coordinate system.

We recommend that the RAYS parameter is set to a large number as the spacing 
between rays is always a constant (width of the beam / RAYS ) so in order to 
obtain a smooth gaussian profile a large number of rays may be necessary.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} optoex11.in : Defining a 3D Elliptical Source

Requires: Device 3D/Luminous 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:
{newline} 
{bullet} How to define a 3D elliptical source

To define an optical source in Luminous 3D is a little more complex than one in Luminous2D. The following steps are needed to define an elliptical beam using the BEAM statement.

The origin of the beam is defined as (X.ORIGIN, Y.ORIGIN, Z.ORIGIN), similiar to 2D, but an additional two parameters
{bold} angle 
and 
{bold} theta
 are also needed to define the orientation of the beam. The angle parameter specifies the angle of the beam relative to the device X axis 
and the theta parameter specifies the rotated angle of propogation relative to the X-Z plane.

The centre of the elliptical source can be offset from the centre of the beam coordinate centre using the parameters 
{bold} xcenter  
and 
{bold} zcenter
 but in this example we have chosen the centre of the elliptical source to coincide with the origin of the beam system.

After defining the beam coordinate system and the location of the elliptical beam, it is necessary to define the elliptical radii of the beam using the parameters 
{bold} xradius
 and 
{bold} zradius.

The sampling frequency of the source beam must now be chosen. The samples are taken along each of the beam front principle axes, ie the x and z planes,
 in constant steps. The number of sampling points in each axis is defined by the parameters 
{bold} nx
 and 
{bold} nz
.

Finally the wavelength of the light is defined, the front side reflections are switched on with the parameter
{bold} metal.reflect 
so that all metal regions act as perfect optical reflectors and the parameter 
{bold} raytrace
 identifies a file within which the traced rays are saved so they can be plotted with TonyPlot 3D.

To load and run this example, select the 
{bold} Load example 
button while this text is displayed. The input file and several support
files will   be copied to your current working directory at this time.
Once loaded into DeckBuild, select the
{bold} run 
button to execute the example.



{subsection} optoex12.in : A 3D Elliptical Source with a Gaussian Optical Intensity

Requires: Device 3D/Luminous 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:
{newline} 
{bullet} How to define a 3D elliptical source with a Gaussian optical intensity profile.

This example combines the example optoex11.in with example optoex10.in to create a gaussian optical intensity profile for a 3D optical source. 
A description of the syntax for defining these effects is decribed in those examples.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} optoex13.in : A 3D Diode Simulation with Small Signal Optical AC Analysis

Requires: Device 3D/Luminous 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:
{newline} 
{bullet} How to define an optical source that has a small signal ac optical component.

This input file analyzes the small signal response of a 3D device
to a small signal optical source.

The first four sections of the input file are similiar to the
corresponding sections in the input file for example optoex01.in
described previously.  

The fifth section of the file defines the optical source in a similiar manner to example optoex10.in described previously. 
The applied bias to the cathode contact is then increased to 2 V with no applied light. 

The sixth section defines an optical source intensity of 1 mW/cm^2 and a small signal response of the device to this optical source is extracted 
for each decade in frequency between 0.1 MHz and  100GHz  inclusive. The
full AC terminal characteristics  are saved in the log file.

When the results are viewed in TonyPlot it shows that the device has a
cutoff frequency of about 1 GHz.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} optoex14.in : Defining a Gaussian Beam with Non-normal Incidence

Requires: S-Pisces/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:
{newline} 
{bullet} How to define an optical source that has a gaussion optical intensity
{newline} 
{bullet} Application of the periodic boundary condition for light sources

The first four sections of the input file are similiar to the
corresponding sections in the input file for example optoex01.in
described previously.  

The fifth section describes the beam properties and follows in general the beam 
properties of example optoex10.in described previously. 

In Atlas, by default, an unspecified boundary condition for device simulation 
is assumed mirror or periodic.  However, for ray tracing by default the edges 
of the device are considered interfaces with a vacuum, and therefore reflections 
are calculated along these boundaries. In some cases it is useful to be able to 
specify the edges to be periodic in regards to ray tracing as well. This is 
particularly true when the beam is not normal to the plane.

This example runs two simulations; the first with the default boundary conditions 
for ray tracing, and the second with periodic boundary conditions for the rays. 
The periodic boundary conditions are chosen by the 
{bold} periodic
 parameter of the BEAM statement.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} optoex15.in : Defining a 3D Lenslet 

Requires: Device 3D/Luminous 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:
{newline} 
{bullet} How to define a 3D lenslet
{newline} 

One of the common applications of Luminous in 2D has been the simulation of a lens on top of a device. 
To facilitate a similiar function in 3D requires creating this 3D lens which can be difficult without using a 3D process simulator. 
To enable this, additional commands have been implemented into Luminous 3D. 

The lenslet is represented by a spherical section on top of the x-z plane. The BEAM statement parameters
{bold} lens.x 
{bold} lens.y 
and 
{bold} lens.z 
are used to define the centre of a sphere. The radius of the sphere is specified with the parameter
{bold} lens.radius 
and the location of the planar part surrounding the lenslet relative to the y=0 plane is specified by the
{bold} lens.plane 
parameter. Finally the index of refraction of the volume between the lens plane and the device surface is specified with the 
{bold} lens.index 
parameter.

The volume associated with the lenslet is neither meshed nor simulated and is only used in the ray tracing.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} optoex16.in : Diffracting 2D Gaussian Beam.

Requires: S-Pisces/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:
{newline} 
{bullet} Diffraction of a spatially confined beam
{newline}

This example shows an added capability of Luminous to describe
diffraction in 2D. The input deck of this example is identical to that
of optoex10.in except for the 
{bold} bpm
 parameter in the 
{bold} BEAM 
statement. This
parameter specifies that the beam propagation method be used by
Luminous instead of ray tracing. This is equivalent to using the wave
optics approach instead of geometrical optics. The effects of optical
wave diffraction and interference are automatically taken into
account when the beam propagation method is used.

Diffraction effects of a Gaussian beam propagating in silicon is shown
in this particular example.

Other parameters that can be specified in the beam statement for the
beam propagation method are 
{bold} longit.step 
and 
{bold} transv.step
. These parameters are used to set respective step sizes for the internal bpm
grid. When the step sizes are not defined explicitly, the default
values are used. The default step size in both directions is equal to
wavelength/16.0. It is 
{bold} emphatically not recommended 
to use step sizes
larger than wavelength/2.0, especially if coherent effects are of
interest. The user is also cautioned against use of extremely small step
sizes as they can result in unnecessarily long computation times.
Default values provide for adequate treatment in most cases.

Some parameters specific for the ray tracing are ignored in the beam
propagation method. For details, see BEAM statement in the Atlas
manual.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} optoex17.in : Crosstalk in InSb Detector Arrays

Requires: Device 3D/Luminous 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates:
{newline} 
{bullet} Crosstalk as well as Quantum efficiency as a function of
InSb detector design parameters.
{newline}

Crosstalk is one of the main parameters that critically affect the 
resolution of detector arrays. Electrical crosstalk is attributed
to carriers that are photogenerated under one detector, diffusing 
and being collected by another detector in the array. As the photodiode
size and the pitch (distance between photodiodes) of the detector 
array get smaller, there is a greater probability of crosstalk influencing 
system performance since the probability of a generated carrier being 
collected by a neighboring junction increases. Atlas will be used to 
study the crosstalk and also the quantum efficiency of a 5 x 5 InSb 
detector arrays in the three dimensional domain.
 
The structure consists of InSb photodiodes fabricated on top of the 
InSb buffer layer. The p+ regions were doped with acceptor concentration 
of 1 x 1019 cm-3 and the buffer layer was doped with donor concentration
of 1 x 1015 cm-3. The contacts on these photodiodes are ohmic and they 
are named as anode 1, anode 2, ... anode 25 in the simulation. The cathode
is formed on top of the buffer layer surrounding the photodiodes. 

In this simulation, a multi-spectral source will be used and the source 
will be a black-body radiator operating at a temperature of 2000 Kelvin.
The 
{bold} power.file 
parameter in the 
{bold} BEAM 
statement will be used for that purpose.

A parametrized input deck 
{bold} optoex17.in 
was created with 4 parameters which are the
{bold} size of the pixel 
the 
{bold} pitch between pixel 
the 
{bold} InSb epilayer thickness 
and
{bold} InSb buffer layer thikness 

The variation of these parameters are made using the
{bold} DBInternal 
capability of DeckBuild. The file name is
{bold} optoex17_doe.in 
. See
{bold} DOE: Design of Experimenst Example 
section of DeckBuild for more information on how to use
{bold} DBInternal
.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. 
{bold} optoex17.in 
will be loaded by default. You should load
{bold} optoex17_doe.in 
for design parameters variation using DBInternal. Once loaded into 
DeckBuild, select the
{bold} run 
button to execute the example.



{subsection} optoex18.in : Reach Through APD (RTAPD)

Requires: Blaze/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R


This example demonstrates:
{newline} 
{bullet} An Avalanche PhotoDiode where Absorption and multiplication
reions are separated.  It also demonstrates the use of the Geiger mode to study 
its behavior as a sinlge photon counter at biases beyond breakdown.
{newline}

The APD should maximize photon absorption. However the multiplication
region should be thin in order to miminize secondary ionizations. These two
conflicting requirements are acheived in Separate Absorption Multiplication
(SAM) reach Through APD.

Advanced III-V heterostructures can be used to detect different wavelengths
of light such as infra-red and ultraviolet.  These heterostructures are often
combined with silicon layers which are used for carrier multiplication. A 
typical example is shown here.

Since the device was mainly 1D we used the
{bold} mesh auto 
feature of Atlas to create the structure. When using auto-meshing, you must 
only specify the mesh in the X direction using X.MESH statements. The mesh
spacing in the Y direction is specified in the REGION statements. The REGION 
statement is used as well to specify the material types of individual "regions", 
their composition, doping, strain and certain other characteristics 
describing how the region is to be modeled.

The photogeneration rate is calculated using the
{bold} beam 
statement. The beam was back illuminated for better gain in the linear region and a wavelength of 1um and a beam intensity of 0.1Watts/cm2 was used.

IV characteristics (dark as well under illumination) are simulated by ramping
the anode voltage up to around -22V where the diode starts to break down and then beyond to -30V where the Geiger mode comes into play.  

For the Geiger mode simulation, a probe statement was added so that the electron avalanche probabilities at the designated point versus bias could be seen on the log file.

The filename=optoex18_g option for the probe statement was used so that Geiger line integrals would be stored at bias points.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} optoex19.in : Cylindrical Avalanche Photodiode

Requires: S-Pisces/Luminous
{newline}

Minimum Versions: Atlas 5.24.1.R


This example demonstrates:
{newline} 
The Atlas Geiger mode capability for a 3D avalanche photodiode operated as a 
single photon counter at biases beyond breakdown - the Geiger counter mode.
{newline}
This 3D APD was made from silicon and  simulated in 2 cylindrical coordinates (r,y).  
The anode is a diffused p+ disc in 6 microns of epitaxial n- silicon on n+ silicon substrate.

IV characteristics (dark as well under illumination) are simulated by ramping
the cathode voltage up to around 36V where the diode starts to break down 
and then beyond to 45V where the Geiger mode comes into play.  

For the Geiger mode simulation, a probe statement was added so that the electron 
avalanche probabilities at the designated point versus bias could be seen on the log file.  
The cathode was ramped to 70V, a bias at which single electrons or holes at some points 
in the device have a 100% chance of initiating an avalanche.  The probabilities can be seen 
in the 2D plots at several biases as wellas in the log file at the probed coordinates.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{section} SOLAR : Solar Cell Application Examples

{subsection} solarex01.in :  Solar Cell : Solar Cell Simulation 

Requires: SSuprem 4/S-Pisces/Luminous
{newline}
Minimum Versions: Athena 5.22.0.R, Atlas 5.24.1.R

This example shows how a solar cell structure can be simulated in
Athena and Atlas. The structure used and the results obtained are
similar to those in the book "VLSI Technology" by Sze. The example file
consists of:
{newline}
{bullet} Construction of solar cell doping and geometry in Athena
{newline}
{bullet} Simulation of short circuit current
{newline}
{bullet} Simulation of open circuit voltage
{newline}
{bullet} Simulation of spectral response
{newline}
{bullet} Simulation of illuminated and unilluminated IV characteristics

The initial part of the example file uses Athena to create a typical
solar cell structure. The device used is a diode of n+ over a p
substrate. The junction depth is approx 0.25um. A single contact is
placed in the center of the structure. Typical solar cells will have
this structure repeated many times across a large area. Here 
advantage is taken of the reflecting boundary conditions at the edges of the
structure to simulate just one cathode contact.

The process consists of an implant and diffusion followed by electrode
formation. The electrode statement is then used to define the
electrodes for Atlas.

The first Atlas run in the file simulates the response of the device to
illumination by the solar spectrum. The material parameters for the 
structure are set at the start of the file . The imaginary refractive
index (which is directly related to the absorption coefficient) of the
metal is defined to a high value to ensure it is opaque to the
incident radiation.

The illumination by solar spectrum is defined by the 
{bold} beam 
statement.
The origin and angle of incidence need to be defined. An angle of 90
degrees means normal incidence from the top. The parameter 
{bold} power.file
points to an external file that contains a list of wavelengths vs.
intensity.  The file 'solarex01.spec' contains data for the Air Mass Zero
Solar Spectrum. The intensity in the file can be considered just as
relative intensity between the wavelengths.

It is possible to store the optical intensity of the illumination by
specifying 
{bold} output opt.int 
at any time before saving a structure file.
The photogeneration rate will appear in the solution structure file 
by default.

The short circuit current is the current when the anode and cathode are
shorted. This is simulated by illuminating the device with zero voltage
on all contacts. The B<n> parameter of the 
{bold} solve 
statement sets the
power of the light. An 
{bold} extract 
statement is used to
measure the short circuit current. An extracted target like this can be
used for optimization or as targets in VWF.

The system is reset using the command 'solve init' for the second test.
To simulate open circuit voltage, the current through the device is
forced to be zero. The device is illuminated and the voltage sustained
across the device is measured. 

To set the current to zero it is first necessary to set one electrode
to have current boundary conditions. This is performed on the cathode using
the 
{bold} current 
parameter of the 
{bold} contact 
statement. Simulating with the
device illuminated and 
{bold} icathode=0 
gives the open circuit voltage. This
voltage is measured using the 
{bold} extract 
statement. Note the use of the
syntax 
{bold} vint."cathode" 
as opposed to 
{bold} v."cathode"
. This is necessary
when you want to extract the voltage directly on the semiconductor
contact as opposed to the applied bias.

The structure stored at this point can be plotted to show contours of
photogeneration, carrier concentration or potential. The
photogeneration contours show the effect of the opaque cathode contact.
It is also possible to show ray tracing of light beams in this file.
However in our example normal illumination was used so there are no
refractive effects to see. A similar run using non-normal incidence and
a narrower illumination spot would show the ray tracing inside the
device.


The second Atlas run in this file is used to simulate the spectral
response of the solar cell. At the start the definition of material
parameters and opaque metal contact is repeated. For this test  
a different light beam is required. A beam origin and
angle of incidence are set as before. The wavelength or spectrum file is not
defined since  the wavelength is to be varied in this test.

The short circuit case is considered, so zero biases are set on both
electrodes. The parameter 
{bold} lambda 
of the 
{bold} solve 
statement is used to set
the wavelength of the incident light. The range of wavelength used was
300nm to 1000nm. 

Plotting the resulting 
{bold} log 
file it is possible to see how the cathode 
current varies with wavelength. Setting a plot vs wavelength of source
photocurrent (current available in the light beam), available
photocurrent (current available for collection), and actual cathode
current can show how the device behaves. The losses between source and
available photocurrent are caused by reflections and transmission. This
dominates the losses at all except the shortest wavelengths. The losses
from available photocurrent to the actual simulated cathode current are
due to recombination. These are very low except at the extremes.

This simulation has produced all the data needed to create a plot of
efficiency vs light frequency as used in the reference.  All that is
needed is to transform the data in TonyPlot. 

On the y-axis the quantum efficiency is needed. This is defined as 
(current in/current out). In TonyPlot the following function is needed:

{bold}Source Photocurrent/cathode current
. 

This plot shows the same functional form as the reference material.
The peak efficiency falls off quickly at low
energies and more slowly at higher energies.

The third simulation is a plot of illuminated and un-illuminated
I-V characteristics, allowing the designer to choose a suitable load
line for the device under normal operating conditions.
A number of useful parameters are also extracted from this curve
using the extract statement.  Finally the extracted plot of external power 
versus cathode voltage is displayed.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} solarex02.in :  Solar Cell : Amorphous Silicon with Defects

Requires: S-Pisces/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

In this example we compare the potential performance of a simple
amorphous silicon solar cell with and without the inclusion of
mid-bandgap defect states.  The states are modeled donor and
acceptor states with Gaussian bump distributions and exponential
tail distributions.  The defect distributions are specified on the
{bold} DEFECT 
statement.

In this example, we use transfer matrix methods to model the 
optical problem.  In this case we also sample the entire public domain
AM1.5 spectrum.  This demonstrates the efficiency of the transfer
matrix approach.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} solarex03.in :  Solar Cell : III-V Tandem Cell

Requires: Blaze/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the use of non-local band-to-band
tunneling to model the tunnel diode in a tandem cell.  Without 
special attention to this junction the device will behave as a 
thyristor with very non-physical parasitic transistor behavior.

This example will show the specification of an auxiliary quantum
tunneling mesh.  Such a mesh is required to model quantum tunneling.

The example also shows you how to specify the usage and sampling
of a multispectral source such as AM1.5 or AM0.

The model will also show how to enable non-local band-to-band
tunneling, 
{bold} NLBBT
.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} solarex04.in :  Solar Cell : Germanium Cell

Requires: Blaze/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This example is a simple demonstration of the application of
the transfer matrix method to a simple germanium solar cell.

The cell is a simple P-N germanium photo-diode capped with a 
InGaP window layer.  The simulation enables transfer matrix
analysis using the 
{bold} TR.MAT 
parameter on the 
{bold} BEAM 
statement.

The example uses the DeckBuild
{bold} LOOP 
syntax to loop over wavelengths from 0.6 to 0.7 microns.

This example is illustrative of some of the problems with interpretation
of results when using the transfer matrix method on optically thick
devices.

If you look at the plot of the spectral response of the device plotted
at the end of the simulation, you will see several peaks and valleys
in the response.  This is a real effect of interference over the whole
thickness of the device.  The thicker the device the more of these 
you will see.  If you also look at the structure cross-section you
will see the intensity also includes numerous peaks and valleys.  Here
however they appear as random noise.  In fact this is an effect of 
undersampling.  The actual result is continuous but the sampling
is aliasing against the peaks and valleys to give the apparent noise.
In other words the spatial domain is under-sampled.  Such noisy results
in either the spectral response or the spatial cut plane in very thick
devices are usually due to undersampling.

To get rid of this problem you can add the 
{bold} SUBSTRATE 
parameter to the
{bold} BEAM 
statement.  This will make the bottom layer "appear" as infinite
to the transfer matrix algorithm.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} solarex05.in :  Solar Cell : CIGS Cell 

Requires: S-Pisces/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the use of the transfer matrix method, 
{bold} TMM
, with diffusive interfaces to model a textured CIGS solar cell.
This approach is equally applicable to other types of textured
thin film cells such as amorphous silicon cells.

The keys to this simulation are the use of the transfer matrix 
method to account for the coherent interference in the thin films
and the use of diffusive interfaces to account for the effects of
light trapping in the textured surfaces.

This example also shows the importance and methodology of including 
conducting layers in the simulation using the transfer matrix method.
These models are enabled by the 
{bold} TR.MAT 
and
{bold} DIFFUSE 
parameters of the
{bold} BEAM 
statement.

Finally, this is a good example of the specification of diffusive
interfaces using haze function parameters and angular distribution
functions 
{bold} ADFs
on the 
{bold} INTERFACE
statements.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} solarex06.in :  Solar Cell : Textured Cell with FDTD 

Requires: Blaze/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the use of finite difference time domain 
{bold} FDTD
, for analysis of solar cells.  In particular FDTD is useful in analysis
of devices where coherence effects are critical (where device dimensions
are on the order of the wavelength of light) and that are not one dimensional
and therefore do not allow simple transfer matrix analysis.

In this example we create a device with a randomly textured surface.  We
then illuminate the device using both ray tracing and FDTD analysis.  Finally,
we compare the resultant illuminated characteristics.

It is most important to note the differences in the two 
{bold} BEAM 
statements.  You should also notice the introduction of the 
{bold} PML 
statements for defining FDTD boundary conditions.

It is also important to notice that the FDTD analysis introduces an
entire new analysis mesh that is usually much geometrically finer
than the device analysis mesh.  This mesh can be examined in TonyPlot
using the 
{bold} TD.FILE 
parameter of the 
{bold} BEAM 
statement.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} solarex07.in :  Solar Cell : Organic Solar Cell

Requires: Blaze/Organic Display/Organic Solar/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the use of singlet exciton dissociation in
the modeling of organic/polymer solar cell devices.  This model may
also be used to model organic/polymer imaging sensors.

The modeling of organic solar cells through exciton dissociation
is based on the bulk heterojunction (BHJ) concept.  In this model
we do not consider the details of the location of the heterointerface
as it is considered as a random interpenetrating mixture of materials.

Instead we assume the material is electrically uniform and that the
mean distance from anywhere to the heterointerface is characterized
in the dissociation model by the 
{bold} A.SINGLET 
parameter of the 
{bold} MATERIAL 
statement.

There are three keys for simulation of exciton dissociation.  They
are the inclusion of the singlet exciton continuity equation, the
inclusion of Langevin recombination and the inclusion of the singlet
dissociation model.  These three models are enabled on the 
{bold} MODEL 
statement by the parameters 
{bold} SINGLET
, 
{bold} LANGEVIN 
and 
{bold} S.DISSOC
.

Another consideration unique to organic photodetection is characterized
by the 
{bold} QE.EXCITON 
parameter of the 
{bold} MATERIAL 
statement.  This
parameter characterizes the number of singlet excitons generated for each
photon that is absorbed.  Absorbed photons not generating singlets 
generate electron-hole pairs.

Finally, you should notice that the photogeneration rate is specified
in the C-interpreter function 
{bold} solarex07.lib
.  This was done as
a simple means to introduce a uniform photogeneration rate in the material.
This is sometimes necessary if for example we do not know the details
of the extinction coefficient versus wavelength for the materials involved.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} solarex08.in :  Solar Cell : EQE of Amorphous Silicon Solar Cell

Requires: S-Pisces/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the use of the transfer matrix method, 
{bold} TMM
, with diffusive interfaces to model a textured a-Si solar cell.
This approach is equally applicable to other types of textured
thin film cells such as CIGS cells.

The keys to this simulation are the use of the transfer matrix 
method to account for the coherent interference in the thin films
and the use of diffusive interfaces to account for the effects of
light trapping in the textured surfaces.

This example also shows the importance and methodology of including 
conducting layers in the simulation using the transfer matrix method.
These models are enabled by the 
{bold} TR.MAT 
and
{bold} DIFFUSE 
parameters of the
{bold} BEAM 
statement.

Finally, this is a good example of the specification of diffusive
interfaces using haze function parameters and angular distribution
functions 
{bold} ADFs 
on the 
{bold} INTERFACE 
statements.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} solarex09.in :  Solar Cell : Solar cell circuit simulation 

Requires: S-Pisces/Luminous/MixedMode
{newline}
Minimum Versions: Athena 5.22.1.R, Atlas 5.24.1.R

This example shows how a TCAD solar cell can be included in a more realistic 
circuit with series and shunt resistance by using MixedMode.  The solar cell is 
the same as in solarex01, but with the addition of four MixedMode simulations 
which are variations of the same circuit.  Also, the width is set so that the 
cell has an area of 1 cm^2.  All four circuits have the same topology for 
easily overlaying the output log files.  The fill factor and efficiency are 
calculated for each case.

Circuit 0 is the solar cell by itself - the shunt resistance Rsh is set to 1e6 
ohms and the series resistance Rs is set to 1e-6 ohms.

Circuit 1 uses a shunt resistance of 100 ohms - Rs is still set to 1e-6.

Circuit 2 uses a series resistance of 5 ohms - Rsh is set to 1e6.

Circuit 3 uses Rs=5 and Rsh=100.

The resulting log files are overlaid and the result is very much like Figure 12 
on page 806 of Sze's "Physics of Semiconductor Devices" 2nd edition.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} solarex10.in :  Solar Cell : Grain Boundary CIGS Solar cell simulation 

Requires: S-Pisces/Luminous/tft
{newline}
Minimum Versions: Athena 5.22.1.R, Atlas 5.24.1.R

This example shows the modelization of Grain Boundary in a CIGS
solar cell.
The solar cell consists of window, buffer and absopber layers and is 
implemented as 200nm ZnO, 50nm Cds and 3um CIGS layer respectively, 
which is typical of CIGS solar cell. Interface recombination at the 
Cds/CIGS interface is included. All layers have uniform band-gap 
energy versus depth. Gaussian-distributed defect states are also 
considered.

Parameterized Grain Boundaries are introduced horizontally and 
vertically. Meshing and regions are created automatically. Grain 
Boundary are modeled by a thin layer located between two uniform 
regions of CIGS material and the Grain Boundary layer differs 
from the surrounding bulk material only by presence of additional
defects.

You can define the x direction grain spacing as well as the
y direction grain spacing and the grain boundary thickness at the
beginning of the input deck. This example allows the investigation
of Grain Boundaries architecture on the performance of the solar
cell. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} solarex11.in :  Solar Cell : Dielectric Back Passivated P-type C-Si 

Requires: S-Pisces/Luminous
{newline}
Minimum Versions: Athena 5.22.1.R, Atlas 5.24.1.R

This example shows the modelization of Dielectric Back Passivated 
P-type C-Si solar cell. The solar cell was designed using a local 
back contact. This specific geometry requires 2D simulation. The
simulation domain represent the smallest unit cell but can be
extended periodically to represent the full structure. 

A thin heavely B-doped P+ Si layer was introduced underneath the 
local contact to create an ohmic back contact via tunneling. The 
{bold} UST 
model was used to model tunneling.

Variation of the B-doped P+ Si layer underneath the local contact 
was performed using 
{bold} DBinternal 
and impact of the solar cell Efficiency is simulated. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} solarex12.in :  Solar Cell : Thin film tandem solar cell

Requires: SSuprem 4/BLAZE/TFT/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates both IV and EQE simulations of a tandem
a-Si:H/uc-Si:H solar cell based on the following reference:

M.Zeman and J.Krc, "Optical and electrical modeling of thin-film 
silicon solar cells" J. mater. res., Vol 23, No. 4, April 2008

A microphah solar cell with the following structure was used in the
simulation: ZnO:Al(500nm)/p-a-Si:H(10nm)/i-a-Si:H(200nm)/n-a-Si:H
(15nm)/p-uc-Si:H(10nm)/i-uc-Si:H(2.2um)/p-uc-Si:H(15nm)/ZnO(100nm)/Ag.

The Tauc-Lorentz dielectric function with Urbach Tail model for complex
index of refraction was used for a-Si:H material. The model parameters
were calibrated to fit the EQE of the top cell. For the bottom cell
silicon index of refraction was used except that the imaginary part
of the index of refraction was shifted in energy to take into account
the band gap difference between silicon and uc-Si:H material. No specific
calibration was performed here.

In order to model the interlayer between the two solar cells an 
original and simple method was used. Note that a more physical 
approach can be used as well using the NLBBT model as illustrated 
in solarex03.in. The method used here consists of adding an 
electrode which exactly overlay the interlayer and attaching a 
lumped resistance to it using the 
{bold} contact name=com resist=1e16 
statement. In doing this, we force the current to flow from Anode 
to Cathode and prevent any current to flow in the added electrode.
Physically it can be justified by the fact the interlayer is acting 
like a resistor letting current flows without significant limitation.
The value of the resistance can be used to adjust the amount of
current allowing to flow through the added electrode thus controling
the interlayer resistance.  

In hydrogenated amorphous silicon (a-Si:H), the effect of dangling-bond
states on recombination can be significant. The dangling-bond states are 
amphoteric and located around the middle of the bandgap. In this example
the
{bold} amphoteric
parameter on the
{bold} defect
statement was used to specify amphoteric defects.

While in mechanically stacked Multi Junction cells, the subcells usually 
have separate contacts, monolithic Multi Junction cells are epitaxilly 
grown on one substrate, and the subcells are interconnected in series by
tunnel diodes, leading to a standard two terminal contact. Thus the subcells
are not accessible separately and the spectral response of a certain
subcell has to be measured by using the effect of current limitation.
In this example we shown how to accurately extract the spectral response
in order to compare simulation and measurement in a reliable way.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} solarex13.in :  Solar Cell : CIGS Module simulation and optimization 

Requires: SSuprem 4/S-Pisces/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R


The Thin-film solar cell module based on CIGS is a technology with
great potential. Two reasons for this are low material consumption
and relatively high efficiency. This example demonstrates CIGS solar 
cell module simulation and optimization. 

In a solar cell module several cells are connected in series. The cells 
are the active area of the module whereas the interconnections between 
cells are the dead area. The efficiency of the module is thus dependent 
on the number of cells in the module. Indeed there is a tradeoff between
maximizing absorption and minimizing resistance of the interconnection.  

Solarex13.in is a complete parameterized input deck in order to be able 
to make variation of both process and geometry to optimize the design.
the
{bold} loop
statement was used to do so. In this input deck, 4 cells were used to
create the module. Key figures of merit of the CIGS module (Voc, Jsc, 
Efficiency ...) were extracted at the end of the simulation.

Solarex13.in uses dbinternal to obtain the solar cell key figures
of merit versus the number of cells. The advantage of using dbinternal 
is that simulations are automatically run one after the other and the 
data file containing the solar cell figures of merit can be plotted 
directly in TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} solarex14.in :  Solar Cell : 3D Coaxial Solar cell 

Requires: Device 3D/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

The solar cell is a coaxial silicon nanowire, approximately 380 nanometers 
thick. The nanowire consists of three layers of silicon: a positively 
charged core; a thin intrinsic, or neutrally charged, inner shell; and 
a negatively charged outer shell. When a photon hits the nanowire, it 
generates a pair of charges: an electron and a hole. The charges then 
radially move electrons outward from the center to a contact in the shell, 
holes move inward to a contact in the core. The advantage of the circular 
cross section is that the electrons and holes must move across a much 
shorter distance than they would in a flat cell to reach the contacts 
that collect them and send electricity flowing out of the device. 

In Atlas3D, the 
{bold} CYLINDRICAL
parameter enables you to create a general cylindrical structure. The MESH 
statement must appear as:
{bold} MESH THREE.D CYLINDRICAL
where the 
{bold} THREE.D
parameter informs the simulator to create a fully 3D mesh.
When specifying 
the
{bold} CYLINDRICAL
parameter, you must now specify the structure in terms of radius, angle, 
and cartesian Z coordinates.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} solarex15.in :  Solar Cell : MIS Solar cell 

Requires: S-Pisces/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

For a Metal Insulator Semiconductor (MIS) diode, the IV characteristic
critically depends on the insulator thickness. If the insulator thickness
is thick enough (> 50A) carrier transport through the insulator is negligible
and the MIS diode represents a conventional MIS capacitor. In this example
a diode with an insulator thickness of 23.5A and a metal to insulator barrier 
height of 3.2ev is simulated. To obtain current through the insulating oxide, 
we used the self-consistent direct quantum tunneling models for electrons and 
holes. To activate this model in Atlas,  
{bold} qtnlsc.ho qtnlsc.el
are set in the 
{bold} model 
statement

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} solarex16.in :  Solar Cell : High Efficiency Silicon Solar Cell 

Requires: SSuprem 4/S-Pisces/Luminous
{newline}
Minimum Versions: Athena 5.22.1.R, Atlas 5.24.1.R

This example demonstrates solar cell performance increase by introducing 
pyramids at the top of the cell. Whether or not pyramids are used as well 
as their height and width were parameterized in this example. 

The solar cell was designed using a local back contact. This specific 
geometry requires 2D simulation. Athena and Devedit are used to define 
and mesh the solar cell. 

A bell shape is obtained and for this specific case a pyramid length of 
around 10um gives the higher efficiency.

Simulation results show improvement of performance when pyramids are used.
As an example simulations are made without and with pyramids with a length
of 10um and a height of 5um. 
Results are shown below:

{bold} with pyramids

JscmAcm2=40mA/cm2 
{newline}
Voc=0.70V 
{newline}
FF=84% 
{newline}
Eff=24% 
{newline}

{bold} without pyramids

JscmAcm2=34mA/cm2
{newline}
Voc=0.67V
{newline}
FF=84%
{newline}
Eff=19.35%
{newline}


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} solarex17.in :  Solar Cell : EQE of III-V Tandem Cell

Requires: Blaze/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the methodology to simulate EQE of
a tandem cell. This example, based on solarex03, will also show
that EQE can be simulated using a non-local band-to-band tunneling 
model to model the tunnel diode in the tandem cell. An alternative 
approach is also shown and consist to replace the tunnel junction 
by an electrode with a very high resistance so that the current can
flow from the top cell to the bottom cell without limitation. The 
results of both approaches are very similar. 

In order to get EQE of the tandem cell special technique should be 
used. Indeed two cells are in series, thus the current is limited 
by the one that has the lowest current. The idea is to illuminate 
the one we do not want to characterize by applying a monochromatic 
beam with an intensity 10 times higher compared to cell under test.
2 beams were used in this input deck, one with a fixed monochromatic 
wavelenght and one with a variable wavelenght to characterize the cell
under test in the tandem cell. The current resulting from the illumination
using the monochromatic beam is then substracted to the total current, 
to get the current of the cell under test. EQE is obtained by 
dividing the current of the cell under test by the source photo
current.				

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} solarex18.in :  Solar Cell : IBC-SHJ Optimization

Requires: Blaze/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

References:

D.Munos et al. INES-CEA, "Key features of highly efficient a-Si:Hc-Si
heterojunction solar cells" 7th Workshop on the future Direcftion of
Photovoltaics )by JSPS 175th committee), march, 2011

D. Diouf, J.-P. Kleider, and C. Longeaud, Two-Dimensional Simulations
of interdigitated ack Contact Silicon Heterojunctions Solar Cells, 
Chapter 15 of the book Physics and Technology of Amorphous-Crystalline 
Silicon Heterostructure Solar Cells, Springer 2011. 

M.Lu et al "Optimizationn of interdigital back contact silicon solar cells 
by two-dimensional numerical simulation" IEEE 2009 

This example demonstrates 2D simulation and optimization of a n-type
Interdigitated Back Contact Silicon Heterojunction (IBC-SHJ) solar cell.
Combination of amorphous silicon/crystalline silicon heterojunction and 
interdigitated back contact are very promising for high efficiency one 
junction solar cell. 

The solar cell structure consists from top to bottom of a n-type c-Si 
substrate, an intrinsic a-Si buffer layer and interdigitated strips of 
p and n-type a-Si. 

For a-Si layers, critical parameters like band gap, doping and defect
distribution are defined in the input deck. 

For c-Si/a-Si interfaces at the back surface a thermionic emission
model was used. For even more realistic modeling of this interface
we have introduced defect states at the hetero-interface by putting
a very thin defective layer of c-Si.

Fermi model, Recombination models (i.e srh, auger and surface recombination)
Drift Diffusion model with quantum correction were used to simulate IV
characteristic of the solar cell under front surface illumination. 

A complete parametrized input deck, including geometry and mesh, was created 
not only to optimize simulation time and accuracy but also for solar cell 
optimization purpose. 

In this example 4 different parameters were varied to optimize the 
solar cell efficiency. These parameters are intrinsic a-Si thickness,
n-stripe and p-strip width and gap width. 

It was observed experimentally observed that an intrinsic a-Si layer increases
Voc and Jsc but also decreases FF and leads to a "S" shape IV curve. Simulation 
results confirm the reduction of FF and "S" shape IV curve, as well as the 
increase of Voc when the thickness of the intrinsic a-Si layer increases,
leading to an optimum efficiency of around 10nm for the intrinsic a-Si layer. 

n-stripe, p-stripe and gap width were also optimized. Simulation results
show that Jsc decreases when n-stripe width and gap width increases. As
a consequence n-stripe and gap width have to be choosen as narrow as possible. 
It is interesting to notice that Jsc increases and FF decreases when 
p-stripe increases. The different evolution of Jsc anf FF leads to an
optimum for the efficiency of around 1mm for p-stripe width.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} solarex19.in :  Characterization and Generalization

Requires: Blaze/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the characterization of the photogeneration
rate due to a surface texturing in detail on small scale.  Subsequently
that characterization is generalized to a large area structure
using the
{bold} DATASET
statement. 

In the first part of the deck we simulate 11x11 light rays intersecting
a random pyramidal surface textured small scale device.  Using the
{bold} CHARACTERIZE 
statement we can extract the predicted photogeneration rate versus
depth for any depth.

In this case we characterize the device down to 400 microns.

In the second part of this example we generalize the characterized
data to a large area 2D device.  This is done with two beams one
to represent the forward pass of light the second the reflection
off the back of the device at 200 microns.

In the last part of the deck we do the same thing in 3D.

Using this approach we can look at large scale issues such as
metalization while keeping the important effects of the textured 
surface without excessive compute resources.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} solarex20.in : 3D Solar Cell simulation 

Requires: Victory Process and Victory Device
{newline}
Minimum Versions: Victory Process 7.14.3.R Victory Device 1.10.2.R

By default Victory Process and Device run on just one processor.
To ensure better perfomance on your computer the following simulation condition
{bold} simflags="-P all" 
could be specidied in the 
{bold} go 
line starting Victory Process or Device. This means that all processors available will be used.
If you want to use a smaller number of processors you can substitute "all" with a desired number, e.g.
{bold} simflags="-P 4".

This example compares simulation results of a 3D solar cell with and without lenses. 

This example demonstrates:

{bullet} 3D process simulation of the solar cell using Victory Cell.
{newline}
{bullet} 3D delaunay mesh generation of the 3D Solar cell structure. 
{newline}
{bullet} 3D device simulation of IV characteristics using Victory Device.
{newline}
{bullet} Display of the results in TonyPlot and TonyPlot 3D


The 3D process simulation starts from a mask and consist of a deposition and angled
etch of an oxide layer on top of silicon in order to define oxide lenses. The shape
of the lenses can be adjusted as a function of mask size and angle used during the etch. 
At the end of the process simulation a 3D structure is saved and meshed using a full 3D
delaunay mesh. 3D Refinement of the mesh is done as a function of Net Doping. 

The 3D structure is then pass to Victory Device where optical and electro-optical 
simulations are performed. 

3D Ray-tracing is used during the simulation. This is a method by which beams of 
light are traced through a structure, taking into account reflection, refraction 
and attenuation. The calculated light intensities and absorptions are then used 
to calculate the photogeneration rates. Whenever a ray encounteres a region interface,
or the incident ray encounters a device boundary, the ray is split into a reflected and 
a transmitted beam. For complex structures (especially in 3D) this can result in a large 
number of rays. Fortunately, ray-tracing is fast, can fully take advantage of parallel 
processing, and only needs to be done once. The number of rays produced by this algorithm 
is automatic and is the minimal number of rays required to fully resolve a given structure.

The 
{bold} ANGLE (or PHI) 
parameter specifies the direction of propagation of the beam relative to the x-axis. 
In 3D, you may also specify the angle
{bold} THETA
, which is the rotation about the y-axis. By default the beam will automatically be 
oriented and sized to illuminate the entire device from the top
(i.e. stright down).  It is extremely important to make sure that the
origin window of the beam is outside of the structure. Otherwise, you
get incorrect results.

It is not always easy to make sure the beam is defined correctly. In the runtime output 
of deckbuild (lower window of deckbuild), during the first 
{bold} solve B1= 
some information about the beam direction is given to the user: 

{bold} Ray Tracing Beam 1: Origin(0.5,0.5,-1), Direction(0,0,1) 

In this case it means that we have a vertical illumination from the top. 

The optical and electrical simulations are done using an iterative multi-threading
domain decomposition based solver called
{bold} PAM.MPI
. 
Combined with a multi-threading ray tracing algorithm, the electro-optical simulation
is very fast. This example takes only few minutes to run on a multi-cpu machine. 

Optical simulation reveals that reflectivity (absoption) is higher (lower) without 
lenses as expected. It explains why when doing an electro-optical simulation Jsc
is higher with lenses. It can also be confirmed by examining the rays and photogeneration 
rate in 
{bold} TonyPlot3D
.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.















{section} IMAGESENSOR : Image Sensor Application Examples
{newline}
{subsection} imagesensorex01.in :  Image Sensor :Image Sensor Lenslet Analysis 
{newline}
Requires: S-Pisces/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This example shows how finite difference time domain (FDTD) analysis can
be applied to optimization of lenslet design for an microlens image
sensor.

In this example we will use the built-in analytic lens specification
defined on the 
{bold} LENS 
statement.  This allows us to define lenslets
considered during FDTD analysis but does not impact the drift diffusion
analysis.  The advantage of lenslets is that extra
mesh points are not added into the device analysis part of the simulation.

There are several different lens forms supported by FDTD in Luminous2D
and Luminous3D.  These include spherical, elliptical, pyramidal, 
composite and aspheric types.  The composite lenslet is formed by a
planar face with cylindrical and spherical roll off at the edges.  The
aspheric lenslet is defined by a 10th order polynomial fitted to 
measured h-sag data using a Levenberg-Marquardt non-linear least 
squares algorithm.

The device in this example is defined simply by a buried N well 
under the lens and light blocking structures.  In this case we 
are less concerned with the electrical operation of the device 
than the light collection capability.

In this example we compare six lens designs in six simulations.
In all six cases the geometry is the same with the exception
of the lens height.  The lenslet width is fixed at 8 microns
and the height is varried from 0.5 to 3.5 microns in half micron
steps.  Simple geometrical calculations give six lens radii
and associated lens centers for the cases.

We will characterize the lenslet light gathering capability based on
the integrated photogeneration rate in the N well region.  This 
is done using the 
{bold} PROBE
 statement.

Each of the six simulations begins with a description of the device
structure and mesh using the 
{bold} MESH
, 
{bold} X.M
, 
{bold} Y.M
, 
{bold} REGION
,
{bold} ELEC
, and 
{bold} DOPING 
statements.

Next, we specify some material models and parameter defaults.  Of 
significance is the specification of the complex index of refraction
of aluminum using the 
{bold} REAL.INDEX
 and 
{bold} IMAG.INDEX
 parameters
of the 
{bold} MATERIAL
 statement.  In this case we set the imaginary
index to a very high value.  This makes the aluminum blocking
regions highly reflective/absorptive to light.

Next we specify the optical source on the 
{bold} BEAM
 statement.  We
specify the light with normal incidence from above with a wavelength
of 0.415 microns.  This is only a nominal wavelength and is never used
since we will define the analysis wavelengths explicitly on the subsequent
{bold} SOLVE
 statments.  We also define the sampling in the FDTD mesh.
This sampling should typically be a small fraction of the incident 
wavelength.  The 
{bold} TD.WAVES
 parameter specifies how many source
wavelengths are propogated in this simulation.  Finally, we specify
a file for capture of the structure as represented in the final
FDTD mesh solution.  This is useful to examine the interference
and diffraction patterns that might not be otherwise discernable in
the standard finite-difference structure file.

Next, we specify the lenslet.  The six cases will be differentiated
by the location of the center along the y axis, 
{bold} Y.LOC
 and the
radius, 
{bold} RADIUS
.

We add perfectly matched layers (PMLs) at the top and bottom of the FDTD domain
to absorb reflected and transmitted light.  This is specified on the
{bold} PML
 statements.

After obtaining the initial solution, we define a probe using the 
{bold} PROBE
statement to allow us to measure the integrated photogeneration rate as
a function of wavelength for each lens design.  It is important to notice
that we specified the 
{bold} FDTD
 parameter on the 
{bold} PROBE
 statement.
This indicates that the integration of the generation rate will take place
in the FDTD analysis domain.  The FDTD domain presents a more accurate
estimate since some loss is expected during interpolation to the 
finite-difference domain.

Finally, we capture the solutions for various wavelengths over the visible
spectrum.

At the end of the simulations we will have two data sets to consider.  First,
we will produce optical intensity plots of the six lenslet designs under
green illumination.  In comparing these plots we can see that focusing is
better under the taller lenslets.

Second, we can overlay the integrated generation rate curves versus
optical wavelength.  This verifies that the 3.5 micron lens height 
produces the best light collection.

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.


{subsection} imagesensorex02.in :  Image Sensor : Charge Integration Analysis

Requires: S-Pisces/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

In this example we examine the time integration of charge in the N well
of the imaging device and look at crosstalk caused by charge blooming
into an adjacent cell.  In this case we simulate two half cells representing
adjacent red and green pixels.  This implies that we will implement color
separation filtering and perform integration of charge during a time domain
simulation.

The simulation begins with a description of the device
structure and mesh using the 
{bold} MESH
, 
{bold} X.M
, 
{bold} Y.M
, 
{bold} REGION
,
{bold} ELEC
, and 
{bold} DOPING 
statements.

In this example we add a couple of extra oxide regions to represent the
color filters for the adjacent pixels.  The optical characteristics of
these regions will be modified to pass or not pass the source
light.

Next, we specify some material models and parameter defaults.  Of 
significance is the specification of the complex index of refraction
of aluminum using the 
{bold} REAL.INDEX
 and 
{bold} IMAG.INDEX
 parameters
of the 
{bold} MATERIAL
 statement.  In this case we set the imaginary
index to a very high value.  This makes the aluminum blocking
regions highly reflective/absorptive to light.

Here we also specify the imaginary index of the red filter.  In this case
the thickness of the filter was used to calculate an index that will absorb
99% of the incident light.  We do not need to specify the index of the
green filter since it is assumed to pass all of the incident light.

Next we specify the optical source on the 
{bold} BEAM
 statement.  We
specify the light with normal incidence from above with a wavelength
of 0.5325 microns. This wavelength corresponds to the band pass of
the green filter.  We also define the sampling in the FDTD mesh.
This sampling should typically be a small fraction of the incident 
wavelength.  The 
{bold} TD.WAVES
 parameter specifies how many source
wavelengths are propogated in this simulation.  Finally, we specify
a file for capture of the structure as represented in the final
FDTD mesh solution.  This is useful to examine the interference
and diffraction patterns that might not be otherwise discernable in
the standard finite-difference structure file.

Next, we specify the lenslets above the two pixels.

We add perfectly matched layers (PMLs) at the top and bottom of the FDTD domain
to absorb reflected and transmitted light.  This is specified on the
{bold} PML
 statements.

After obtaining the initial solution, we define probes using the 
{bold} PROBE
statement to allow us to measure the integrated electron concentration as
a function of time for green and red pixel wells.

Next we empty the well for the initial conditions.  To empty the well, we
perform a zero carrier solution with the electron quasi-Fermi level set
to a very high potential.  This insures that the electron concentration
is negligible.

Finally, we quickly ramp the beam up to an 'on' state and continue to
integrate the charge over 1 micro-second.

At the end of the simulation we can plot the integrated charge in the
two wells to see at what time a) the green well charge saturates and
b) when the red well charge begins to increase due to charge blooming
out of the green well.

We then plot the electron concentration in the final structure.  This shows
how the electrons have diffused out over the barrier between the two 
collection wells.

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.



{subsection} imagesensorex03.in :  Image Sensor : Crosstalk at Angular Incidence

Requires: Blaze/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

In this example we attempt to look at the crosstalk between adjacent
colors due to angularly incident light.  In this case we simulate two
adjacent pixels; one red and one green.  We then obtain solutions
as a function of angle of incidence and collect the integrated 
photogeneration rate as a measure of the relative charge collected
in each of the adjacent pixels.  This measure can be used to quantify
crosstalk as a function of angle of incidence.

The simulations begins with a description of the device
structure and mesh using the 
{bold} MESH
, 
{bold} X.M
, 
{bold} Y.M
, 
{bold} REGION
,
{bold} ELEC
, and 
{bold} DOPING 
statements.

In this example we add a couple of extra oxide regions to represent the
color filters for the adjacent pixels.  The optical characteristics of
these regions will be modified to pass or not pass the source
light.

Next, we specify some material models and parameter defaults.  Of 
significance is the specification of the complex index of refraction
of aluminum using the 
{bold} REAL.INDEX
 and 
{bold} IMAG.INDEX
 parameters
of the 
{bold} MATERIAL
 statement.  In this case we set the imaginary
index to a very high value.  This makes the aluminum blocking
regions highly reflective/absorptive to light.

Here we also specify the imaginary index of the red filter.  In this case
the thickness of the filter was used to calculate an index that will absorb
99% of the incident light.  We do not need to specify the index of the
green filter since it is assumed to pass all of the incident light.

Next we specify the optical source on the 
{bold} BEAM
 statement.  We
specify the light with normal incidence from above with a wavelength
of 0.5325 microns.  This wavelength corresponds to the band pass of
the green filter.  We also define the sampling in the FDTD mesh.
This sampling should typically be a small fraction of the incident 
wavelength.  The 
{bold} TD.WAVES
 parameter specifies how many source
wavelengths are propogated in this simulation.  Finally, we specify
a file for capture of the structure as represented in the final
FDTD mesh solution.  This is useful to examine the interference
and diffraction patterns that might not be otherwise discernable in
the standard finite-difference structure file.

Next, we specify the lenslets above the two pixels.

We add perfectly matched layers (PMLs) at the top and bottom of the FDTD domain
to absorb reflected and transmitted light.  This is specified on the
{bold} PML
 statements.

After obtaining the initial solution, we define probes using the 
{bold} PROBE
statement to allow us to measure the integrated photogeneration rate as
a function of wavelength in both of the green and red sensor wells.  
It is important to notice
that we specified the 
{bold} FDTD
 parameter on the 
{bold} PROBE
 statement.
This indicates that the integration of the generation rate will take place
in the FDTD analysis domain.  The FDTD domain presents a more accurate
estimate since some loss is expected during interpolation to the 
finite-difference domain.

Finally, we capture the solutions for various angles as specified by the
{bold} ANGLE
parameter of the 
{bold} SOLVE
statement.  These angles were selected to provide integer numbers of
wavelengths in phase shift at the edges of the source.

When the simulation is complete we can look at the integrated photogeneration
rates in the adjacent wells as a function of angle of incidence.  Here we
can see that after about 20 degrees, the collected green rate decreases and
the collected red rate begins to increase.  This information is very useful
in designing the collection system of the camera.

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.



{subsection} imagesensorex04.in :  Image Sensor : Process and Device simulation

Requires: Athena/Atlas/Luminous
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates Process and Device simulation of a
CMOS Image sensor (CIS). Front End as well as Back End Process 
simulation including lens are simulated using Athena. DC as well 
as Transient IV characteristics under illumination are simulated
using Atlas. 


The CIS is a special transistor where the source region
is the whole floating N- region underneath a heavy P+ doping
pin layer. The drain side is a floating diffusion to which
the electrons are transfered. The gate is used to transfer
electrons from the source to the the drain.

When designing CIS, the depletion region from the image sensor 
(source contact) should not connect to the depletion region
from the drain contact. Therefore, you must isolate the drain 
contact from the source contact with boron implants.

Also the buried N- region (which is the active sensor) was
connected to the channel region under the gate to create a 
source with further additional implants.

Only by doing this, do you get good connectivity of the image 
sensor to the drain when the transfer gate is activated.

Vt was adjusted with the boron implant through the poly gate
so that no leakage occurs when the light auto-biases the buried 
N- channel region.

The complete structure was achieved by adding a Back End Process
including a lens to focus light in the buried N- layer.

Unsaturated and saturated D.C. IV Characteristics were simulated
in order to verify low leakage current all the way up to Vg=1V. 
For that purpose, artificial source contact in buried N- layer 
is added to simulate FET IV characteristics. 

The Drain is then ramped up to 3.3V and is made floating by setting
the current boundary condition.

The light is shone on the structure during 50us. 
{bold} Ray tracing 
is used in this case but
{bold} FDTD 
can also be used and the statements are available in the input deck.
For a more detailed description of FDTD syntax please refer to image
sensor examples 1 to 3. 

From the log file we can see that bias of the  buried N- region 
gradually decreases as the light generated carriers are 
integrated. At around 3us, the image sensor is saturated, and the 
voltage can increase no further no matter how much light you shine 
on it. Note that despite full light shining on the structure, the 
signal remains de-coupled from the drain (i.e the drain remains at 
3.3V before the gate is turned on). This is the result of the back 
end process shadowing the drain and of the low leakage of the design.

From the structure file rays, photogeneration as well as electron 
concentration can be seen.

At 50us the gate is ramped in transient to 3.3V to transfer the
charge previously generated in the N- region to the floating drain.
The potential in the N- region starts to increase in voltage as 
the electrons from the N- region are transfered to the floating
drain region. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} imagesensorex05.in : CIS Output Signal Characterization

Required Athena/Monte Carlo Implant/Luminous/Deckbuild
{newline}
Minimum Version Athena 5.22.3.R, Atlas 5.24.1.R


This examples shows the creation and calibration of a 3.3 Volt CMOS Image 
Sensor (CIS), using a standard 10 ohm-cm epitaxy process.  The 
Image Sensor is created using Athena process simulation and monte-carlo 
implantation.  

The pass transistors have a high threshold voltage of approximately 2.5 volts
to minimize leakage currents in their off state.  Since the signal output 
contact of the image sensor is floating, the threshold voltage of the two 
pass transistors is determined by using the 
{bold} probe
statement, whereby the electron concentration under their gates, tg_conc and
rst_conc, are used to determine the relative conductivity of the channel,
rather than the usual drain current plot.

The first transient simulates what happens when the image sensor is depleted
of electrons, and is simply left to integrate thermally generated charge 
(leakage current) in the dark for a period of 10 seconds.  The 
transient_dark.log plot shows that the concentration of electrons in the 
depleted image sensor well, starts to rise after approximately 0.1 seconds,
so this effectively sets a maximum integration time limit on the image sensor
to obtain a normal contrast image.

The second set of transients, numbering 10 in all, calibrate the image sensor
output for a typical light intensity range that would be expected in a normal
out door setting.  The simulated intensity range was one order of magnitude,
between 0.02 and 0.2 times the intensity of a standard solar AM-1.5 spectrum.
It was found that the optimum integration time for such a photograph with
this intensity range, was approximately 7.5e-04 seconds for this particular
image sensor.  This integration time indicates the image sensor can be used
in a range from bright sunshine images down to an average intensity of
approximately four orders of magnitude less than this.

The 10 simulations for the different intensities for written using the loop
capability in deckbuild.  The loops are bounded by the deckbuild syntax
{bold} loop steps=16 
and 
{bold} l.end 
The values of intensity are increased inside each loop for each simulation 
using deckbuild's
{bold} set 
statements, which assign a value to the light intensity variable defined in 
the set statement.

The output signal voltage of the image sensor is taken from the common 
source / drain contact of the two series pass transistors.  In order to save
the complication of creating a separate contact at this location, and then
defining this contact as a high resistance voltage sense contact, the probe 
statement was used once again, to probe the potential at this location.

The figure of image sensor output voltage (fd_potential) versus light 
integration time up to the chosen integration time of 7.5e-5 seconds, shows 
the effect of light intensity variation on the output voltage.  The output
voltage at the final time of 7.5e-5 seconds is the final outptut signal of the 
image sensor and is captured by an 
{bold} extract 
statement.  The values of the extract statement were then collated in the 
final plot and show the output signal characteristics of the image sensor
versus light intensity reflected from an image.

To load and run this example, select the
{bold} load example 
button in Deckbuild.
This will copy the input file and any support files to your current working
directory.  Select the
{bold} run 
button to execute thie example.

{subsection} imagesensorex06.in : Image Sensor Cell including 2 Pass Transistors

Requires: Victory Process, Victory Device
{newline}
Minimum Versions: Victory Process 7.14.3.R, Victory Device 1.10.2.R


By default Victory Process and Device run on just one processor.
To ensure better perfomance on your computer the following simulation condition
{bold} simflags="-P all" 
could be specidied in the 
{bold} go 
line starting Victory Process or Device. This means that all processors available will be used.
If you want to use a smaller number of processors you can substitute "all" with a desired number, e.g.
{bold} simflags="-P 4".

This examples demonstrates solutions to some of the particular 3D process 
and device issues when simulating a 3D image sensor cell.  The first issue
with a number of designs is the 
{bold} very high implantation energies 
required to isolate the active region of the image sensor.  

If 3D Monte-Carlo Implantation is used to simulate these high energy implants,
the simulation times can be excessive.  The solution is to simulate these 
implants as a single spot in Athena and then to extract the depth and lateral
spreading of the implants using 
{bold} deckbuild's extract statements. 
This creates an accurate data file of the implant, which can then be imported
into Victory cell using the 
{bold} profile statement 
and incorporated into the 3D structure when required using the implant 
statement. 

The device simulation is in three parts.  Firstly the threshold voltage
of the two pass transistors is simulated.  Then a dark transient is simulated
to find the dark current recovery time, which sets the low light sensitivity 
limit of the image sensor, ie the maximum useable light integration time.  
Finally a simulastion is done illuminating the device with a typical average
light intensity of 0.01 Watts/cm2 with a standard solar AM 1.5 spectrum, 
which for this sesnor, would require an integration time of approximately 
0.0008 for a 50% exposure level.  The illumination intensity and exposure 
integration time can both be adjusted by changing these two variable 
quantities at the 
{bold} set statement 
lines, near the top of the inpu file for the final device simulation.

The threshold voltage of the pass transistors is 
deliberately high to ensure that charge leakage in their off state is 
minimized.  Since the pass transisotrs have a common floating electrode
without an ohmic contact, the threshold voltage is plotted using the
electron concentration under the gates.  The electron concentrations are
measwured using
{bold} probe 
statemnts, which probe the silicon surface under the gates. In this example, 
the probe quantities have been called 
{bold} "cg_conc" 
and 
{bold} "ng_conc"
. 

For the transient simulations, the output voltage of the cell can be monitored
in tonyplot by plotting the probe quantity called 
{bold} fd_potential
. Another interesting quantity also extracted using the
probe statement is the electron concentration in the active image sensor
region.  This image sensor electron concentration is called 
{bold}"cis_conc" 
in this example.

To load and run this example, select the
{bold} Load Example 
button in Deckbuild.
This will copy the input file and any support files to your current working
directory.  Select the
{bold} run 
button to execute the example.

{section} LED : LED Application Examples

{subsection} ledex01.in :  Blue Single Quantum Well GaN LED

Requires: Blaze/Quantum/LED
Minimum Versions: Atlas 5.24.1.R

This example demonstrates how the radiative recombination models in Atlas
can be used to analyze the electro-luminescence spectrum.

The objective of this example is to get the basic LED characteristics
such as the I-V-L curve and EL spectrum. The input decks shows the 8 
sections required to make a basic LED input file. These sections create 
the structure, specify the model combination and biasing, and finally 
plot the curves.

{bold} Mesh Generation

The first section of the input file defines the mesh and scales the WIDTH to be A/cm^2.

{bold} Region and Electrode Specification

To model the effects of strain and the piezo effect, the 
{bold} CALC.STRAIN
, 
{bold} POLARIZATION  
and 
{bold} POLAR.SCALE 
parameters of the 
{bold} REGION 
statement can be used. These parameters will be result in an interface charge 
of ~1e13 cm-2, depending on the mole fraction of the active layer.

To get the E.L. Spectrum, the parameters 
{bold} QWELL 
and 
{bold} LED 
should be specified on the quantum active layer 
{bold} REGION 
statement.

The ANODE and CATHODE contacts are defined on the top and bottom of the device.

{bold} Doping Profiles

Layers 1 and 2 have a P-type doping of 1e19 cm-3. Layer 3 is the Single 
Quantum Well (SQW) and is undoped. Layer 4 is doped at 1e18 cm-3 N-type. 
All doping profiles have a uniform distribution.

{bold} Material and Models

There are three parts to this section. The first defines the 
{bold} MATERIAL 
parameters for the Recombination and Lorentz linewidth broadening factor 
and for the incomplete ionization. The second part defines the 
{bold} MODELS 
for the GaN regions. The 
{bold} K.P 
model is used for the band parameters as well as the
{bold} FERMI
model. The other 
{bold} MODELS 
statement defines the Gain and EL spectrum models for the SQW region. The
{bold} CHUANG 
and 
{bold} SPONTANEOUS 
are specified along with 
{bold} LORENTZ
for linewidth broadening. The third part defines the mobility.

{bold} Bias Ramp and Save Spectrum

To obtain the EL spectrum, the 
{bold} SPECTRUM 
parameter and wavelength range 
{bold} LMIN
, 
{bold} LMAX 
and 
{bold} NSAMP 
are specified on the 
{bold} SAVE 
statement.

{bold} Plotting Curves

{bold} EXTRACT 
was used to calculate the the electron and hole concentration as a 
function of the bias. The I-V-L and EL spectrum as well as also plotted. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} ledex02.in :  UV 4 Multi Quantum Well GaN LED

Requires: Blaze/Quantum/LED
Minimum Versions: Atlas 5.24.1.R

This example demonstrate how the Atlas radiative recombination models 
can be used to analyze the Electro-Luminous spectrum of an UV LED.

The objective of this example is to get the basic LED characteristics
such as the I-V-L curve and EL spectrum. The input decks shows the 8 
sections required to make a basic LED input file. These sections create 
the structure, specify the model combination and biasing, and finally 
plot the curves.

{bold} Mesh Generation

The first section of the input file defines the mesh. The device diameter is 120um, 
so 1.13e4 [um] is specified on 
{bold} WIDTH 
parameter of the 
{bold} MESH 
statement. 

Region and Electrode Specification

To model the effects of strain and the piezo effect, the 
{bold} CALC.STRAIN
, 
{bold} POLARIZATION  
and 
{bold} POLAR.SCALE 
parameters of the 
{bold} REGION 
statement can be used. 
{bold} POLAR.SCALE 
is set to -0.15 for the AlGaN materials. This parameter combination
will be result in an interface charge of ~1e13 cm-2, depending on the
mole fraction of the well/barrier Layer.

To get the EL spectrum, the parameter 
{bold} QWELL 
and 
{bold} LED 
should be specified on the quantum active layer region.

The ANODE and CATHODE contacts are defined on the top and bottom of the device.

{bold} Doping Profiles

Layers 1, 2 and 3 are P-type with a doping of 1e20 cm-3. Layers 4 to
10 are the multi-quantum well regions and are undoped. Layers 11 and 12 
are N-type with a doping of 2e18 cm-3. All doping profiles have a uniform 
distribution.

{bold} Material and Models

There are three parts to this section. The first specifies the 
{bold} MATERIAL 
statement parameters for the recombination and linewidth broadening factor, 
as well as enabling incomplete ionization. The second part specifies the 
{bold} MODELS 
statement for the GaN system. The other 
{bold} MODELS 
statement defines the Gain and EL spectrum models for the SQW region. The
{bold} CHUANG 
and 
{bold} SPONTANEOUS 
are specified along with 
{bold} LORENTZ 
for linewidth broadening. The third part defines the mobility.

{bold} Bias Ramp and Save Spectrum

To obtain the EL spectrum, the 
{bold} SPECTRUM 
parameter and wavelength range 
{bold} LMIN
, 
{bold} LMAX 
and 
{bold} NSAMP 
are specified on the 
{bold} SAVE 
statement.

{bold} Plotting Curves

{bold} EXTRACT 
was used to calculate the the electron and hole concentration as a 
function of the bias. The I-V-L and EL spectrum are also plotted. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.


{subsection} ledex03.in :  Blue Single Quantum Well GaN LED 

Requires: Blaze/Quantum/LED/DevEdit
Minimum Versions: Atlas 5.24.1.R


This example demonstrates how the Atlas radiative recombination models 
can be used to analyze the Electro-Luminous spectrum for a BLUE LED.

The objective of this example is to get the basic LED characteristics
such as the I-V-L curve and EL spectrum. DEVEDIT was used to create 
the structure. In DEVEDIT, x-direction was scaled down to 1/100, and 
in Atlas the structure was scaled up to original structure size to 100 
times in x-direction. 

{bold} Structure Generation

DEVEDIT is used to define the LED structure. Atlas then scales the x 
dimension by 100. The device size is 350*350 um^2, so 477 [um] is used 
to set the exact Anode Area by specifying 
{bold} WIDTH=477.

{bold} Region Specification

To model the effects of strain and the piezo effect, the 
{bold} CALC.STRAIN
, 
{bold} POLARIZATION  
and 
{bold} POLAR.SCALE 
parameters of the 
{bold} REGION 
statement can be used. 
{bold} POLAR.SCALE 
is set to 1.0 for the InGaN materials. This parameter combination
will be result in an interface charge of ~1e13 cm-2, depending on the
mole fraction of the well/barrier Layer.

To get the EL spectrum, the parameter 
{bold} QWELL 
and 
{bold} LED 
should be specified on the quantum active layer region.

The ANODE and CATHODE contacts are defined on the top and bottom of the device.

{bold} Material and Models

There are three parts to this section. The first specifies the 
{bold} MATERIAL 
statement parameters for the recombination and linewidth broadening factor, 
as well as enabling incomplete ionization. The second part specifies the 
{bold} MODELS 
statement for the GaN system. The other 
{bold} MODELS 
statement defines the Gain and EL spectrum models for the SQW region. The
{bold} CHUANG 
and 
{bold} SPONTANEOUS 
are specified along with 
{bold} LORENTZ 
for linewidth broadening. The third part defines the mobility. Finally, 
the refractive index was difined with ADACHI model and the Nickel metal 
given the refractive index of air so that it will be ignored in the reverse 
raytrace.

{bold} Bias Ramp and Save Spectrum

To obtain the EL spectrum, the 
{bold} SPECTRUM 
parameter and wavelength range 
{bold} LMIN
, 
{bold} LMAX 
and 
{bold} NSAMP 
are specified on the 
{bold} SAVE 
statement.

{bold} Plotting Curves

To store the I-V-L and EL spectrum and the angluar power distribution,
the 
{bold} SAVE 
statement was used. The 
{bold} MIR.BOTTOM 
parameter was used to define of the bottom mirror.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} ledex04.in : Retangular Domain vs. Cylindrical Domain of LED

Requires: Blaze/LED
Minimum Versions: Atlas 5.24.1.R

This example demonstrate how the radiative recombination models of LED
in 2 dimensional Atlas can be used to analyze the electro-luminescence in
rectangular vs. cylindrical domains.

The objective of this example is to obtain and compare the basical LED
characteristics such as the I-V-L curve depenenced on the simulation domain.
The cylindrical domain characteristics are obtained in the same manner
as in the rectangular except the 
{bold} CYLINDRICAL 
parameter should be set on the 
{bold} MESH 
statement.

Also for cylindrical analysis only the right half of the X-Y plane
should be defined.

There are 7 sections to define the structure, material models,
biasing conditions and data extraction of the operational characteristics.

In this example there are two input decks.  The first deck specifies
the 2D experiment.

{bold} Mesh Generation

In the first section of the input file, the unit of the rectangular
domain is chosen as [A] with 
{bold} WIDTH 
parameter of 
{bold} MESH 
statement. Device
size is 3.14*4^2 um2 as 8um diameter, so 12.566 [um]  to make the exact
Anode Area on top view, set on 
{bold} WIDTH 
parameter.

{bold} Region and Electrode Specification

This section defines a 5 layer GaAs/AlGaAs diode with compositional grading
in layers numbered 2 and 5.  In region 2 the composition fraction of Al 
increases from 0.0 at the top to 0.35 at the bottom of the layer.  This 
grading is specified using the 
{bold} X.COMP 
and 
{bold} GRAD.12 
parameters of the 
{bold} REGION 
statement.  Similar definitions are used in the 
{bold} REGION statement for region number 5
.

The ANODE and CATHODE contacts are defined on the top and bottom of the device.

{bold} Doping Profiles

Layers 1 and 2 have a P-type doping of 1e18 cm-3. Layer 3 is P-type doped
at 1e15 cm-3. Layers 4 and 5 are doped at 2e18 cm-3 N-type. 
All doping profiles have a uniform distribution within the region.

{bold} Material and Models

The 
{bold} MATERIAL
statements in this section define parameters for the radiative recombination
rate constant, 
{bold} COPT
, the low field mobilities, 
{bold} MUN
, the satruation velocity, 
{bold} VSAT
 and the conduction band alignment, 
{bold} ALIGN
.

The
{bold} MODELS 
statement in this section selects models for Fermi-Dirac statistics, 
{bold} FERM
, Auger recombination,
{bold} AUGER
, radiative recombination,
{bold} OPTR
, and Shockley-Read-Hall recombination, 
{bold} SRH
.

{bold} Outputs

Many parameters are output to any generated structure files by default.
The 
{bold} OUTPUT 
statement can be specified to include quantities that are not output
by default.  In this case the conduction band edge energy, 
{bold} CON.BAND
, the valence band edge energy, 
{bold} VAL.BAND
, various band parameters (e.g. Eg, Nc, Nv etc.), 
{bold} BAND.PARAM
, various recombination rates, 
{bold} RECOMB, U.SRH, U.AUG, U.RAD
, and the current flowlines, 
{bold} FLOWLINES
.

{bold} Initial Solution and Bias Ramp

In these sections the bias conditions of the diode are set on various
{bold} SOLVE 
statements.  Structure files showing the internal conditions of the device
are saved at various biases using 
{bold} SAVE 
statements.  The 
{bold} LOG 
statment is used to capture terminal conditions as well as the
integrated radiative and total recombination rates using the 
{bold} PROBE 
statements.

The second deck performs the cylindrical device analysis.  It is instructive
to compare the two decks.  The second deck is identical to the first one
except that the device is defined as a cylindrical device using the 
{bold} CYLINDRICAL 
parameter of the
{bold} MESH 
statement.

{bold} Plotting Curves

The I-V curve compared and I-L curve calculated using the 
{bold} EXTRACT 
statement.

The current flowlines dependency on the device domain and bais point is also
shown.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} ledex05.in :  Optical Output Coupling Efficiency of a III-V LED Device  

Requires: BLAZE/LED
Minimum Versions: Atlas 5.24.1.R

This example demonstrates how to extract the optical output coupling efficiency
of an LED/OLED device by using various techniques including reverse ray-tracing,
the source term method and finite-difference time-domain (FDTD). 

Reverse ray-tracing is a technique that allows us to obtain optical output
characteristics of an active optoelectronic device based on material
properties and device geometry. Ray-tracing is most commonly used for the modeling
of passive optoelectronic components such as photo-detectors. Rays originating  
at the external light source are traced into the device and are absorbed to 
form electron/hole pairs, which are subsequently detected.  Use of ray-tracing 
method in LUMINOUS is shown in examples optoex08 - optoex15. 

Contrary to 
direct ray-tracing, the rays in the reverse method originate inside the active 
region and are traced until they exit the device. One or multiple origin points 
(user-specified) for rays are considered. Interference effects for rays originating 
at the common source point can be taken into account. When interference is enabled,
the spectral selectivity of the device structure can be analyzed by performing 
ray-tracing at multiple wavelengths.

The source term method works in a similar fashion but directly accounts
for interference effects by applying an algorithm akin to the
transfer matrix method which only applies to truely 1D devices.

The finite-difference time-domain method works by direct solution of
Maxwell's equations in the time domain and thus explicitly accounts for
interference and diffraction in 1, 2 or 3 dimensions.

Both the source term method and FDTD use the same method as for ray
tracing in that the emission from a set of dipoles located at user
specified locations is integrated/averaged over the device.

The device structure and settings in this example are identical to those of 
optoex06, where LED luminous efficiency calculation is demonstrated. See
the description of example optoex06 for more detailed 
information. 

An additional functionality of LUMINOUS to assess light extraction 
from the device is implemented in the 
{bold} SAVE  
statements (after biasing). Five different sets of parameters for reverse 
ray-tracing are used in successive 
{bold} SAVE 
statements to demonstrate the features 
available for the modeling of LEDs. The parameter sets are given in the order of 
increasing complexity of simulation. Computation times also vary. It takes 
approximately 200 times longer to run the last 
{bold} SAVE 
line compared to the first 
one. 

The parameter
{bold} angpower
should be set in the 
{bold} SAVE 
statement in order to start the reverse ray-tracing algorithm. The name of the 
output file containing the angular power density vs. output angle dependence 
is specified as a value of the
{bold} angpower 
parameter. The information in the angpower file includes the angular power density 
for TE- and TM- polarized light, as well as total angular power density and total 
flux angular density vs. output angle. 
Note: In TonyPlot polar charts, the y-axis is directed upward (in the opposite 
direction to the internal coordinate system used in Atlas). Therefore, the plots  
appear to be flipped around the x-axis (top of the structure is at the bottom of the 
chart). 
 
The parameter 
{bold} rayplot 
specifies the name of the output file containing the information on each ray 
exiting the device. This file is only created when a single origin for all rays 
is assumed. The information includes ray output angle, relative ray power 
(TE-, TM-polarization, and total), and initial internal angle at the origin 
(only if the
{bold} interfere 
parameter is not specified). 0-degree angle corresponds to 
the rays in the X axis direction, 90-degree angle corresponds to the rays in 
the Y axis direction. 

To start ray-tracing from one point of origin the user has to specify the 
following parameters:
coordinates of the origin of rays
{bold} X 
and 
{bold} Y 
and wavelength
{bold} L.WAVE
. It is important that the origin be chosen in the active region of the device.
Rays are not traced if the radiative recombination is zero at the ray origin.
All remaining parameters, outlined below, are optional and their default values 
are assumed if the parameters are not specified.

{bold} Reflects 
specifies a number of reflections to be traced for each ray originating at the point 
{bold} X 
, 
{bold} Y 
(similar to 
{bold} reflects 
parameter in the 
{bold} BEAM 
statement). The default value (
{bold} REFLECTS
=0) provides for a quick estimate of the coupling efficiency. 
{bold} REFLECTS
>0 should be used to obtain a more accurate result, especially if 
{bold} MIR.TOP 
or 
{bold} MIR.BOTTOM 
are specified. The choice of this parameter is based on a compromise between 
calculation time and accuracy. The maximum allowed value is 
{bold} REFLECTS
=10. the number of reflections set to 3 or 4 is often a good choice. The parameter 
set #1 produces a simple ray-tracing analysis of an LED considered in this 
example.    

The 
{bold} MIR.TOP 
parameter specifies that the top surface of the device be treated as an ideal mirror.

The 
{bold} MIR.BOTTOM 
parameter specifies that the bottom surface of the device be treated as an ideal 
mirror.

{bold} SIDE 
specifies that the rays reaching the sides of the device are terminated 
there and do not contribute to the total light output. This is often a good 
assumption for realistic LEDs as these rays tend to be either absorbed internally 
or blocked by the casing of the device. 

{bold} TEMPER 
is the temperature needed for using appropriate refractive indexes of the 
materials. A default setting of 300 K will be used if not specified.

{bold} POLAR 
specifies polarization of the emitted photons in degrees (linearly polarized 
light is assumed). Parallel (TM-mode, 
{bold} POLAR
=0.0) and perpendicular (TE-mode, 
{bold} POLAR
=90.0) polarizations result in significantly different output coupling values. 
The default value (
{bold} POLAR
=45.0) should be used if there is no preferred direction of polarization of 
emitted photons (unpolarized light emission).

{bold} MIN.POWER 
specifies the minimum relative power of a ray (similar to 
{bold} min.power 
parameter in the 
{bold} BEAM 
statement). The ray is not traced after its power falls below 
{bold} min.power 
value. This is useful for limiting the number of rays traced, and the default 
value is 1e-4.

{bold} NUMRAYS 
is used to specify the number of rays starting from the origin. The default is 180,
the acceptable range 36 - 3600.

Parameter set #2 shows how some of the parameters described above are used for 
modeling a realistic LED. The angular distribution of light power obtained 
in optoex18ang_2.log exhibits a Lambertian pattern, which is what we expect for 
a simple LED considered in this example. Note that the optical coupling coefficient 
produced in this calculation reflects the 2D nature of the example (the light 
origin is not a point but rather an infinite line in z-direction). Simultaneously,
it is possible to calculate the optical coupling efficiency for an axially 
symmetric 3D device (normally this is the value to be compared with experimental 
results). This calculation is enabled if
{bold} coupling3D 
parameter is specified (while 
{bold} side 
is also set). For this calculation the light source is assumed to be 
a point located on the axis of symmetry. 

The rays are assummed to be incoherent by default. This is a good approximation 
if the thickness of the active layer of the device is on the order of a 
wavelength/index. For layer thicknesses << wavelength coherent effects might be
important. When the 
{bold} interfere 
parameter is set, the rays originating at the common source point are taken to 
be 100% coherent. In this case the phase information upon propagation is 
preserved. Phase change upon reflection is also considered. Thus, interference 
of rays exiting the device at the same angle is taken into account. The internal 
angle information is not written to the output rayfile in this case. The parameter 
set #3 takes interference into account. 

Absorption of rays can be taken into account when the 
{bold} absorb
parameter is set. The absorption is assumed to be constant specified for each 
material by the imaginary part of the refractive index. 
Carrier density dependent absorption and photon-recycling are not considered
at this point.

Although ray-tracing from one point of origin can give a reasonable estimate 
of optical output coupling and angular distribution of light power, it is often 
desirable to consider multiple points within the active layer of the device to 
obtain more accurate results. Multiple origin points can be set using the 
following parameters:

{bold} XMIN
,
{bold} XMAX
,
{bold} YMIN
,
{bold} YMAX 
define a rectangular area containing all origin points. 
{bold} XNUM 
and 
{bold} YNUM 
specify the number of points along x- and y- axes within the rectangular area. 
If 
{bold} XNUM 
is equal to 1, the x-coordinate of all origin points is set to 
{bold} XMIN 
so that the points are chosen along the line x = 
{bold} XMIN
. Similarly, points along the specific y-line can be chosen. 
Ray-tracing from multiple origins is realized by repeating a single 
origin algorithm for each point and by adding up the normalized angular power 
density values thus obtained. The luminous power assigned to each source (origin) 
is proportional to the radiative recombination at that point. Luminous power of 
all sources adds up to the value obtained by integration of radiative recombination 
over the entire device. Rays originating at different source points are completely 
incoherent (even when
{bold} interfere 
is set), which is consistent with the spontanuous character of the radiation produced 
by an LED. The rayplot file is not written for multiple origins (even if parameter 
{bold} rayplot 
is specified). The parameter set #4 shows how multiple origin simulation can be done.

Spectral selectivity of optical output coupling for LEDs can also be taken into 
account. Reverse ray-tracing at multiple wavelengths is
considered if the 
{bold} spectrum 
parameter specifies a filename for spectral selectivity output, while the 
{bold} angpower 
parameter is also set. 
{bold} EMIN 
and 
{bold} EMAX 
, or 
{bold} LMIN 
and 
{bold} LMAX
 specify the energy or wavelength range respectively. 
{bold} NSAMP 
specifies the number of spectral components to be considered. It is suggested 
that the 
{bold} SPECTRUM 
file is specified only when 
{bold} interfere 
is set (a warning is issued otherwise, while ray-tracing proceeds).  When 
{bold} ANGPOWER 
and 
{bold} SPECTRUM 
parameters are set in the 
{bold} SAVE
statement, the resulting optical output coupling is averaged over the
entire energy (wavelength) range from 
{bold} EMIN 
to 
{bold} EMAX 
(from 
{bold} LMIN 
to 
{bold} LMAX
). The same applies to the quantities in the output angular distribution
file. The spectrum file only shows how output coupling changes with wavelength.
At the moment the shape of the gain curve is not taken into account (flat gain).
The set of parameters #5 shows how multiple spectral components can be considered.
The results obtained after averaging over spectral components and multiple origin 
points while taking interference into account are remarkably similar to the single 
point source model, where interference and multiple spectral content has been 
ignored (parameter set #2). This demonstrates the applicability of a simpler model 
in this case.    
 
To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} ledex06.in : Effects of the Self-Heating on 3D Cylindrical LED Structure

Requires: Device 3D/Giga 3D
Minimum Versions: Atlas 5.24.1.R

This example shows the effect of the self heating on 3D structure with
cylindrical three dimensional mesh.

The objective of this example is to obtain the lattice temperature
distribution in the three dimensional structure at operating bias.

This example has 3 parts.

The first part demonstrates the cylindrical mesh generation method.  In
this case only half the device is simulated to save simulation time.

The 
{bold} R.MESH 
statement is used to specify radial locations and spacings.
Similarly, the 
{bold} A.MESH 
statement is used to specify angular locations and spacings in degrees.
Finally, the 
{bold} Z.MESH 
statement is used to specify the locations and spacings in the Z direction.

For 3D cylindrical devices, the 
{bold} REGION 
statements define regions in cylindrical coordinates using the
parameters
{bold} A.MIN
, 
{bold} A.MAX 
,
{bold} R.MIN
, 
{bold} R.MAX and
,
{bold} Z.MIN 
and 
{bold} Z.MAX.

Similarly, the 
{bold} ELECTRODE
statements can define an anode electrode as a ring on the top surface 
and the cathode electrode as a plate on the bottom of the device.

Next, 
{bold} DOPING 
statements are used to define uniform dopant concentrations in each region.

Next, the 
{bold} MODEL 
statement is used to specify the models to be used in the example.  The
recombination models are selected for Shockley-Read-Hall 
{bold} (SRH), 
Auger 
{bold} (AUGER)
, and radiative
{bold} (OPTR) 
recombination.

Also, Fermi-Dirac statistics, 
{bold} FERMI
, and concentration dependent mobility, 
{bold} CONMOB
, are selected.

Lattice temperature simulation, 
{bold} LAT.TEMP
, with Joule heat, 
{bold} JOULE.HEAT
, and generation recombination heat, 
{bold} GR.HEAT 
sources are selected.

The 
{bold} MATERIAL 
statement is used to specify the alignment of the conduction band offsets
using the 
{bold} ALIGN 
parameter.

A thermal contact is specified using the 
{bold} THERMCONTACT 
statement.  Here a heat sink boundary is simulated using the sink temperature, 
{bold} EXT.TEMP
, and the thermal conductance,
{bold} ALPHA
, in W/(cm2*K).

The 
{bold} METHOD 
statement is used to specify some specific numerical methods to be used
to help obtain solutions for self-heating simulations.

Next, after obtaining an initial zero bias solution.  The 
{bold} PROBE, 
{bold} LOG 
and
{bold} OUTPUT 
statements are used to specify output characteristics to be collected
that are of particular interest to this simulation.

Next, a bias ramp is performed to place the LED at the operating bias.

Finally, TonyPlot and the 
{bold} EXTRACT 
statement are used to present the simulation results.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} ledex07.in :  Optical Output Coupling Efficiency Using FDTD  

Requires: Blaze/LED
Minimum Versions: Atlas 5.24.1.R

This example demonstrates how to extract the optical output coupling efficiency
of an LED/OLED device by using finite-difference time-domain (FDTD). 

The finite-difference time-domain method works by direct solution of
Maxwell's equations in the time domain and thus explicitly accounts for
interference and diffraction in 1, 2 or 3 dimensions.

FDTD uses the same method as reverse ray
tracing in that the emission from a set of dipoles located at user
specified locations is integrated/averaged over the device.

The device in this case is very similar to the ones discussed in
the other examples so far.  We have broadened it out in the
X direction so we can analyze the effects of guided modes.  Guided
modes are light trapped in the plane of the device by total internal
reflection.  We make the device very long the make sure we can
capture all the light except that which is definitely captured
in the axial modes.

In the next example we will analyze the effect of introduction
of a photonic coupling structure on the top surface to extract light
from the axial modes.  This demonstrates the advantage of FDTD analysis
for photonic coupling.  This kind of analysis cannot be done with
reverse ray trace or source term methods.

The main difference from what we have seen so far in the other examples
in the introduction of the 
{bold} BEAM 
statement.  In example ledex05.in
we performed FDTD analysis without the use of the BEAM statement.
In this case the 
{bold} BEAM 
statement is made automatically based on
certain assumptions.

Many of the functionalities available on the 
{bold} BEAM 
statement (including 
lenses) for FDTD
analysis are not yet available on the 
{bold} SAVE 
or 
{bold} LED 
statements so 
the 
{bold} BEAM 
statement is used here as a convenience and to illustrate 
the full variety of control parameters available to FDTD analysis.

In the 
{bold} BEAM 
statement you will first notice the specification of beam origin,
direction of propogation and wavelength.  These specifications are largely
supurfulous for LED analysis but need be specified in accordance
with the syntactical rules set forth for photo detection in
Luminous.  In future LED versions we hope to hide much of this.

The important parameters for LED analysis are 
{bold} FDTD 
which enables FDTD analysis, 
{bold} TD.SRATE 
which specifies the number of samples per wavelength 
{bold} PROP.LENG 
which specifies the duration of the simulation in terms
of optical propogation length, 
{bold} BIG.INDEX 
which enables examination of the largest index of refraction
in each region to calculate the local mesh spacing relative
to the local wavelength and 
{bold} FD.AUTO 
which enables automatic meshing.

PMLs are absorbing boundary conditions for FDTD. They are needed at the
TOP to characterize the amount of light exiting the top of the device
(i.e. the light coupled out of the device).  PMLs are placed at the 
ends of the device to capture and characterize the axial modes.

The PML at the bottom is optional and if left out the boundary is 
treated as a prefect mirror.

Toward the end of the simulation the 
{bold} SAVE 
statement is used to initiate FDTD coupling analysis at the
operating bias.

The 
{bold} REF.BEAM 
parameter is used to specify the index of the 
{bold} BEAM 
in order to tie the LED analysis to the proper set of analysis conditions
set up by the 
{bold} BEAM 
and 
{bold} PML 
statements.

The 
{bold} SPECTRUM 
parameter specifies a file prefix for capturing the 
coupled output spectrum.

The other parameters of the 
{bold} SAVE 
statement specify the user selected sampling in space and emission
wavelength.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} ledex08.in :  Photonic Optical Output Coupling Efficiency Using FDTD  

Requires: Blaze/LED
Minimum Versions: Atlas 5.24.1.R

This example demonstrates how to extract the optical output coupling 
efficiency of an LED/OLED device with photonic crystaline enhancements
by using finite-difference time-domain (FDTD). 

The finite-difference time-domain method works by direct solution of
Maxwell's equations in the time domain and thus explicitly accounts for
interference and diffraction in 1, 2 or 3 dimensions.

FDTD uses the same method as reverse ray
tracing in that the emission from a set of dipoles located at user
specified locations is integrated/averaged over the device.

The device in this case is very similar to the ones discussed in
the other examples so far.  We have broadened it out in the
X direction so we can analyze the effects of guided modes.  Guided
modes are light trapped in the plane of the device by total internal
reflection.  We make the device very long the make sure we can
capture all the light except that which is definitely captured
in the axial modes.

In the previous example we analyzed this same device without
the photonic enhancements.

In this example we analyze the effect of introduction
of a photonic coupling structure on the top surface to extract light
from the axial modes.  This demonstrates the advantage of FDTD analysis
for photonic coupling.  This kind of analysis cannot be done with
reverse ray trace or source term methods.

The main difference from what we have seen so far in the other examples
in the introduction of the 
{bold} BEAM 
statement.  In example ledex05.in
we performed FDTD analysis without the use of the BEAM statement.
In this case the 
{bold} BEAM 
statement is made automatically based on
certain assumptions.

Many of the functionalities available on the 
{bold} BEAM 
statement (including lenses) for FDTD 
analysis are not yet available on the 
{bold} SAVE 
or 
{bold} LED 
statements so 
the 
{bold} BEAM 
statement is used here as a convenience and to illustrate 
the full variety of control parameters available to FDTD analysis.

In the 
{bold} BEAM 
statement you will first notice the specification of beam origin,
direction of propogation and wavelength.  These specifications are largely
supurfulous for LED analysis but need be specified in accordance
with the syntactical rules set forth for photo detection in
Luminous.  In future LED versions we hope to hide much of this.

The important parameters for LED analysis are 
{bold} FDTD 
which enables FDTD analysis, 
{bold} TD.SRATE 
which specifies the number of samples per wavelength 
{bold} PROP.LENG 
which specifies the duration of the simulation in terms
of optical propogation length, 
{bold} BIG.INDEX 
which enables examination of the largest index of refraction
in each region to calculate the local mesh spacing relative
to the local wavelength and 
{bold} FD.AUTO 
which enables automatic meshing.

PMLs are absorbing boundary conditions for FDTD. They are needed at the
TOP to characterize the amount of light exiting the top of the device
(i.e. the light coupled out of the device).  PMLs are placed at the 
ends of the device to capture and characterize the axial modes.

The PML at the bottom is optional and if left out the boundary is 
treated as a prefect mirror.

The photonic coupling is introduced using lenslets.  The lenslets
are defined by 
{bold} LENS 
statements.

The first 
{bold} LENS 
statement specifies a flat "lens" extending from Y=-1
to the surface of the device.  This lens acts as the 
fill in between the cylinders to come.  The index of
the fill pattern is specified by the 
{bold} INDEX 
parameter.

The second 
{bold} LENS 
statement specifies a set of cylinders with radius 0.175 microns
starting at Y=0 to a height of 0.5 microns in the -Y direction.
with an index of 1.9.

The periodicity in the X direction is specified by the 
{bold}PC.X0 
parameter that specifies the center of the first duplicate
and 
{bold} PC.DX 
which specifies the spacing in the X direction between duplicates.

And that is it for the photonic crystal.  In 3D just 2 more parameters
are introduced.

Toward the end of the simulation the 
{bold} SAVE 
statement is used to initiate FDTD coupling analysis at the
operating bias.

The 
{bold} REF.BEAM 
parameter is used to specify the index of the 
{bold} BEAM 
in order to tie the LED analysis to the proper set of analysis conditions
set up by the 
{bold} BEAM 
and 
{bold} PML 
statements.

The 
{bold} SPECTRUM 
parameter specifies a file prefix for capturing the 
coupled output spectrum.

The other parameters of the 
{bold} SAVE 
statement specify the user selected sampling in space and emission
wavelength.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} ledex09.in :  Capture-escape model in 5 quantum well GaN LED

Requires: Blaze/Quantum/LED
Minimum Versions: Atlas 5.24.1.R

This example demonstrates how to capture-escape model for quantum well LED. Capture-escape model allows to track dynamics 
of bound carriers in quantum wells. It also allows to account for the effect of quantum charge by including it  
self-consistently into Poisson equation.

There are several model parameters that specify quantum well and capture-escape model.
Quantum well regions are declared with 
{bold} QWELL 
parameter  in order to solve Schrodinger equation and 
{bold} LED 
parameter 
in order to output luminous power for each well into the IV log file.
Wurtzite 3-band k.p-based  band structure is specified by 
{bold}  WZ.THREE 
parameter. 
{bold}  K.P 
parameter forces drift-diffusion equation 
to use k.p based band edges.
Parameter  
{bold} WELL.CAPT 
launches capture-escape model and parameter 
{bold}  WELL.INPLANE 
allows 2D carriers to move along 
the quantum well.  
{bold} SPONTANEOUS 
parameter in quantum well regions will launch calculation of spontaneous emission; 
a simpler model for optical recombination is used in barriers, launched by 
{bold} OPTR 
parameter.  Everywhere in the device 
Shockley-Read-Hall ( 
{bold} SRH
) and Auger ( 
{bold} AUGER
) recombination is calculated.  Finally, parameter 
{bold}  WELL.SELFCON 
forces
two effects: 1) band edge for
bulk carriers is modified in quantum well regions to remove wells. This effectively reduces bulk carrier density in these regions, 
by allowing only bulk carrier with energies above the barrier; 2) quantum charge is added to the total carrier charge and 
included into Poisson equation.  In order to include all quantum charge, the maximum allowed number of subbands  is increased
by setting parameter  
{bold} WELL.CNBS 
and 
{bold} WELL.VNBS
.
To improve convergence, predictor-corrector scheme 
is used. 
{bold}  WELL.NPRED 
parameter specifies that there are seven 
predictor iterations per one corrector iteration.
 

To obtain the EL spectrum, the 
{bold} SPECTRUM  
parameter on the 
{bold} SAVE  
statement. The range of the spectrum is determined automatically.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{section} CCD : CCD Application Examples 



{subsection} ccdex01.in : Illumination and Charge Transfer

Requires: SSuprem 4/S-Pisces/Luminous
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R

In this example a CCD structure is constructed using the Athena process
simulator. This structure is passed to Atlas for electrical testing.
The input file tests consist of four portions:
{newline}
{bullet} Construction of a CCD device
{newline}
{bullet} Emptying the storage well of carriers
{newline}
{bullet} Illuminating the CCD with a light source and measuring the generated carriers
{newline}
{bullet} Transfer of the carriers to the drain

The first stage of the input constructs the CCD geometry and doping
profiles in Athena. The CCD device consists of a storage node on the
left of the structure controlled by a polysilicon gate. A transfer node
to the right of this is also controlled by both a polysilicon gate and a drain
region of heavy n+ doping with a metal contact.

The CCD structure has an n- active region at the surface above a p-type
substrate. Under the transfer node an extra p-type implant is given.
This implant is of sufficient magnitude to create a potential
difference between the storage and transfer nodes, but is not so large
as to cause a junction.

The process simulation is designed to run extremely quickly so there is
a minimum of diffusion steps included. The final stages of the Athena
input performs the electrode definition needed by Atlas.  Also some
EXTRACT statements are used to measure the junction depth of the active
region under the storage and transfer nodes.

The Atlas simulation begins with definition of the models and material
parameters of the device.  The 
{bold} contact 
statement is used to define the
workfunction of the two polysilicon electrodes.  The 
{bold} material 
statement
is used to define minority carrier lifetimes in the semiconductor.  The
interface charge between the gate oxide and the semiconductor is set by
the 'qf' parameter of the 
{bold} interface 
statement.

The physical models used in this simulation reflect different
physical effects that are important in CCD devices. The mobility model CVT
includes a surface mobility degradation  which is important in the
transfer phase of the simulation as the charge moves from the storage
node to the drain. The recombination models consrh and auger are needed
as the recombination of the carriers is important in determining the
capacity and charge transfer characteristics. Band gap narrowing is
also needed to model the properties of areas with high carrier concentration.

The initial part of the Atlas input file biases the drain to +20V,
whilst the two gates are held at -6V. This is done to deplete the electrons
from the n- active layer. The final structure with the active layer
empty of carriers is saved. At this point 
{bold} extract 
statements are used
to extract the integrated electron concentration in the storage well.
This will be a small number.


Next, Luminous is used to illuminate the storage node. The light beam is
defined near the start of the input file using the 
{bold} beam 
statement. This
beam is defined with a 500nm wavelength, an origin at (0,-1) and width of
2um. The angle of 90 degrees specifies normal incidence onto the top of
the CCD. Luminous calculates all internal reflections and absorption by
the layers within the simulation structure.

To illuminate the structure, a transient simulation is used. The power of the
light beam is controlled by the parameter B1 on the SOLVE statement.
This is defined to rise from zero to 1 W/cm^2 in 5ns, to remain at this
power for a further 15ns, and then to fall to zero in another 5ns.  The
{bold} tstep 
parameter is used to define the initial timestep of the
simulation. All other timesteps are automatically calculated by Atlas
based on the local truncation error. The 
{bold} tstop 
parameter defines the
end of the simulation time. The illumination part is set to last 50ns.

At the end of the illumination section a structure is stored. This
structure can be plotted to see the charge collected under the storage
node. The potential difference between the storage and transfer nodes
created by the extra boron implant stops charge from leaking away to
the large positive potential on the drain.  
{bold} extract 
statements are used
once again to measure the integrated electron concentration. The value
obtained is subtracted from the value obtained from the empty well.

The final stage of the Atlas simulation is the charge transfer. This is
also performed as a transient simulation. It is very important to note
that during a single Atlas run the time is 
{italic} not
reset to zero. Since the
illumination section was 50ns, that is the starting time for this
section. In this section the transfer gate is ramped from -6V to +2V.
This causes the potential barrier between the storage node and the
drain to be removed, Charge can now flow form the storage node, under the
transfer gate and into the drain.

At each timestep in the transfer simulation a structure is saved.
By loading several of these structure files into TonyPlot it is possible
to observe the movement of charge across the device.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} ccdex02.in : Emptying The Storage Well Using Quasi Fermi Levels

Requires: SSuprem 4/S-Pisces/Luminous
{newline}
Minimum Versions: Athena 5.22.3.R, Atlas 5.24.1.R


In this example a CCD structure is constructed using the Athena process
simulator. This structure is passed to Atlas for electrical testing.
The input file tests consist of three portions:

{bullet} Construction of a CCD device
{newline}
{bullet} Emptying the storage well of carriers by directly setting the quasi-fermi levels
{newline}
{bullet} Illuminating the CCD with a light source and measuring the generated carriers

This example differs from the previous one in that  
{bold} no drain contact is used
. The emptying of the well is performed by setting the quasi-fermi level
of the n- active region directly.

The structure of this CCD is two polysilicon gates on top of silicon
separated by a nitride/oxide insulator layer. The right hand gate will
be used to collect the charge and the left hand gate will confine this
charge under the right-hand gate.

At the start of the input file is the Athena process to produce the
structure as described for the previous example. Electrodes are defined
in  Athena and the
{bold} extract 
statement is used to measure the junction depth of the n- active
layer.

In the Atlas simulation the material and models definition is similar
to the previous example. The CVT surface transport model is not needed
as this simulation does not include charge transfer.

The key technique demonstrated by this example is the use of setting
the quasi fermi levels directly in Atlas. To set the quasi fermi levels
for electrons the parameter 
{bold} n.bias 
is used. For this to work, 
it is necessary to use a zero carrier solution. The
setting of 
{bold} method carriers=0 
specifies a zero carrier solution, and only Poisson's 
equation for potential is solved. 


Using 'n.bias' the electron quasi fermi level is set to +20V. This is a
non equilibrium condition so the only way to use the solution of the
continuity equations is to observe the electron concentration is in
transient mode. Atlas is switched to solve for electron and holes using
{bold} method carriers=2
. A short transient simulation then is performed and a
structure file is saved. Plotting electron concentration in this structure
file shows the CCD storage well to be depleted of electrons. An 
{bold} extract 
statement is used to quantify this.

In this CCD biasing scheme the storage node to the left is biased to
+12V and the containment node to the left is biased at -8V. This
ensures that charges generated under the storage gate are collected
there.

In the final stage of the input file the CCD storage node is
illuminated.  The light beam is defined in the BEAM statement to be
normally incident from the top, with an origin of (6.85,-1), width 4um
and wavelength 800nm. All reflections, refraction and absorption in the
layers of the structure are simulated by Atlas.

A transient illumination is defined lasting 1us. At the end of this
time the amount of electrons trapped in the CCD can be measured using
the 
{bold} extract 
statement.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} ccdex03.in : Finding the Maximum Potential and Integrated Charge

Requires: Atlas
{newline}
Minimum Versions: Atlas 5.24.1.R


This example demonstrates postprocessing on CCD structures from the
previous examples. It shows:

{bullet} Extraction of the line of
 maximum potential from a 2D structure
{newline}
{bullet} 2D integration of a charge packet

The first section of the example takes a solution file from the transient
charge transfer in the first example in this section. It uses the extract
feature
{bold} max.conc.file 
to store a file of the maximum potential for each x location in the
structure. This file can be plotted directly in TonyPlot. Alternatively,
the file can be overlayed onto the 2D structure in TonyPlot. This can
be performed by plotting the 2D CCD structure with the flag
{bold} -ccd
.  To overlay the file saved by extract, right mouse click on the main
TonyPlot window and choose "Maximum Potential".

The second and third extract statements use the 2D integration feature of 
{bold} extract 
to give the integrated electron concentration in the charge packet. 
This is done for both empty and full well conditions.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{section} LASER : Laser Diode Application Examples

{subsection} laserex01.in : InP/InGaAsP Laser: Simple Gain Model 

Requires: Blaze/Laser
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates simulation of a buried heterostructure
InP/InGaAsP laser diode using the  simple gain model. It shows:

{bullet} Laser structure definition using Atlas syntax
{newline}
{bullet} Material parameters specification
{newline}
{bullet} Setting conventional physical models
{newline}
{bullet} Device initial biasing 
{newline}
{bullet} Activating LASER module of Atlas
{newline}
{bullet} Mesh definition for solving the Helmholtz wave equation
{newline}
{bullet} Definition of laser physical models and their parameters
         including optical gain model
{newline}
{bullet} Calculation of laser electrical and optical characteristics

At the beginning of the input file, the laser diode is described using Atlas
structural syntax including mesh, regions, electrodes and doping distributions
the same way as it is done for any conventional applications. The
{bold} mesh 
statement uses the 
{bold} diag.flip 
parameter to make the mesh symmetrical with respect
to the vertical center cross section. The mesh symmetry reflects the
respective symmetry of the structure and may be important for
calculating correctly the
light intensity, local optical gain, and other internal physical distributions. 
Mesh spacings are specified to resolve heterojunctions in x and y directions. 

The laser structure is composed of 10 regions. The active lasing region
of the device is made of quaternary InGaAsP compound and surrounded by
InP regions of n- and p- type. All heterojunctions are modeled as
abrupt. The cathode electrode is defined in the center of the top of
the device. The anode electrode extends across the device at the
bottom. The composition parameters of the active region x.comp and
y.comp are defined in the respective
{bold} region 
statement.  The composition parameters are used to calculate
fundamental properties of the InGaAsP material. e.g. energy band gap,
dielectric constant,
densities of states in the conduction and valence bands, etc. using the
default dependencies. The default values of the above parameters are used
also for the InP regions. 

Some other material parameters are specified in the 
{bold} material 
statements separately for InP and InGaAsP materials. These include electron
and hole lifetimes (capture times) for the Shockley-Read-Hall recombination model,
optical recombination constants, and low field mobilities. In addition 
the electron affinity for InGaAsP is explicitly defined to ensure
correct energy band alignment. The parameter gain1min describing local
optical gain and different from the default value is also given in the
{bold} material 
statement for InGaAsP.

In two 
{bold} models 
statements a standard set of the Atlas/Blaze models is specified. In
order to save computational time no LASER specific models are defined
at this point. The LASER models are specified later in the input file
after the initial bias has been increased. According to theory no
laser emission will occur until the
difference of quasi-Fermi levels in the active layer exceeds the
material band gap. Therefore it is recommended to ramp the bias up to
some value not greater than the band gap of the active region, and then
enable the LASER models. In this example after obtaining the initial
solution the anode voltage is ramped up to 0.6 V in the two-carrier
solution mode.

The next part of the input file enables LASER specific models. It
starts from defining a mesh for solution of the Helmholtz wave
equation. The Helmholtz equation is solved on a uniform rectangular
mesh that is independent of the triangular mesh used for electrical
equations. The rectangular mesh and the region in which the Helmholtz
equation is solved is defined using the
{bold} lx.mesh 
and
{bold} ly.mesh 
statements. The defined region must lie completely inside the BLAZE
simulation domain and cover completely the active lasing region. The
conventional models and LASER specific models are specified in the
{bold} models 
statement. The LASER simulation is enabled by the parameter
{bold} laser 
in this statement. In this example the the  simple empirical gain model
is activated by the parameter
{bold} gainmod=2 
. Here the optical gain is a function of electron and hole
concentrations given in the form of analytical expression with
empirical coefficients. The parameter
{bold} las_maxch 
specifies the maximum allowable relative change in the photon densities
between iterations. If not limited the rapid change in the photon
density may cause convergence problems. The parameter
{bold} photon_energy 
is used to specify the energy of the photons. If
{bold} gainmod=2 
is used it specifies only an initial estimate of the photon energy.
Instead of
{bold} photon_energy 
the parameter las_omega can be used to define the
lasing frequency. The parameter
{bold} cavity_length 
specifies the cavity length in the 3rd z-direction. For other LASER
models and their parameters the default dependencies and values are
applied.

In the LASER mode the anode voltage is ramped up to 1.7V. The I-V,
light power, and total optical gain data, is saved in the log file. The
final physical distributions in the structure are saved in the output
structure file. The following results are visualized in TonyPlot:

{bullet} Conventional I-V characteristic
{newline}
{bullet} Light power versus current 
{newline}
{bullet} Optical gain versus current
{newline}
{bullet} Light intensity distribution over the structure

The behavior of the optical gain for the fundamental transverse mode
illustrates its increase until the current reaches the threshold value
and
then it remains flat equal to the light losses (in this case 30cm-1).


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection}  laserex02.in : InP/InGaAsP Laser: Emission Spectrum Analysis 

Requires: Blaze/Laser
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates simulation of a buried heterostructure
InP/InGaAsP laser diode. A physically based frequency dependent optical
gain model is used in this example to calculate light emission
spectrum. The example shows:

{bullet} Laser structure definition using Atlas syntax
{newline}
{bullet} Setting up the device models and initial biasing 
{newline}
{bullet} Activating LASER module of Atlas
{newline}
{bullet} Mesh definition for solving the Helmholtz wave equation
{newline}
{bullet} Definition of laser physical models and their parameters including the
{bold} frequency dependent optical gain model
{newline}
{bullet} Calculation of laser electrical and optical characteristics

This example illustrates how Atlas can be used to simulate
spectral characteristics. The spectral characteristics refer to the
longitudinal laser spectrum since LASER takes into account only the
fundamental transverse mode solution. It is known from the theory that
the longitudinal laser spectrum depends on the optical gain,
spontaneous emission spectrum, and the cavity length in the third
dimension (or Z-direction). A shorter cavity length leads to a wider
energy spacing
between adjacent longitudinal modes, and so fewer longitudinal modes
will be actually lasing. From the computational point of view the
situation of the nearly single mode laser operation is very desirable
because each lasing mode considered imposes an additional computational
burden.

For illustration purposes the structure under consideration is the same
as in the previous example in this section. We refer to that example
regarding the laser structure definition, mesh, material and physical
models specification.

The difference between this and the previous simulation is that
physically based optical gain modes are activated in LASER simulation
using the syntax
{bold} models lmodes gainmod=1 
. Gainmod=1 sets the frequency dependent model.
The parameters
{bold} las_einit las_efinal 
are used to specify the photon energy range for spectral analysis, and the
{bold} cavity_length 
parameter is set to 50 microns. The latter value is rather small but it
allows us to demonstrate the spectral analysis within a comparatively
short run time.

As in the previous example the additional variables specified in the
{bold} output 
statement will be saved in the output structure file. These include the
conduction and valence band potentials for analyzing the energy band
diagram, total, SRH, Auger, and radiative recombination rates, and
current flowlines.

During simulation the IV data, light power, and total optical gain data is
stored in the log file. The laser spectra (gain spectra and photon
density spectra) are stored in separate log files for each bias
condition. The name of the spectrum log file is specified using the
parameter
{bold} spec.name 
in the 
{bold} models 
statment in the LASER portion of the input file. The following results
are displayed in TonyPlot:

{bullet} Total light output power versus current 
{newline}
{bullet} Gain spectra for different laser biases (currents) below and above lasing threshold  
{newline}
{bullet} Light output spectrum below and above lasing threshold

For comparison, the light output power vs diode current is shown along
with the similar data obtained in the previous example. The gain
saturation effect is
clearly seen after laser threshold. Only a few of the longitudinal
modes are actually lasing and the light output spectrum is practically
the same after the lasing threshold.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} laserex03.in : GaAs/AlGaAs Stripe Geometry Laser 

Requires: Blaze/Laser
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates simulation of a the  stripe geometry
GaAs/AlGaAs laser diode. Physically based frequency dependent optical
gain model is used in this example. The example shows:

{bullet} Laser structure definition using Atlas syntax
{newline}
{bullet} Material parameters specification
{newline}
{bullet} Setting conventional physical models
{newline}
{bullet} Device initial biasing 
{newline}
{bullet} Activating LASER module of Atlas
{newline}
{bullet} Mesh definition for solving the Helmholtz wave equation
{newline}
{bullet} Definition of laser physical models and their parameters
         including optical gain model
{newline}
{bullet} Calculation of laser electrical and optical characteristics

In this example the same approach is applied to simulate a laser structure of
a different geometry and material composition. The active region of the
device under consideration represents a narrow stripe made of GaAs
included between two AlGaAs regions. The logistics of the structure,
material parameters and physical models definition repeat that of the
previous two examples in this section. Refer to those examples for
more detailed explanations.

After performing the LASER simulation and saving the results in the log and
structure output files, the following results are displayed in
TonyPlot:

{bullet} Total light output power versus current 
{newline}
{bullet} Light intensity distribution over the structure

Since stripe geometry lasers do not provide sufficient light confinement
in the direction parallel to the p-n- and heterojunction planes, the
lasing region
can be smeared laterally along the active region or shifted to a side
of the structure due to fluctuations in the carrier density and
dielectric permittivity. The latter may lead to the  spatial hole
burning effect and have a negative influence on the laser
characteristics. In this particular example spatial hole burning does
not occur, but the lack of index waveguiding in the lateral direction
which results in spreading the lasing area along the active region is
clearly visible.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} laserex04.in : Using Reflect on a GaAs/AlGaAs Stripe Geometry Laser 

Requires: Blaze/Laser
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the use of a reflecting laser boundary condition for the simulation of a stripe geometry
GaAs/AlGaAs laser diode . The example shows:

{bullet} Laser structure definition using Atlas syntax
{newline}
{bullet} Material parameters specification
{newline}
{bullet} Setting conventional physical models
{newline}
{bullet} Device initial biasing 
{newline}
{bullet} Activating LASER module of Atlas
{newline}
{bullet} Mesh definition for solving the Helmholtz wave equation
{newline}
{bullet} Definition of laser physical models and their parameters
         including a physically based frequency dependent optical
	gain model
{newline}
{bullet} Comparison between the full laser diode structure and simulation
 of only half the structure but with a reflecting laser boundary
 condition

The logistics of the structure, material parameters and physical models definition repeat that of the previous examples in this section. Refer to those examples for more detailed explanations.

Two simulations are performed; the first simulation is of only half the structure by assuming reflection around the x=0 plane and the second simulation is of the entire device. 

To create the reflecting laser boundary condition, the 
{bold} reflect 
parameter of the
{bold} laser 
statement should be specified. This automatically assumes that the device is reflected around the x=0 plane. Also, the device mesh should have the diagonal triangle flipping turned off by specifying the parameter
{bold} ^diag.flip 
on the 
{bold} mesh 
statement.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} laserex05.in : Simulating a Multi-Quantum Well AlGaInP Laser Diode

Requires: Blaze/Laser/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the application of Laser to simulate a multi-quantum well laser diode. The key points of this simulation are :

{bullet} One mesh for both electrical and laser simulations
{newline}
{bullet} Laser structure definition using new Atlas region syntax
{newline}
{bullet} Optical and electrical material parameters specification for the chosen materials
{newline}
{bullet} Application of the QWELL parameter for active layer creation and quantum well simulation
{newline}
{bullet} Use of LASER statement to define laser attributes
{newline}
{bullet} The same BLAZE mesh used for both electrical and laser simulations

This example is derived from published work [IEEE Journal of Quantum Electronics, 
VOL. 34, NO. 9, September 1998] and is reproduced as closely as possible in this simulation.

{bold} Mesh Creation 

The standard Atlas mesh 
is used in both the electrical and laser parts of this simulation. If no specific laser mesh is created then Laser defaults to the standard Atlas mesh.

{bold} Region Creation 

The REGION statements are used to define many region quantities. The material type is defined with the 
{bold} material 
parameter and the composition fractions within this material are set using the 
{bold} X.COMP 
and
{bold} Y.COMP 
 parameters appropriately. 

The doping type and concentration are also defined on the region statement where the parameters
{bold} acceptor 
and
{bold} donor 
are used to define a uniform concentration in each region. If a non-uniform concentration is required then the DOPING statement would need to be used instead.

{bold} Material Parameters 

The 
{bold} material 
 statement is used to set various physical quantities for each material region in the device. 
The band gap, conduction and valence band density of states and band alignment are declared with the parameters
{bold} eg300, NC300, NV300 
and
{bold} align. 
The material permittivity for the solution of Poisson's equation and the high frequency bulk dielectric constant are both explicity set with the parameters
{bold} permittivity 
and
{bold} epsinf. 
Finally, the material lifetimes 
{bold} taun0 
and 
{bold} taup0 
 and the constant of radiative recombination 
{bold} COPT 
 are defined.

{bold} Quantum Wells (QWELL) 

The 
{bold} qwell 
 parameter of the
{bold} models 
statement firstly creates new material region(s) that will contain the
 quantum wells. Both the individual barrier width
{bold} wb 
and the quantum well width 
{bold} ww 
 need to be defined. Then a solution is found for bound state energies
 in the quantum well by a solution to a coupled set of Poisson /
 Schrodinger equations.
The solution to this equation is then used in the 
{bold} yan 
model to calculate the optical gain of the quantum well. 

{bold} Laser and Physical Models 

The physical models may be chosen from the manual as normal and in this
simulation there are 3 key models. The
{bold} fermi 
model is chosen to correctly simulate population inversion statistics
within the active region. The  laser gain model chosen for the active
regions is the multiple quantum well model chosen with the
{bold} gainmod=4 
parameter. Finally the spontaneous recombination model  
{bold} optr 
 has been chosen to calculate the spontaneous recombination in the
 device. The spontaneous recombination is used in the photon
 rate equations to calculate the photon density.

The solution to the Helmholtz equation is controlled by parameters on the 
{bold} laser 
statement. On this line the rear and front reflectivities can be
defined with the
{bold} rf 
and 
{bold} rr 
parameters. The length of the laser cavity must be defined, so that the
longitudinal modes can be calculated correctly, using the
{bold} cavity.length 
 parameter.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} laserex06.in : Dynamic Simulation of Relaxation Oscillation

Requires: Blaze/Laser
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the simulation of the buried heterostructure
InP/InGaAsP laser diode described earlier in example laserex02. A
description of the structure and the DC behaviour is contained in
example laserex02. This example performs a transient simulation of an
impulse applied to the anode contact of the laser diode.

The key points of this simulation are :

{bullet} Mulit-longitudinal mode simulation
{newline}
{bullet} Addition of laser losses of bulk absorption and free carrier loss
{newline}
{bullet} DC simulation to obtain the operating point at the lasing threshold
{newline}
{bullet} Transient simulation response to a small impulse at the anode contact
{newline}
{bullet} Resultant oscillation in simulated photon density
{newline}

The dynamic laser equations used in Atlas include the photon rate
equation as well as the equations for gain and spontaneous
recombination. This set of equations will be shown in this example to
reproduce the dynamic characteristics of relaxation oscillation.

The example described in laserex02 for DC characteristics of a laser
diode has been extended to examine the relaxation oscillations that
exist when a sudden impulse is applied to the anode contact. This
requires a transient simulation of the laser to reproduce these
oscillations. The physical origin of the oscillation is is based upon
the following principle: an increase in carrier density in the laser
(caused by the small impulse) will cause an increase in the calculated
gain which results in a rise in  the photon density inside the laser.
This increase in photon density causes an increase in the stimulated
recombination rate which decreases the carrier density, which causes
the photon density to fall, which causes the carrier density to rise,
and so on. An oscillatory process is therefore established which will
have some characteristic frequency and a characteristic damping time
constant.

This simulation uses the multi-longitudinal mode calculation, first
used in laserex02, in both the DC and transient parts of the
simulation. The final plots will illustrate how the laser emission
spectrum will change from the beginning to the end of the transient
simulation.

Four laser loss mechanisms have also been included; internal losses,
mirror loss, bulk absorption loss and free carrier loss. These
mechanisms have been activated with the parameters
{bold} las.losses, 
{bold} las.mirror, 
{bold} las.absorption 
and 
{bold} las.fcarrier. 

The plot of the final logfile produced by the transient simulation will
plot the photon density versus time, and will show the oscillation
described previously.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.   





{subsection} laserex07.in : Ridge Multiple Quantum Well Laser 

Requires: Blaze/Quantum/Laser
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the simulation of 
GaAs/AlGaAs ridge   laser diode. 
The ridge structure allows two fundamental modes: TE-like and TM-like, as solved by vector Helmholtz solver. 
Due to higher TE gain, the TE-like mode dominates. 
Several slab modes are also present in the active region  and contribute to total laser intensity. 



The key points of this simulation are :

{bullet} Multi-transverse mode simulation, with mode competition 
{newline}
{bullet} Demonstration of vector Helmholtz solver 
{newline}
{bullet} Demonstration of Newton scheme for coupling of photon rate equations with drift-diffusion transport equations  
{newline}

The results show 2D plots of total optical intensity at anode bias of 1.5V and 3V, with the obvous contribution of non-fundamental modes.
 The IV log file contains information of the power, photon density modal gain, modal loss and modal refractive indexes for each mode.
 Spectrum log files contain information on gain and spontaneous emission spectra for each quantum well. 
 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.





{subsection} laserex08.in : Multiple Longitudinal Modes in Ridge MQW  Laser

Requires: Blaze/Quantum/Laser
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the simulation of
GaAs/AlGaAs ridge  laser diode with multiple longitudinal modes.
Previous example showed that TE-like fundamental mode is the main lasing mode.
Here we use scalar Helmholtz solver and exclude TM modes, using parameter  HELM.TM. 
Slab transverse modes are neglected.
Longitudinal modes in the range of energies  [1.42; 1.5] eV are taken into account. 
To limit the number of longitidinal modes, we set intermode energy separation to 4meV using DELTAE parameter. 
If this parameter is omitted, energy separation will be that of Fabry-Perot resonator with length set by CAVITY_LENGTH. 
Laser simulation starts automatically whenever optical gain anywhere in the device becomes positive, which happens just before the threshold. 
 If subthreshold behavior is of interest, use START parameter on LASER statement.


The key points of this simulation are :

{bullet} Multi-longitudinal  mode simulation, with mode competition
{newline}
{bullet} Demonstration of scalar Helmholtz solver
{newline}
{bullet} Demonstration of modal spectra.  
{newline}

The results show 2D plots of total optical intensity at anode bias of 1.5V.
 The IV log file contains information of the power, photon density modal gain, modal loss and modal refractive index for the fundamental transverse  mode.
 Spectrum log files contain information on gain and spontaneous emission spectra for each quantum well.
Modal spectrum log files are stored when SPECTRUM is specified on the SAVE statement with "_modal" appended at the end of the file name. Modal spectra contain modal gain, modal Rsp, modal photon density and modal lifetime for each longitudinal mode. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} laserex09.in : Disk MQW Laser

Requires: Blaze/Quantum/Laser
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the simulation of a tunnel injection
InGaAsP/InAsP disk laser. The Disk laser has a cylindrical cavity, which
favors lasing of modes with high azimuthal (orbital) number. The fact
that this is a tunnel injection laser has an important modeling
implication. Since hot carriers are suppressed in the active region due
to tunnel injection directly to low energy bound states, the carrier
density in active region is predominantly fully 2 dimensional. Thus as
opposed to a conventional laser, the capture-escape model is not
necessary to dynamically couple the bound state density to bulk carriers
in the active region. 

To model the optical response in the active region, the deck employs the
Luttinger-Kohn model k.p band structure model using the KP.CV2 parameter
on the MODELS statement. The quantum wells are treated as coupled. The
optical gain and spontaneous emission are computed using integration over 
k-space. The integration can be activated by the KP.ADAPTIVE parameter on
MODELS statement. It is not activated by default in this example to reduce
simulation time.

The deck employs a 2D cylindrical vector Helmholtz solver to find
intensity and optical field distribution in R-Z plane of the cavity. The
orbital number is set by ORBIT parameter on the LASER statement. If a
range of orbital numbers is desired, set parameters ORB.MIN and ORB.MAX.
Metal electrodes are excluded from the solution domain by swtching off
HELMHOLTZ parameter on the REGION statement. Perfect Electric Conductor
boundary conditions are used at the boundaries of the domain.

Details of extraction of light from the cavity is not modeled here.
Instead, exctraction losses are set by parameter EXTR.LOSS [1/cm], which
is included in the photon rate equations. Mirror losses are kept at zero
by setting mirror reflectivities to 100% . Parameter PHOTON.ENERGY is
the initial guess for the cavity eigen mode's energy. The actual eigen
energies are printed on the screen, when parameter PRT.EVAL is specified
on the LASER statement.

The deck uses voltage boundary conditions throughout the simulation. The
voltage boundary conditions were found to provide better stability and 
performance in the simulation.

The important modeling highlights are:

{bullet} k.p bandstructure based calculation of gain and spontaneous
emission in the active region. The band structure is computed with
strain effects and full coupling to the electrostatic potential at every
bias step.
{newline}
{bullet} Multi-transverse  mode simulation of disk laser, with mode
competition
{newline}
{bullet} Demonstration of a 2D vector Helmholtz solver for disk geometry
with full coupling to the changes in the complex refractive index due to
the gain computed from the k.p model, and free-carrier absorption from
the bulk carrier density in the device.
{newline}
{bullet} Tunnel injection modeled using a non-local tunneling junction. 
{newline}

The results show the total power emitted, modal photon density, gain and
loss of the lasing mode as a function of anode current. The family of
k.p gain and spontaneous emission spectra are shown at the sub-threshold
point of  micro Amps, near threshold, and above threshold. Flattening of 
the electrostatic potential across the active region above threshold reduces 
the energy differences between states localized in different wells. 
This effect is clearly seen by comparing the valence bands at the 
sub-threshold and above threshold points. The 2D plots optical intensity 
above threshold show the spatial profile of the lasing mode.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} laserex10.in : Stripe Laser using Effective Index Solver   

Requires: Blaze/Quantum/Laser/Led
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the simulation of
GaAs/AlGaAs stripe laser diode. 
This deck employs an effective index (1.5D) scalar Helmholtz solver to find intensity and optical field distribution, which combines 1D solutions in in X and Y directions.  
Total number of transverse modes is set by NMODES parameter. To set the number of 1D modes in X direction, use EFFMODES parameter.   TM modes are blocked by switching off HELM.TM. Additionally, when REFLECT parameter is present, you may block either symmetric or anti-symmetric solutions, by swithcing off HELM.SYM or HELM.ASY.
Perfect Electric Conductor  boundary conditions are used. Alternatively, Perfect Magnetic Conductor can be used by setting HELM.PMC instead of HELM.PEC.  
Default material refractive incexes are used. To remove   default material absorption, imaginary part of material dielectric constant is set to zero by EPSIM.ISO parameter. 
 Instead, 3-band K.P gain/absorption  model for zincblende bulk and quantum wells, set by ZB.THREE on MODELS and GAINMOD=5 on LASER statements, is used everywhere in the device. To check the spectra of gain and spontaneous emission of a particular region, LED parameter is set on the REGION statement.
 


The key points of this simulation are :

{bullet} Demonstration of 1.5D effective index Helmholtz solver
{newline}
{bullet} Demonstration of bulk multiband k.p gain model 
{newline}



The results show 2D plots of total optical intensity  at anode bias of 3V.
 The IV log file contains information of the power, photon density modal gain, modal loss and modal refractive index for the fundamental transverse  mode.
 Spectrum log files contain information on gain and spontaneous emission spectra for the active region.
Modal spectrum log files are stored when SPECTRUM is specified on the SAVE statement with "modal_" appended to the file name. Modal spectra contain modal gain, modal Rsp, modal photon density and modal lifetime for each mode.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} laserex11.in : 1D GaN Laser Model 

Requires: Blaze/Quantum/Laser
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates a 1D laser model, suitable for fast design of  transport and gain characteristics of the active region in the vertical Y-direction. 
This deck assumes that the device is homogeneous in X-direction and  employs a 1DY  scalar Helmholtz solver to find intensity and optical field distribution.
Material refractive indexes are set manually, using REAL.INDEX and IMAG.INDEX parameters on the MATERIAL statement.
3-band  K.P gain/absorption  model for wutizite bulk and quantum wells, set by WZ.THREE on MODELS and GAINMOD=5 on LASER statements, is used everywhere in the device. To check the spectra of gain and spontaneous emission of a particular region, LED parameter is set on the REGION statement.




The key points of this simulation are :

{bullet} Demonstration of 1D Helmholtz solver
{newline}
{bullet} Demonstration of wurtzite 3-band k.p gain model
{newline}



The results show 2D plots of total optical intensity  at anode bias of 3V.
 The IV log file contains information of the power, photon density modal gain, modal loss and modal refractive index for the fundamental transverse  mode.
 Spectrum log files contain information on gain and spontaneous emission spectra for the active region.
Modal spectrum log files are stored when SPECTRUM is specified on the SAVE statement with "modal_" appended to the file name. Modal spectra contain modal gain, modal Rsp, modal photon density and modal lifetime for each mode.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} laserex12.in : Silicon p-i-n Waveguide Modulator 

Requires: Blaze/Quantum/Laser
{newline}
Minimum Versions: Atlas 5.24.1.R


This example demostrates a simulation of Si p-i-n  modulator using a WAVEGUIDE statement. 
The modulation mechanism is based on electroabsorption by free-carriers, which are injected into the waveguide.
The free-carrier absorption model, specified by ABS.FCARRIER on the MODELS statement, can be modified  
n the MATERIAL statement using parameters FC.AN, FC.AP, FC.RN, FC.RP, etc. 

Local refractive index at a particular location can be stored into the IV log file  using PROBE statement.
In addition, a dispersion of local refractive index can be stored in a separate file, using SAVE statement and REFR.SPEC parameter.  

The WAVEGUIDE statement can be used as a standlone optical eigen solver for a one-time solution. If TRACE parameter is added to the WAVEGUIDE statement, eigen modes are solved at each bias point as a post-processing. 
In such case, when WVGD.REFR is specified on the OUTPUT statement,  IV log file contains effective refractive index and absorption for each optical mode.  

The results show 2D plot of intensity  pattern for the fundamental mode at light wavelength of 1.31 micron at zero bias.
Dispersion of local refractive index is stored in laserex12_refrspec_v0.log.
The IV log file contains indormation on  effective  refractive index and effective absorption for each transverse  mode and also local refractive index at p-,i- and n-type side of the device.
Time dependent simulation shows how effective refractive indexes are modulated with time and the coresponding eye diagram.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

 
{subsection} laserex13.in : Front Mirror with Tuning Air Gap and DBR Rear Mirror

Requires: Blaze/Laser
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates a more general solution to an edge emitting LASER,
where optical intensity has variance along the direction of propagation, 
resulting from a 
{bold} DBR mirror 
at one end of the LASER and a 
{bold} tuning air gap and external mirror 
at the other end.  

In order to leverage syntax that already existed for vertical cavity surface 
emitting LASERs (VCSELs), this edge emitting LASER simulation is turned on it's
side, so that the distributed Bragg reflector (DBR) is oriented in the same 
plane as for all VCSEL simulation examples.  This allows us to use the same 
simplified syntax previously described in the VCSEL examples to create the 
many layers of the DBR mirror, using just two lines in the input file.  The 
"front" and "rear" mirrors of the laser are therefore now at the "bottom" and
"top" of the structure respectively.

In order to inform the simulator that this type of LASER simulation is 
required, specify the logical parameter 
{bold} HYBRID 
on the LASER statement.

The position of the mirror in the air gap that extends below what is the 
bottom of the structure in this simulation (in the Y direction), is defined by
the parameter 
{bold} FRONTMIRROR.LOC=<n> 
where <n> is a Y location anywhere below the structure.  Defining a 
FRONTMIRROR.LOC value located inside the structure, results in this 
parameter being ignored and the simulation presumes an air gap of zero.  In 
this example the airgap FRONTMIRROE.LOC parameter is set using a variable 
called "front_mirror" which sets the FRONTMIRROE.LOC parameter to 100.6um, 
{bold} creating an air gap of 0.6um 
(since the bottom of the structure is located at Y=100).  

Diffraction losses in the air gap can also be taken account of by specifying
the new logical parameter,
{bold} LOSS.DIFFRACTION 
in the LASER statement, whilst another new parameter
{bold} HYBRID.SPECRES 
specifies the energy resolution in units of eV, to search for lasing modes of
the whole active structure. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support files to 
your current working directory. Select the
{bold} run 
button to execute the example.


{section} VCSEL : VCSEL Application Examples

{subsection} vcselex01.in : VCSEL with GaAs/AlGaAs DBR: DC Characteristics

Requires: Blaze / VCSEL
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the basic DC and optical characteristics of a 
Vertical Cavity Surface Emitting Laser (VCSEL).  It demonstrates:

{bullet} VCSEL structure definition using Atlas syntax
{newline}
{bullet} Material parameter specification
{newline}
{bullet} Choosing the optical and electrical physical models
{newline}
{bullet} Initial biasing of the device
{newline}
{bullet} Activating the VCSEL module of Atlas
{newline}
{bullet} Calculation of laser electrical and optical characteristics
{newline}

The first half of the input file describes the Atlas structural syntax,
including the mesh, region, electrode and doping commands that are also
common to other Atlas examples.  LASER specific structural commands
include the powerful DBR statements which allow the definition
of the numerous periodic semiconductor hetero-structure layers that
make up the two mirrors of a VCSEL and its active region respectively,
each in a single line of the input file.  VCSELs are modelled using a
pseudo-3D method which assumes the device has cylindrical geometry and
symetry.  This is activated using the MESH CYL statement.  The point
X=0 represents the center of the device.  The mesh statements define
the mesh in the X direction only.  Mesh in the Y direction is defined
using the SY=<n> parameter of the REGION statements.  This creates "n"
number of mesh points in the Y direction in the region to which it
refers.  DBR statements also contain Y mesh parameters and are
described below.

The REGION statements contain "TOP" or "BOTTOM" parameters to define the
location of the region.  The device can therefore have the new region being
defined attached to either the top or bottom of the device.  Donor or acceptor
doping can also be assigned in each region statement using the DONOR=<n> or
ACCEPT=<n> parameters respectively.

The Distributed Bragg Reflectors (DBRs) are defined using the DBR statement.
The DBR statement allows the definition of a mirror consisting of alternating
layers of two materials with differing refractive index.  The number of layers
is defined by the HALF.CYC=<n> parameter.  The thickness of each type of layer
is defined by the THICK1=<n> and THICK2=<n> parameters respectively.  The 
number of mesh points in the Y direction are defined by the N1=<n> and N2=<n>
parameters respectively.  The materials of each layer are defined by the
MAT1=<material> and MAT2=<material> parameters.  Mole fractions for ternary and
quaternary materials are defined by X1.COMP=<n>, X2.COMP=<n> Y1.COMP=<n> and
Y2.COMP=<n> parameters.  Donor or acceptor doping is defined by ND1=<n>, 
ND2=<n>, NA1=<n> and NA2=<n> parameters respectively.

The active region of the VCSEL consists of one or more quantum wells.  In this
example, the active region contains 6 wells that are defined by the QWELL 
parameter on the associated REGION statements.  The sampling for Schrodinger
solutions is given by the WELL.NX and WELL.NY parameters of the REGION
statement.  The gain model for the active quantum wells is specified by the
LI parameter on the MODEL statement.  The SPONT parameter specifies that
the gain model will be used to model spontaneous recombination.

In order to maximize their reflectivity, the DBRs must be defined such that 
intensity peaks and troughs of the standing wave light pattern fall at the
boundary between the two dissimilar semiconductors.  The standing wave light
pattern for each mode is a function of the light propogation velocity and the
thickness of each layer of the DBR.  The ratio of light propogation velocity in
a vacuum compared to each layer in the DBR is given by the refractive index,
which in turn is the square root of the permittivity of the material at the
wavelengths concerned.  The permittivity of each semiconductor is defined by 
the ESPINF=<n> parameter in the MATERIAL statement.  It should be noted that
this is the optical permittivity which can be significantly lower than the
permittivity at electrical frequencies.

Once the structure has been defined a number of parameters regarding the 
photonic equations are defined in the VCSEL statement.  The photonic energy
range over which the user wishes to look for standing wave patterns is defined
by the EINIT=<n> and EFINAL=<n> parameters.  There is little point in 
investigating photonic energies less than the bandgap of the active region,
as these will not laze.  

During execution the program stores structure files at various biases
so that the user can track which standing wave pattern has the most
gain both before and after lasing occurs.  The standing wave pattern
associated with lasing in the fundamental mode usually consists of an
envelope function with a single large peak of light output located at
the active region.  Lasing is also asasociated with a sudden constancy
of the optical gain with bias which can be plotted in TonyPlot using
the created LOG FILE.  Typical parameters that can be viewd in TonyPlot
using the created structure and log files are:

{bullet} DC I-V diode characteristics
{newline}
{bullet} Light power versus electrical bias
{newline}
{bullet} Optical gain versus electrical bias
{newline}
{bullet} Light intensity distributed over the structure
{newline}

To load and run this example, select the
{bold} Load example  
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run  
button to execute the example.



{subsection}  vcselex02.in : VCSEL with Self Heating Effects

Requires: Blaze / VCSEL
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the basic DC and optical characteristics of a 
Vertical Cavity Surface Emitting Laser (VCSEL) and simulates the self heating
effects due to the power disipated by the diode.  It demonstrates:

{bullet} VCSEL structure definition using Atlas syntax
{newline}
{bullet} Material parameter specification
{newline}
{bullet} Choosing the optical and electrical physical models
{newline}
{bullet} Initial biasing of the device
{newline}
{bullet} Activating the VCSEL module of Atlas
{newline}
{bullet} Calculation of laser electrical and optical characteristics
{newline}
{bullet} Calculation of self heating effects from the power dissipated in the diode
{newline}

The first half of the input file describes the Atlas structural syntax, 
including the mesh, region, electrode and doping commands that are also common
to other Atlas examples.  LASER specific structural commands include the 
powerful DBR statements which allow the definition of the numerous 
periodic semiconductor hetero-structure layers that make up the two mirrors of
a VCSEL and its active region respectively, each in a single line of the input
file.  VCSELs are modelled using a pseudo-3D method which assumes that the device 
has cylindrical geometry and symmetry.  This is activated using the MESH CYL
statement.  The point X=0 represents the center of the device.  The mesh
statements define the mesh in the X direction only.  Mesh in the Y direction is
defined using SY=<n> parameter the REGION statements.  This creates "n" number
of mesh points in the Y direction in the region to which it refers.  DBR
statements also contain Y mesh parameters and are described below.

The REGION statements contain "TOP" or "BOTTOM" parameters to define the
location of the region.  The device can therefore have the new region being
defined attached to either the top or bottom of the device.  Donor or acceptor
doping can also be assigned in each region statement using the DONOR=<n> or
ACCEPT=<n> parameters respectively.

The Distributed Bragg Reflectors (DBRs) are defined using the DBR statement.
The DBR statement allows the definition of a mirror consisting of alternating
layers of two materials with differing refractive index.  The number of layers
is defined by the HALF.CYC=<n> parameter.  The thickness of each type of layer
is defined by the THICK1=<n> and THICK2=<n> parameters respectively.  The 
number of mesh points in the Y direction are defined by the N1=<n> and N2=<n>
parameters respectively.  The materials of each layer are defined by the
MAT1=<material> and MAT2=<material> parameters.  Mole fractions for ternary and
quaternary materials are defined by X1.COMP=<n>, X2.COMP=<n> Y1.COMP=<n> and
Y2.COMP=<n> parameters.  Donor or acceptor doping is defined by ND1=<n>, 
ND2=<n>, NA1=<n> and NA2=<n> parameters respectively.

The active region of the VCSEL consists of one or more quantum wells.  In this
example, the active region contains 6 wells that are defined by the QWELL 
parameter on the associated REGION statements.  The sampling for Schrodinger
solutions is given by the WELL.NX and WELL.NY parameters of the REGION
statement.  The gain model for the active quantum wells is specified by the
LI parameter on the MODEL statement.  The SPONT parameter specifies that
the gain model will be used to model spontaneous recombination.

In order to maximize their reflectivity, the DBRs must be defined such that 
intensity peaks and troughs of the standing wave light pattern fall at the
boundary between the two dissimilar semiconductors.  The standing wave light
pattern for each mode is a function of the light propogation velocity and the
thickness of each layer of the DBR.  The ratio of light propogation velocity in
a vacuum compared to each layer in the DBR is given by the refractive index,
which in turn is the square root of the permittivity of the material at the
wavelengths concerned.  The permittivity of each semiconductor is defined by 
the ESPINF=<n> parameter in the MATERIAL statement.  It should be noted that
this is the optical permittivity which can be significantly lower than the
permittivity at electrical frequencies.  The thermal properties of the
materials, necessary for calculating local temperature rises, are also defined
on the material statement in common with other thermal simulations.

Heat loss from the device is defined using thermal contacts in the THERMCONTACT
statement in the usual way, which specifies thermal conductivities to simulate
heat loss from radiation via exposed surfaces or conduction through the
semiconductor to a heatsink. 

Once the structure has been defined, a number of parameters regarding the 
photonic equations are defined in the VCSEL statement.  The photonic energy
range over which the user wishes to look for standing wave patterns is defined
by the EINIT=<n> and EFINAL=<n> parameters.  There is little point in 
investigating photonic energies less than the bandgap of the active region,
as these will not laze.  

During execution the program stores structure files at various biases
so that the user can track which standing wave pattern has the most
gain both before and after lasing occurs.  The standing wave pattern
associated with lasing in the fundamental mode usually consists of an
envelope function with a single large peak of light output located at
the active region.  Lasing is also associated with a sudden constancy
of the optical gain with bias which can be plotted in TonyPlot using
the creatd LOG FILE.  Typical parameters that can be viewd in TonyPlot
using the created structure and log files are:

{bullet} DC I-V diode characteristics
{newline}
{bullet} Light power versus electrical bias
{newline}
{bullet} Optical gain versus electrical bias
{newline}
{bullet} Light intensity distributed over the structure
{newline}
{bullet} Local device temperature in structure files or
{newline}
{bullet} Maximum device temperature versus electrical bias in log files
{newline}

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} vcselex03.in : VCSEL using Gain Guiding

Requires: Blaze / VCSEL
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the basic DC and optical characteristics of a 
Vertical Cavity Surface Emitting Laser (VCSEL) and simulates the self heating
effects due to the power disipated by the diode.  It demonstrates:

{bullet} VCSEL structure definition using Atlas syntax
{newline}
{bullet} Material parameter specification
{newline}
{bullet} Choosing the optical and electrical physical models
{newline}
{bullet} Initial biasing of the device
{newline}
{bullet} Activating the VCSEL module of Atlas
{newline}
{bullet} Activation of the gain guiding model using the LASER statement
{newline}
{bullet} Calculation of laser electrical and optical characteristics
{newline}
{bullet} Calculation of self heating effects from the power dissipated in the diode
{newline}

The first half of the input file describes the Atlas structual syntax, 
including the mesh, region electrode and doping commands that are also common
to other Atlas examples.  LASER specific structual commands include the 
powerful DBR statements which allow the definition of the numerous 
periodic semiconductor hetero-structure layers that make up the two mirrors of
a VCSEL and it's active region respectively, each in a single line of the input
file.  VCSELs are modelled using a pseudo-3D method which assumes the device 
has cylindrical geometry and symetry.  This is activated using the MESH CYL
statement.  The point X=0 represents the center of the device.  The mesh
statements define the mesh in the X direction only.  Mesh in the Y direction is
defined using SY=<n> parameter the REGION statements.  This creates "n" number
of mesh points in the Y direction in the region to which it refers.  DBR 
statements also contain Y mesh parameters and are described below.

The REGION statements contain "TOP" or "BOTTOM" parameters to define the
location of the region.  The device can therefore have the new region being
defined attached to either the top or bottom of the device.  Donor or acceptor
doping can also be assigned in each region statement using the DONOR=<n> or
ACCEPT=<n> parameters respectively.

The Distributed Bragg Reflectors (DBRs) are defined using the DBR statement.
The DBR statement allows the definition of a mirrors consisting of alternating
layers of two materials with differing refractive index.  The number of layers
is defined by the HALF.CYC=<n> parameter.  The thickness of each type of layer
is defined by the THICK1=<n> and THICK2=<n> parameters respectively.  The 
number of mesh points in the Y direction are defined by the N1=<n> and N2=<n>
parameters respectively.  The materials of each layer are defined by the
MAT1=<material> and MAT2=<material> parameters.  Mole fractions for ternary and
quaternary materials are defined by X1.COMP=<n>, X2.COMP=<n> Y1.COMP=<n> and
Y2.COMP=<n> parameters.  Donor or acceptor doping is defined by ND1=<n>, 
ND2=<n>, NA1=<n> and NA2=<n> parameters respectively.

The active region of the VCSEL consists of one or more quantum wells.  In this
example, the active region contains 6 wells that are defined by the QWELL 
parameter on the associated REGION statements.  The sampling for Schrodinger
solutions is given by the WELL.NX and WELL.NY parameters of the REGION
statement.  The gain model for the active quantum wells is specified by the
LI parameter on the MODEL statement.  The SPONT parameter specifies that
the gain model will be used to model spontaneous recombination.

In order to maximize their reflectivity, the DBRs must be defined such that 
intensity peaks and troughs of the standing wave light pattern fall at the
boundary between the two dissimilar semiconductors.  The standing wave light
pattern for each mode is a function of the light propogation velocity and the
thickness of each layer of the DBR.  The ratio of light propogation velocity in
a vacuum compared to each layer in the DBR is given by the refractive index,
which in turn is the square root of the permittivity of the material at the
wavelengths concerned.  The permittivity of each semiconductor is defined by 
the ESPINF=<n> parameter in the MATERIAL statement.  It should be noted that
this is the optical permittivity which can be significantly lower than the
permittivity at electrical frequencies.  The thermal properties of the
materials, necessary for calculating local temperature rises, are also defined
on the material statement in common with other thermal simulations.

Heat loss from the device is defined using thermal contacts in the THERMCONTACT
statement in the usual way, which specifies thermal conductivities to simulate
heat loss from radiation via exposed surfaces or conduction through the
semiconductor to a heatsink. 

Once the structure has been defined, a number of parameters regarding the 
photonic equations are defined in the VCSEL statement.  The photonic energy
range over which the user wishes to look for standing wave patterns is defined
by the EINIT=<n> and EFINAL=<n> parameters.  There is little point in 
investigating photonic energies less than the bandgap of the active region,
as these will not lase.  

During execution the program stores structure files at various biases
so that the user can track which standing wave pattern has the most
gain both before and after lasing occurs.  The standing wave pattern
associated with lasing in the fundamental mode usually consists of an
envelope function with a single large peak of light output located at
the active region.  Lasing is also associated with a sudden constancy
of the optical gain with bias which can be plotted in TonyPlot using
the creatd LOG FILE.  Typical parameters that can be viewd in TonyPlot
using the created structure and log files are:

{bullet} DC I-V diode characteristics
{newline}
{bullet} Light power versus electrical bias
{newline}
{bullet} Optical gain versus electrical bias
{newline}
{bullet} Light intensity distributed over the structure
{newline}
{bullet} Local device temperature in structure files or
{newline}
{bullet} Maximum device temperature versus electrical bias in log files
{newline}

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} vcselex04.in : VCSEL with Multiple Transverse Modes

Requires: Blaze / VCSEL
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the basic DC and optical characteristics of a 
Vertical Cavity Surface Emitting Laser (VCSEL).  It demonstrates:

{bullet} VCSEL structure definition using Atlas syntax
{newline}
{bullet} Material parameter specification
{newline}
{bullet} Choosing the optical and electrical physical models
{newline}
{bullet} Initial biasing of the device
{newline}
{bullet} Activating the VCSEL module of Atlas
{newline}
{bullet} Calculation of laser electrical and optical characteristics
{newline}
{bullet} Calculation of 4 transverse modes
{newline}

The first half of the input file describes the Atlas structural syntax, 
including the mesh, region electrode and doping commands that are also common
to other Atlas examples.  LASER specific structural commands include the 
powerful DBR  statements which allow the definition of the numerous 
periodic semiconductor hetero-structure layers that make up the two mirrors of
a VCSEL and its active region respectively, each in a single line of the input
file.  VCSELs are modelled using a pseudo-3D method which assumes the device 
has cylindrical geometry and symetry.  This is activated using the MESH CYL
statement.  The point X=0 represents the center of the device.  The mesh
statements define the mesh in the X direction only.  Mesh in the Y direction is
defined using SY=<n> parameter the REGION statements.  This creates "n" number
of mesh points in the Y direction in the region to which it refers.  DBR
statements also contain Y mesh parameters and are described below.

The REGION statements contain "TOP" or "BOTTOM" parameters to define the
location of the region.  The device can therefore have the new region being
defined attached to either the top or bottom of the device.  Donor or acceptor
doping can also be assigned in each region statement using the DONOR=<n> or
ACCEPT=<n> parameters respectively.

The Distributed Bragg Reflectors (DBRs) are defined using the DBR statement.
The DBR statement allows the definition of a mirrors consisting of alternating
layers of two materials with differing refractive index.  The number of layers
is defined by the HALF.CYC=<n> parameter.  The thickness of each type of layer
is defined by the THICK1=<n> and THICK2=<n> parameters respectively.  The 
number of mesh points in the Y direction are defined by the N1=<n> and N2=<n>
parameters respectively.  The materials of each layer are defined by the
MAT1=<material> and MAT2=<material> parameters.  Mole fractions for ternary and
quaternary materials are defined by X1.COMP=<n>, X2.COMP=<n> Y1.COMP=<n> and
Y2.COMP=<n> parameters.  Donor or acceptor doping is defined by ND1=<n>, 
ND2=<n>, NA1=<n> and NA2=<n> parameters respectively.

The active region of the VCSEL consists of one or more quantum wells.  In this
example, the active region contains 6 wells that are defined by the QWELL 
parameter on the associated REGION statements.  The sampling for Schrodinger
solutions is given by the WELL.NX and WELL.NY parameters of the REGION
statement.  The gain model for the active quantum wells is specified by the
LI parameter on the MODEL statement.  The SPONT parameter specifies that
the gain model will be used to model spontaneous recombination.

In order to maximize their reflectivity, the DBRs must be defined such that 
intensity peaks and troughs of the standing wave light pattern fall at the
boundary between the two dissimilar semiconductors.  The standing wave light
pattern for each mode is a function of the light propogation velocity and the
thickness of each layer of the DBR.  The ratio of light propogation velocity in
a vacuum compared to each layer in the DBR is given by the refractive index,
which in turn is the square root of the permittivity of the material at the
wavelengths concerned.  The permittivity of each semiconductor is defined by 
the ESPINF=<n> parameter in the MATERIAL statement.  It should be noted that
this is the optical permittivity which can be significantly lower than the
permittivity at electrical frequencies.

Once the structure has been defined, a number of parameters regarding the 
photonic equations are defined in the VCSEL statement.  The photonic energy
range over which the user wishes to look for standing wave patterns is defined
by the EINIT=<n> and EFINAL=<n> parameters.  There is little point in 
investigating photonic energies less than the bandgap of the active region,
as these will not laze.  The NMODES=4 parameter instructs the simulator
to calculate not just the fundamental lasing mode but a total of four most
significant transverse modes which can be plotted in the structure files.

During execution, the program stores structure files at various biases
so that the user can track which standing wave pattern has the most
gain both before and after lasing occurs.  The standing wave pattern
associated with lasing in the fundamental mode usually consists of an
envelope function with a single large peak of light output located at
the active region.  Lasing is also associated with a sudden constancy
of the optical gain with bias which can be plotted in TonyPlot using
the creatd LOG FILE.  Typical parameters that can be viewd in TonyPlot
using the created structure and log files are:

{bullet} DC I-V diode characteristics
{newline}
{bullet} Light power versus electrical bias
{newline}
{bullet} Optical gain versus electrical bias
{newline}
{bullet} Light intensity distributed over the structure for 4 modes
{newline}

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.
{section} Radiation : Radiation Application Examples
{subsection} radex01.in : SEU in a Reverse-Biased Diode

Requires: DevEdit 3D/Device 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This examples demonstrates SEU simulation in a reversed biased three
dimensional diode.

In this example, a diode structure is constructed using DevEdit 3D. The 
structure is then passed to Atlas. The input file consists of the following 
parts:

{bullet} Construction of the 3D device in DevEdit 3D
{newline}
{bullet} Transfer of the structure to Atlas by the DeckBuild autointerface feature
{newline}
{bullet} Setting of the physical models 
{newline}
{bullet} Perform DC bias solution 
{newline}
{bullet} Specification of parameters for the charge track
{newline}
{bullet} Simulation of the effects of SEU

The first stage of the input constructs the diode geometry, material regions,
doping profiles, and electrodes in DevEdit 3D. The structure was created in 
DevEdit 3D by drawing the device regions in interactive mode and specifying 3D
doping distribution. Finally, the mesh was generated automatically by specifying 
basic mesh constraints and refining in the important areas of the device.

The Atlas simulation begins by reading the structure from DevEdit 3D.
DeckBuild provides autointerface between DevEdit 3D and Atlas so that the
structure produced by DevEdit 3D is transferred to Atlas without having to
indicate the mesh statement.

The 
{bold} models 
statement is used to select a set of physical models for this simulation.
In this case, these models are SRH recombination, bandgap narrowing, 
concentration and field dependent mobility model. 

After the initial solution, the emitter voltage is ramped up to 3V in
DC mode,  thereby giving the initial condition of the structure for
transient analysis. The Newton algorithm is used for these
calculations. 

The key syntax in any SEU simulation is the 
{bold} singleeventupset 
statement, which is used to specify entry and exit points, radius and density
of the electron-hole pair distribution generated by the particle track.

Transient analysis is then performed to simulate charge
collection in the device due to the SEU. The
{bold} method halfimpl 
statement indicates that the half implicit scheme is to be used in the transient 
simulation. In this scheme the Poisson's, two continuity, and the total
current equations are solved in sequence. This method ensures efficient and fast convergence in transient mode. 

The results of the simulation are saved in the log file and then displayed using TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


 


{subsection} radex02.in : Multiple Ion Tracks

Requires: DevEdit 3D/Device 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This examples demonstrates SEU simulation in a diode structure in three
dimensions initiated by multiple tracks. Time dependence of the carrier
generation  is also included in the specification of the second
particle track. The input file consists of the following parts:

{bullet} Construction of the 3D device in DevEdit 3D
{newline}
{bullet} Transfer of the structure to Atlas by DeckBuild autointerface feature
{newline}
{bullet} Physical models specification
{newline}
{bullet} SEU parameter specification
{newline}
{bullet} Simulation of the effects of SEU

The diode structure under consideration is the same as in the previous
example and is constructed with the same DevEdit 3D run. The structure is
then passed to Atlas for electrical calculations using the
autointerface feature in DevEdit 3D. The same set of physical models
is applied.

The two
{bold} singleeventupset 
statements are now used to specify entry and exit points, radius and
density of generated electron-hole pairs due to  two alpha particle
tracks. Different from the first track where the generation rate is
position dependent, only the second track includes position and time
dependent generation. Parameters tc and t0 in the second statement
specify the characteristic time of the Gaussian time dependency, and
the time instant of the peak of generation.

The emitter voltage is ramped here again up to 3V in the DC mode, and then the transient analysis is performed to simulate charge collection in the device.
The numerical algorithms that are used repeat those of the previous example.

The results of the simulation are saved in the log file and then displayed using TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.





{subsection} radex03.in : Single Event Upset in a 3D MOSFET 

Requires: DevEdit 3D/Device 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates simulation of the effects of different angles
of incidence of an SEU in a MOSFET structure. The MOSFET structure is
constructed using DevEdit 3D. The structure is then passed to Atlas for
electrical testing. The input file consists of the following parts:

{bullet} Construction of the device in DevEdit 3D
{newline}
{bullet} SEU simulation in Atlas: particle with normal incidence
{newline}
{bullet} SEU simulation in Atlas: particle with oblique incidence

Atlas contains many features to enable the simulation of Single Event Upset
(SEU) phenomena. Models for charge generation exist both in 2D, 3D and quasi-3D
cylindrical coordinates. It is also possible for the users to add their own
position and time dependent charge generation using the C-Interpreter and
incorporate these into Atlas simulations.

The first stage of the input file constructs the MOSFET geometry,
material regions, doping profiles, electrodes, and subsequently generates the mesh
in 3D. This is perfromed in DevEdit 3D by drawing the device regions in
interactive mode, and specifying 3D doping distributions. The mesh was
generated automatically by specifying basic mesh parameters and
constraints with subsequent refinement based on the doping
distribution. 

DevEdit 3D generates 2 types of files: DevEdit 3D input file and the
structure file. The first can be run in the DeckBuild to produce the
corresponding structure file and is included here as the first portion
of the input file. The second can be read in directly by Atlas in the
MESH statement. Note that the DevEdit 3D input file can be edited as any
other input file.  It is straightforward to change type and value of
the doping associated with each region or resize regions.  More
importantly DevEdit 3D input files can also be read directly into the
graphical user interface of DevEdit 3D to provide all the menu options
used to construct the structure.

The Atlas simulation begins by reading the structure from
DevEdit 3D.  DeckBuild provides an autointerface between DevEdit 3D and Atlas so
that the structure produced by DevEdit 3D is transferred to Atlas without
having to indicate the 
{bold} mesh 
statement (commented out in this example).
Without the automatic DevEdit 3D/Atlas interface under DeckBuild the MESH
statement is needed to load the structure and the mesh.

The first active statements in the Atlas portion of the input file are contact
and model definitions. In the 
{bold} contact 
statement, the workfunction is specified
for the gate contact to reflect the properties of polysilicon. The set of 
physical models used in the simulation includes Shockley-Read-Hall and Auger
recombination as well as the CVT mobility model accounting for doping, parallel and
transverse electric field mobility dependencies. The 
{bold} material 
statement and its
parameters are not defined in the input file implying that the default values 
for silicon are used. A two-carrier solution of the problem is indicated through
the parameter 
{bold} carrier=2 
in the 
{bold} method 
statement. However, this parameter is
omitted here since it represents the default setting.

In practical applications, while simulating the latched state of a
transistor in a memory cell, a large lumped resistor must be
attached to the drain since the latter is in the floating state. This
should adequately represent the MOSFET in either a high or low state that
may be used in the SRAM cell. However, this lies beyond the scope of the
example considered here. The purpose of this example is to
demonstrate general capabilities in simulating the SEU by analyzing the
reaction of the device in the off state to the charge generation of the
SEU.

The simulation is first performed to obtain the condition of the
structure prior to the particle hit. This condition is with the drain
voltage of 5V, and all other electrodes grounded. This condition of the
structure is saved in a solution file for the
use in the second atlas run.
 
The parameters of the charge track are specified in the 
{bold}singleeventupset 
 statement.
The general description of the SEU physical model employed in Atlas 3D mode
as well as the description of all of the parameters for specifying position
and time dependent generation is given in the Appendix to this example's
description.

The first SEU simulation is performed for a normal particle incidence through
the drain region (along Y direction) with a maximum carrier density generated
of 1.e18 cm-3. The characteristic radius of the track was defined to be 0.05 
micron, the characteristic time of the Gaussian time dependency - 2 ps, and
the time instant of the peak of generation - 4 ps. 

The transient simulation is performed to monitor the effects of SEU
generation. The initial time steps in the solve statements are defined
by the user (eg. 0.05 ps in the first solve statement), while the subsequent
time steps are selected automatically. The simulation is performed up
to 0.1 microsecond of physical time. To analyze the effect of carrier generation
on internal physical distributions, an output structure file 
is saved for the instant of the peak of generation (t=4 ps).

The external terminals transient characteristics are saved in the .log
file. The MOSFET transient response in the form of drain current
transient characteristic is displayed using TonyPlot.

The simulation then proceeds to the second Atlas input file for
simulating oblique particle incidence. This input file contains the
same CONTACT and MODELS definitions as the previous one. The SEU
definition of the particle hitting the device along its longer diagonal
through the drain region (far left top corner) down to the
near right bottom corner of the structure is specified in the SINGLE
statement. All other parameters of the SEU are the same as in the
previous Atlas simulation. The condition of the structure of Vds=5 V is
loaded and the transient response of the SEU is simulated for the second
SEU conditions.

The external terminals transient characteristics are saved in the .log file
, and the structure information is saved in the solution file 
at the peak of generation.

Both drain transient current characteristics corresponding to the different SEU
conditions are then displayed in TonyPlot. The peak of the current associated
with the drift collection is achieved at approximately 6 - 7 ps. Note that 
the peak of generation is taking place at 4 ps. The drift collection continues
for about ~100 ps when the charge in the depletion region is practically 
collected. The peak of the current for the diagonal incidence is calculated to
be slightly higher than for the normal incidence. The decrease in current is
however slower for the normal incidence making the total extracted charge 
greater. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} radex04.in : Arbitrary Charge Generation using C-Interpreter 

Requires: Device 3D/C-Interpreter
{newline}
Minimum Versions: Atlas 5.24.1.R

This examples demonstrates the use of the C interpreter function
{bold} F3.RADIATE.  
This function allows the user to specify arbitrary
electron hole pair generation as a function of position and time.
This example illustrates the functionality using a simple block 
function for the charge. Other template files are loaded along
with the input file. These can be substituted in the line:

{bold} beam num=1 f3.radiate=(filename)

{bold} Note 
that a generation value calculated by the C function for each XYZ
location in the device. This value is multiplied by the value of the
{bold} b1 
of the 
{bold} solve 
statement before being applied.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} radex05.in : Defining a Sphere of Charge using C-Interpreter

Requires: Device 3D/Luminous 3D/C-Interpreter
{newline}
Minimum Versions: Atlas 5.24.1.R

This examples demonstrates the f3.radiate function by generating a 
sphere of charge inside a cube of semiconductor material.


Note that a generation value calculated by the C function for each XYZ
location in the device. This value is multiplied by the value of the
{bold} b1 
of the 
{bold} solve 
statement before being applied.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



  





{subsection} radex06.in : SEU in Memory Cell Transistor

Requires: DevEdit 3D/Device 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates SEU in a MOSFET with an external resistor and capacitor emulating a RAM cell.  The example shows:

{bullet} Formation of structure in DevEdit 3D
{newline}
{bullet} Parameterized structural and doping parameters 
{newline}
{bullet} Automatic interface from DevEdit 3D to Device 3D
{newline}
{bullet} Setting of external resistor and capacitor on the 
{bold} drain
contact
{newline}
{bullet} Definition of the SEU pulse
{newline}
{bullet} DC simulation to bias MOSFET in initial cell condition
{newline}
{bullet} Transient simulation of SEU strike
{newline}
{bullet} Analysis of voltage drop at the drain contact

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} radex07.in : Total Dose X-Ray Effects in an n-MOS Gate Oxide

Requires: VictoryDevice/SEE
{newline}
Minimum Versions: Victory Device 1.10.2.R

This examples demonstrates positive charge build up and
{bold} radiation induced charge de-trapping
in an n-MOS gate oxide as a result of
{bold} 10keV X-Ray irradiation.

A physical effect missing in previous total dose models is radiation induced 
de-trapping of previously trapped oxide charge, as a result of the 
{bold} trapped charge being released after absorbing energy quanta from the
{bold} geminate recombination process.
Geminate recombination occurs when an electron-hole pair created from 
absorbtion of radiation, recombine again before an electric field can 
accelerate the pair in opposite directions.  Clearly the probability of 
geminate recombination increases with reducing electric field.  Thus 
{bold} the rate of hole de-trapping in the oxide also increases with a 
{bold} reduction in electric field,
as discussed in the reference for this model from Kimpton et al.,
{bold} "A Simple Trap-Detrap Model for Accurate Prediction of Radiation Induced
{bold} Threshold Voltage Shifts in Radiation Tolerant Oxides, for All Static or
{bold} Time Variant Oxide Fields" 
Solid-State Electronics, Vol. 37, No. 1, pp.153-158, 1994

To demonstrate both the radiation induced hole trapping and de-trapping 
phenomenon, a positive bias is applied to the gate of an n-MOSFET and is
irradiated with 10keV X-Rays. Positive oxide charge builds up during irradiaton
as is monitored using the
{bold} probe material=oxide p.conc
statement and by comparing the 
{bold} pre and post irradiation threshold voltage.
After irradiation to 1MRad, the gate bias is changed to -0.9 volts to minimise
the gate oxide field.  The device is then re-irradiated with another 1MRad dose
and the trapped hole concentration in the gate oxide is monitored.  

The greatly reduced oxide field resulting from the change in gate bias 
increases the geminate recombination process which also greatly increases the
rate of hole de-trapping in the oxide, such that it now becomes even greater
than the hole trapping rate.  It can be seen from this example that rather than
increasing the trapped hole concentration with radiation dose, now all the
additional energy released from the increased rate of gemnate recombination,
now decreases the trapped hole concentration with radiation dose.  It should be
emphasized here that the
{bold} hole de-trapping is NOT a result of hole recombination with electrons,
{bold} but is a direct result of trapped holes absorbing energy quanta from the
{bold} geminate recombination process.

Finaly, after the second irradiation with low electric field on the gate, the 
threshold voltage is simulated again, and shows a recovery from the shift
observed after the first irtradiation with a high gate oxide field.

To simulate total dose effects in insulators, the oxides are converted to large
bandgap semiconductors with the
{bold} material material=oxide semiconductor
statement.  Then the concentrations and characteristics of the bulk oxide and
interface traps are defined in accordance with the referenced paper above, 
using the
{bold} oxidecharging
and
{bold} intoxidecharging
statements respectively.  Finally the characteristics of the radiation are 
defined using the
{bold} radiation doserate=1 XRay
statement.  Then on any transient solve statement the parameter "radiation" is
specified to invoke the time dependent irradiation process.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} radex08.in : Multiple SEU Strikes in a 6 Transistor 22nm SRAM

Requires: VictoryProcess/VictoryDevice/SEE
{newline}
Minimum Versions: Victory Process 7.14.3.R, Victory Device 1.10.3.R

This examples demonstrates Multiple Strike SEU Simulation in a 6 Transistor
22nm SRAM Cell.

VictoryProcess in Cell Mode is used to create the 6 transistor SRAM cell
structure.  The 4 layers of metal interconnect are left off in this example in
an effort to speed up the device simulation.  A mixture of mask features and
traditional "line" statements are used to create the structure mesh.  Monte-
Carlo implant is used extensively in the process flow, so the process
simulation run time can be greatly reduced by taking advantage of the mult-
threaded option on the "go victoryprocess" line.

In the device simulation, a large number of "contact" statements are required
to connect the various parts of the circuit, that would have been connected by
the 4 layers of interconnect, that were omitted from the original design, in
the interests of device simulation speed.  Also of note is the
{bold} "seu.integrate"
parameter in the method statement that ensures correct total charge integration
in the SEU charge track, reducing still further the required mesh count in the
vicinity of the strike locations.

The device simulation hits the nMOS devices in the main Flip-Flop of the SRAM
with SEU strikes, staggered in time to allow for circuit recovery before the
next strike.  Striking each nMOS device in turn ensures that at least one of
the strikes will occur to an nMOS device in an "off state" ensuring that the
SRAM will change state at least once as a result of the strikes.

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.

{subsection} radex09.in : Single Event Burnout (SEB) in a High Voltage PiN Diode

Requires: VictoryDevice/SEE
{newline}
Minimum Versions: Victory Device 1.10.3.R

This examples demonstrates Single Event Burnout (SEB) in a High Voltage PiN Diode

The structure of the 3D PiN diode is simple enough to be emulated directly in 
the device simulator without the need to resort to a full process simulator.
Further simplification is afforded by the 
{bold} circular symmetry 
of the diode allowing the diode to be simulated in two dimensions with 
cylindrical corrections to correctly predict 3D device characteristics.  For 
the simulation of single events, only a central and vertical strike is a valid
candidate for correctly simulating 3D effects using this 2 dimensional circular
symetry method.  This method is invoked using the
{bold} cylindrical
parameter, on the mesh statement

There are two important requirements for simulating Single Event Burnout (SEB).
Firstly, the device IV characteristics must display a 
{bold} "snapback"
characteristic, where, for at least a range of voltages, there exists two 
possible corresponding stable current conditions, one a low current "off" state
and a second high current "on" state.  At high voltages, the "on" state 
dissipates sufficient power to over heat the device.
 
Secondly, self heating plays a leading role in greatly reducing the current 
density in a PiN diode at which the snapback IV characteristic occurs, allowing
a significantly lower 
{bold} Linear Energy Transfer (LET)
strike to transfer the diode from an "off" state, to a stable "on" state, where
continuous heating eventually burns the device to destruction, hence the name
of the phenomenon, "Single Event Burnout". 

This example, first biases the PiN diode close to it's breakdown voltage of 
{bold} 3,500 volts.
Then a
{bold} LOOP, L.END
statement is used to start the simulation with a strike of 4 MeV-cm2/mg LET.
The LOOP then doubles the LET strike value until the current pulse from the 
strike is sufficient to transfer the IV characteristics to a stable "on" state,
whereupon the device burns out in short order afterwards.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} radex10.in : Inter Device Leakage from Total Dose XRay Photonic Exposure

Requires: VictoryProcess/VictoryDevice/REM
{newline}
Minimum Versions: Victory Process 7.14.3.R, Victory Device 1.10.2.R

This examples demonstrates Inter Device Leakage from XRay Total Dose Exposure

For older technologies, one of the main effects of 
{bold} Total Dose Irradiation
was the accumulation of positive charge in the gate oxide, resulting in 
threshold voltage shifts that either reduced current drive or increased off 
state leakage, depending on whether the device was a p- or n-MOS device
respectively.  For more agressive technologies, the gate oxides are so thin,
that the major effect of Total Dose Irradiation is the trapping of positive 
charge in the trench isolation oxides, creating a parasitic current leakage 
path between trench isolated devices.  The leakage path could be between the
Source/Drain contacts of two seperate nMOS devices, or could be between the 
Source/Drain contact of an nMOS device and the n-Well isolation of a p-MOS 
device.  In this example, we demonstrate the creation of a current leakage path
between two nMOS devices.  Leakage betwen an nMOS and pMOS n-Well is 
essentially the same phenomenon.

VictoryProcess is used to create the two nMOS devices, seperated and 
electrically isolated by a trench and p-well with associated trench implants.

There are several basic input file set up requirements for simulating total 
dose effects in VictoryDevice:
{newline}
{bullet} the effected insulators must be simulated as wide bandgap semiconductors
{newline}
{bullet} any doping in the insulator therefore needs to be removed
{newline}
{bullet} insulator trap densities, characteristics and locations need to be defined
{newline}
{bullet} the radiation source and dose rate needs to be defined 
{newline}
{bullet} the parameter "radiation" needs to be invoked on the solve statement

To convert an insulator to a wide bandgap semiconductor, the material statement
is used.  For example:
{newline}
{bold} material material=oxide semiconductor
{newline}

To remove any existing doping from the insulator, which would cause erroneous 
conduction, the "doping replace" syntax is used.  For example:
{newline}
{bold} doping material=oxide replace uniform net concentration=-1
{newline}

Two types of insulator traps can be defined, bulk insulator traps, using the
{bold} oxidecharging
statement and interface insulator traps, using the
{bold} intoxidecharging
statement in a direct analagy to defect and intdefect statements.  Two model
implementations are also available, the 
{bold} "Jmodel" 
and the 
{bold} "Vmodel".
The user is directed to the manual to gain a full understanding of the meaning
of all the parameters in these statements and the model implementation, as a
full description is too lengthy for this brief example description.

The radiation source and dose rate are defined in the radiation statement.  
Here a 10keV XRay source and a dose rate of 1 Rad per second is defined, using
the radiation statement:
{bold} radiation doserate=1 XRay

The convenience of defining a dose rate of 1 Rad per second is that the total 
dose will be the same as the elapsed transient time in the solve statement, if
the parameter "radiation" was invoked in the transient from the start.

The simulation shows how the leakage between the two trench isolated nMOS
devices, increases after a total dose of 3 MRads.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} radex11.in : Single Event gate Rupture (SEGR) in a Power MOSFET

Requires: VictoryProcess/Devedit/VictoryDevice/SEE
{newline}
Minimum Versions: Victory Process 7.14.3.R, Devedit 2.8.26.R, Victory Device 1.10.3.R

This examples demonstrates Single Event gate Rupture (SEGR) in a Power MOSFET

The structure of the 3D Power MOSFET in this example is conveniently 
cylindrically symmetric allowing the 3D structure to be simulated accurately
using only two dimensions with cylindrical co-ordinates.  For the simulation of
single events, only a central and vertical strike is a valid candidate for 
correctly simulating 3D effects using this 2 dimensional circular symetry 
method.  This method is invoked using the
{bold} cylindrical
parameter, on the mesh statement.

After the 2 dimensional VictoryProcess simulation of the power MOSFET, the 
structure was exported to
{bold} Devedit 
to create a mesh suitable for device simulation.

In the device simulator, the power MOSFET is biased to a condition where the
drain voltage is approximately twice the gate voltage, which is known to 
make such a device more susceptible to gate rupture after a single event.

A single event, with an LET value of 37.2 MeV-cm2/mg corresponding to a bromine
ion, was allowed to strike the power MOSFET and the evolution of the gate oxide
electric field was monitored using the
{bold} probe
statement.  It is observed that the gate oxide electric field suffered a 3 fold
increase, just after the strike, taking it close to the bulk dielectric 
breakdown field strength and therefore vulnerable to an irreversible di-
electric breakdown event.  The gate oxide Fowler Nordheim current was also
monitored and exceeded one tenth of a nano Amp.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} radex12.in : Proton Irradiation Damage in a CMOS Image Sensor

Requires: VictoryProcess/VictoryDevice/REM
{newline}
Minimum Versions: Victory Process 7.14.3.R, Victory Device 1.10.2.R

This examples demonstrates Proton Irradiation Damage in a CMOS Image Sensor

This example uses VictoryProcess Cell mode to create a CMOS image sensor (CIS) 
complete with two pass transistors.  The image sensor was then irradiated with
a damaging fluence of protons in several stages, and the damage effects on the
performance of the image sensor were monitored.

In order to speed up the process simulation, initially 1D Monte-Carlo implant
simulations were stored as data files and imported into VictoryProcess Cell 
mode using the
{bold} Profile
statement.  Other implants used the 3D Monte-Carlo BCA simulator in the normal
way.

During Device simulations, the level of electron depletion in the active
section of the image sensor was monitored using the
{bold} Probe n.conc
statement.  Electrostatic potentials were also monitored using this method.

The image sensor was pulsed into deep electron depletion, and then monitored
with time, to see how long it took for thermal generation to re-fill the active
region of the image sensor.   The longer the time for thermal generation to 
refill the depleted active region, the more versitile the image sensor will be.

Once a baseline time was established for the un-damaged image sensor, the 
sensor was subject to proton fluxes of 1e10, 1e11 and 1e12 proton/cm2 and the
dark recovery time was re-tested to observe the effects of the proton induced
damage.  In this example, rather than use LOOP statements, the internal
{bold} Design of Experiments (DoE)
feature of deckbuild was used, using the
{bold} sweep
parameter to define the levels of proton irradiation per cm2.  It was found
that the damage was slight but noticable for a flux of 1e10 protons/cm2 but the
final proton flux of 1e12/cm2 was sufficient to render the image sensor non
operational.  When viewing the electrical results, it must be bourne in mind
that the proton damage also damages the pass transistors, which effects the
whole operation of the sensor.

The proton flux is set up using the
{bold} radiation proton energy=1.8 fluence=<p/cm2>
statement, with the total fluence being the variable in the Design of 
Experiments.  The damage rate and non ionizing energy loss are set on the
{bold} material dam.proton=1e3 dam.niel=3.1
statement.  The capture cross sections for the proton damage created defects is
set using the
{bold} defects fluence.model
statement.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} radex13.in : High Dose Rate Radiation Detector Circuit

Requires: VictoryProcess/VictoryDevice/MixedMode/REM
{newline}
Minimum Versions: Victory Process 7.14.3.R, Victory Device 1.10.2.R

This examples demonstrates High Dose Rate Effects and uses MixedMode to 
Demonstrate Operation of a Radiation Detector Circuit.  The active device used
as the radiation detector is a PiN diode incorporating a field reducing edge 
termination contact which is created in VictoryProcess in 2D mode.  The PiN 
diode exhibits
{bold} circular symmetry, 
so full 3D effects can be simulated using a 2D structure with cylindrical 
symmetry corrections.

Once the PiN diode was created, the structure is loaded into the device 
simulator, and  SPICE circuit is included using
{bold} MIXEDMODE
syntax.  Two greatly differing prompt dose rates of 1e8 and 1e12 Rads/second
were simulated to test the versitility of the radiation detector circuit.  The
timing of the radiation bursts is determined by the
{bold} .RAD
statement in the MixedMode SPICE like syntax.

It is found that the radiation detector circuit gives a consistent detection 
output pulse for these two widely differing does rates and therefore total 
doses, validating the circuit design.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} radex14.in : TCAD to SPICE - 6T SRAM SEU Simulation

Requires: Deckbuild / VictoryProcess2D / DevEdit 3D / VictoryDevice3D / SmartSpice
{newline}
Minimum Versions: Deckbuild 4.4.1.R / Victory Process 7.14.3.R / 
Devedit 2.8.26.R / Victory Device 1.10.3.R / SmartSpice 4.28.0.R

This examples demonstrates how the response of a single transistor to a Single
Event Strike, can first be simulated and calibrated using physics based TCAD 
simulation, and then how this exact response can be extracted into a data file
and incorporated directly into user specified circuit nodes of a Spice circuit 
simulation, for fast Spice analysis of a circuit to Single Event Upsets.

The example demonstrates how this entire TCAD to SPICE flow can be simulated
with just a single input file, executed in it's entirety in the deckbuild run 
time environment, without any intermediate input required from the user.

The example simulates the response of a single 65nm n-channel MOSFET to a 
Single Event Strike using physically based TCAD simulation.  The terminal
response from this TCAD simulation, is then captured in a data file.  This 
MOSFET response to the Single Event Strike can then be passed to a 100% 
SmartSPICE simulation to evaluate the whole circuit response to a strike.
Since the simulation is now 100% Spice, the total circuit simulation time of a
Single Event Strike is just a few seconds for a logic cell sized circuit.  This
allows many simulations of multiple Single Events, occurring in any transistor
in any circuit, occurring at any time, once the response to a particular strike
has been calibrated using physics based TCAD.

The 65nm SRAM is simulated in it's low power state, where the supply voltage is
reduced to 0.85 volts, as this represents the SRAM's most sensitive 
configuration to a Single Event Effect. 

The data flow in this particular example occurs in the following sequence:

{bullet} Start with a trusted Spice model from the foundry PDK that you are 
               currently using.
{newline}
{bullet} Using this PDK Spice model, simulate basic DC characteristics of the
               device type that is to be tested using a Single Event Strike, 
               such as unsaturated and saturated threshold voltage, IdVd curve
               sets etc.
{newline}
{bullet} Create a TCAD model of the device to be tested, and use the Spice 
               generated DC characteristics above, to ensure that the TCAD 
               simulations are a reasonable match to the Spice generated curves.
{newline}
{bullet} In TCAD, then simulate one or more strike events and capture the 
               device response by extracting a data file of time/current pairs.
{newline}
{bullet} The time/current pairs data file captured above, is then loaded into a
               pure Spice simulation as a time dependent current source at the
               circuit node under test, so the response of the whole circuit to 
               a Single Event Strike can now be simulated directly in Spice. 
               Multiple strikes at different times on different devices in the
               circuit can also be simulated using the same data file.
{newline}

With the data flow above in mind, the input file below goes through the
following simulation steps:

First, a two dimensional, 65nm nMOS device is simulated in VictoryProcess,
which enables a faster simulation than creating a full 3D structure.  The 2D 
structure is then extended into the third dimension using Devedit.  The 3D 
structure is now loaded into VictoryDevice, where several DC simulations, 
characterise the basic device electrical behaviour, which can then be compared
with the Spice model, to validate that similar behaviour has been obtained.

The energy of the Single Event Strike is characterized by a parameter called 
the 
{bold} "Linear Energy Transfer",
 or 
{bold} LET.  
The higher the LET, the greater the energy of the incoming particle or photon.
In this example, the LET value of the incoming strike is set up as a variable, 
by the line 
{bold} "set LET=1",
which creates a variable called 
{bold} "$LET"
and assigns it a unity value.  In order to convert the units of LET into units 
of pico Coulombs/um of track charge density, the 
{bold} LET value needs to be multiplied by 0.01035 for silicon material.
A second variable called 
{bold} "$density" 
is assigned this converted pico coulomb value.  Lastly, the units of the strike
are specified to be these same pico coulomb units, by the parameter 
{bold} "pcunits" 
in the 
{bold} "singleeventupset" 
statement that describes the time and track positional properties of the strike.

Once the Single Event Strike has been simulated, the time versus current data
is extracted using an extract statement, into a file called 
{bold} radex14.dat.  
An important part of this extract statement is the 
{bold} new "no.header" option, 
which strips off the normal header associated with a standard Silvaco data 
file format, which is a requirement for the data file to be read directly by 
SmartSpice.

Simulation of a 6 transistor SRAM cell, with a Single Event Strike on one of 
the nMOS transistors, can now be simulated directly in SmartSpice using the
newly creted data file.  The strike can also be associated with a time delay
before the strike occurs.  This delay is implemented in the 
{bold} "VSEU" 
line of the SmartSpice section of the input file, and is specified using the 
{bold} "TD" 
parameter.  In this simulation, the delay before the Single Event Strike is set
to be 0.5 micro-seconds by setting the parameter 
{bold} "TD=0.5u" 
on the 
{bold} "VSEU" 
statement.  

The huge advantage of importing the TCAD generated data file of the Single
Event Strike, directly into Spice, is that each Spice simulation, now only 
takes a couple of seconds, so many strikes at different times and for different
transistors, allows fast characterization of a circuit sensitivity to SEU upset
events.

 To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} radex15.in : 6T SRAM SEU Simulation using MixedMode3D

Requires: VictoryProcess2D / DevEdit 3D / VictoryDevice3D / MixedMode3D
{newline}
Minimum Versions: Victory Process 7.14.3.R / Devedit 2.8.26.R / 
Victory Device 1.10.2.R

This example is a variant of radex14, where instead of using pure Spice to 
simulate an SEU strike on a 65nm SRAM cell, the SEU simulation section uses 
MixedMode3D instead.

The Mixedmode3D simulation uses the same 65nm nMOS TACD structure that was
calibrated against a PDK Spice model in radex14, and wraps the rest of the SRAM
circuit around this TCAD structure using Mixedmode3D's Spice syntax.
The TCAD structure is struck with a 1 LET single event when it is in it's low 
power configuration with an applied supply voltage of 0.85 volts, which 
represents the state of highest sensitivity to being upset by a single event.

The data flow in this particular example occurs in the following sequence:

{bullet} The calibrated 65nm nMOS TCAD structure is the same one used in 
                the previous radex14 example
{newline}
{bullet} The 65nm nMOS TCAD only structure is biased into it's high sensitivity,
                low power off state, with Vd=0.85 Volts and Vs,Vg=0 Volts.  
                This TCAD only structure, in this biased state, is then saved.
{newline}
{bullet} A new device simulation, this time in MixedMode3D, which contains the
                rest of the SRAM circuit, is then specified, and the previously
                saved biased TCAD structure is loaded, and it's biased condition
                initializes the circuit state.  The line which loads the TCAD 
                structure intial state is:
{bold} .OPTIONS loadsolutions
{newline}
{bullet} After the MixedMode3D simulation is complete, the solutions are 
                plotted at the end.
{newline}

The energy of the Single Event Strike is characterized by a parameter called 
the 
{bold} "Linear Energy Transfer",
 or 
{bold} LET.  
The higher the LET, the greater the energy of the incoming particle or photon.
In this example, the LET value of the incoming strike is set up as a variable, 
by the line 
{bold} "set LET=1",
which creates a variable called 
{bold} "$LET"
and assigns it a unity value.  In order to convert the units of LET into units 
of pico Coulombs/um of track charge density, the 
{bold} LET value needs to be multiplied by 0.01035 for silicon material.
A second variable called 
{bold} "$density" 
is assigned this converted pico coulomb value.  Lastly, the units of the strike
are specified to be these same pico coulomb units, by the parameter 
{bold} "pcunits" 
in the 
{bold} "singleeventupset" 
statement that describes the time and track positional properties of the strike.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} radex16.in : 6T SRAM SEU Simulation using SPICE only

Requires: SmartSpice
{newline}
Minimum Versions: SmartSpice 4.19.27.C

This example is a variant of radex14, where instead simulating the drain
current response from an SEU strike using TCAD, and then importing this SEU data
into a SmartSpice simulation, here we use an internal SmartSpice algorithm to
calculate the total track charge created by the strike which is then converted
into current time pairs internally at a specified device node and time.

The obvious advantage of using Spice to calculate the SEU track charge versus
time, instead of using TCAD, is simulation speed.  The downside is that the
calculation is a worst case calculation, since it is assumed that all of the
generated charge is actually collected by the device node, which is not usually
the case.  In reality, the actual fraction of charge collected depends on
strike angle and strike location and whether any carrier multiplication occurs
from high electric fields and internal gain etc.

The SEU event is struck at the same nMOS drain node, in the same SRAM circuit
as in radex14 example, and with the same Linear Energy Transfer value of unity,
which is now set in the
{bold} .PARAM DLET=1
statement.  The total charge in the charge track is calculated by integrating
over the SEU track length, which is set by the
{bold} .PARAM F_LENGTH=0.5u
statement.  Other timing parameters are also set on .PARAM statement lines.

For simulation method comparisons, the SRAM operation point is set to it's low
power configuration with an applied supply voltage of 0.85 volts, which
represents the state of highest sensitivity to being upset by a single event.

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.


{subsection} radex17.in : Single Event Latchup of a 3D 65nm CMOS Inverter

Requires: Victory Process Cell Mode / Victory Device
{newline}
Minimum Versions: Victory Process 7.14.3.R / Victory Device 1.10.3.R

A common issue for any CMOS circuit is the existance of a parasitic thyristor
resulting from the NPNP structure that exists between any complementary pair
source/drain contacts.  The four regions creating the NPNP thyristor, are the 
N-channel drain, N-channel Well, P-channed well, and P-channel drain 
respectively.  

In order for the parasitic thyristor to trigger, the NPN and PNP transistors,
making up the parasitic thyristor, must have a multiplied bipolar gain of at
least unity at the operating condition of the circuit.  Negating the triggering
of this parasitic thyristor is simply a matter of ensuring that this condition 
almost never happens.  There are two main ways to do this:

{indent}(i) Reduce the bipolar gain of the parasitic bipolars by heavily doping the
         respective base regions (the N and Pwell regions)  This is most often
        done by doping the bottom of the trench.  Careful consideration of 
        where this doping is placed is required so as to not increase any 
        parasitic capacitance significantly, which would slow the circuit 
        response time.
{newline}

{indent}(ii) use body tie contacts to connect the N-channel well to ground and the
        p-channel well to supply.  What this does is to short the two bipolar 
        base regions to their respective emitters, such that the parasitic 
        bipolar transistors can never reach a conducting state.  However, these
        body ties take up valuable circuit area, and so are used as sparsely as
        is practical.  If these body ties are too far apart, the voltage drop 
        can become sufficient for thyristor action to start.

In this example, body ties and implanting the base of the trench,  are 
deliberatly omitted, making this CMOS inverter particularly vulnerable to
thyristor action.  So much so that and SEU with an LET of unity, is sufficient
to trigger the CMOS inverter into a permanant conducting state, that can
be reset, as with any thyristor, by temporary removal of the supply voltage.

This example can be used as a starting point to investigate how the placement
of body ties and trench implantation techniques, will greatly increase the LET
value of an SEU strike that is required to make the circuit latch up.  The 
higher the LET value required to make the circuit latch up, translates 
directly, with an inverse relationship, into how often this will happen for any
given level of background cosmic or local radiation.

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.

{section} Noise : Noise Application Examples



{subsection} noiseex01.in : Noise from a resistor


Requires: S-Pisces/Noise
{newline}
Minimum Versions: Atlas 5.24.1.R


This example shows a Noise
simulation in Atlas.

A 10k n-type silicon resistor is modeled, and a DC_IV sweep is performed
to confirm the resistance.

The noise generated by a device is modeled by taking an ideal
(noiseless) device and adding a random voltage source to each port.
For a one port device we have a single noise voltage source.  The
noise behavior is described by the statistical nature of these
voltage sources.  The mean value of the voltage from the source is
zero and so the noise is described by the autocorrelation of the
voltage source <v^2>.

Noise is an extension of the usual ac analysis of a device: a noise
simulation can be performed on any device on which ac analysis can be
performed.  On the
{bold} log 
command we have to define which contact is the principle for the
{bold} inport 
and we have to add the keyword
{bold} noise.v 
to tell Atlas to calculate the statistical properties of the noise
voltage sources.

On the
{bold} solve 
command we use the
{bold} noise.ss 
keyword to tell Atlas to calculate the noise over the defined
frequency range.  N.b. the
{bold} direct 
method must be used when calculating the noise.

The Nyquist theorem gives the expected noise generated by a resistor
as <v^2>=4kTR, where k is Boltzmann's constant, T is the temperature
of the resistor, and R is the resistance.  For a 10k resistor at 300K
this gives <v^2>=1.657e-16 V^2/Hz which agrees well with the result of
the simulation.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} noiseex02.in : Noise from a pn diode


Requires: S-Pisces/Noise
{newline}
Minimum Versions: Atlas 5.24.1.R


This example shows that the noise generated by a device comes from
several sources.

A pn silicon diode is modeled, and a DC-IV sweep is performed to confirm
the nature of the diode.

The procedure for calculating the noise is almost the same as in the
first example.  However, this time we use the keyword
{bold} noise.v.all 
on the
{bold} log
command.  This tells Atlas to output the individual noise from
different sources as well as the total noise.

The final plot shows the total noise is the sum of the noise from
three sources: electron diffusion, hole diffusion, and
generation-recombination.

The noise from electron diffusion and hole diffusion is always
calculated.  If any generation-recombination models are defined (
{bold} srh, optr, auger
) then GR noise is automatically calculated.

In addition to these noise sources there are two additional sources:
electron and hole flicker (1/f) noise.  The exact physical origin of
flicker noise is not fully known, so Atlas uses the phenomenological
Hooge model.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} noiseex03.in : Noise from a MOSFET


Requires: S-Pisces/Noise
{newline}
Minimum Versions: Atlas 5.24.1.R


This example investigates the noise generated by a two-port device.

A silicon MOSFET is modeled and a DC-IV sweep is performed to get to
an operating bias point.

The noise generated by the two-port is modeled as a voltage source on
each port of the device: v1 and v2.  The mean of each source is zero
and the noise is described by the second order statistical properties
of the voltage sources: < v1.v1* >, < v2.v2* > and < v1.v2* >.  The
auto-correlations are real numbers but the cross-correlation is
complex.  So four real numbers are required to describe the noise
behavior of a two-port device.

For a two-port the noise is also described by a set of Figures of
Merit: the minimum noise figure, the optimum source impedance and the
noise conductance.  The noise figure is a measure of the extra noise
that the device adds to the signal reaching the load, it is defined as

{newline}
{bullet} F = Psd / Ps.
{newline}

Psd is the noise power delivered to the load by the noisy source and
the noisy device.  Ps is the noise power that would be delivered to
the load if the source were noisy but the device was ideal.  The
optimum source impedance is the impedance which gives the minimum
noise figure.  The noise conductance is a measure of how the noise
figure increases as the source impedance moves away from the optimum.

For a two-port device we need to set the
{bold} inport 
and the
{bold} outport 
on the
{bold} log 
command.  Again the
{bold} noise.v 
command is used to tell Atlas to calculate the noise.

Because noise is an extension of the normal ac analysis the
{bold} noise.ss xs 
command on the solve statement will automatically calculate any ac
parameters defined  on the
{bold} log 
statement (such as the
{bold} z.param 
in this example).

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} noiseex04.in : Noise from a BJT


Requires: S-Pisces/Noise
{newline}
Minimum Versions: Atlas 5.24.1.R


This example looks at the internal procedures which are used to
calculate the noise.

A silicon BJT modeled and a DC operating point is set.

We use the
{bold} noise.all 
keyword on the
{bold} output 
command to tell Atlas to save the noise parameters to the structure
file.

The Impedance Field is a simple Green's function.  The Impedance Field
(IF) at some point is the voltage which would appear on an open
circuit contact if a unity current were injected at that point.  For a
two port device there are four Impedance Fields: the port one IF for
electron current, the port one IF for hole current, the port two IF
for electron current, and the port two IF for hole current.

The Microscopic Noise Source (MNS) is the amount of noise generated by
the volume of the device surrounding a node.  There is an MNS for each
type of noise.

The Local Noise Source (LNS) is the amount of noise generated on a
contact by the volume of the device surrounding a node.  It is
calculated by using an IF to translate the MNS into a contact voltage.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} noiseex05.in : Noise from a MESFET


Requires: Blaze/C-Interpreter/Noise
{newline}
Minimum Versions: Atlas 5.24.1.R


This example demonstrates that the user can define their own
microscopic noise sources with a C-INTERPRETER function.

A GaAs MESFET is modeled and a DC-IV sweep is performed to get to an
operating bias point.

The default models for the electron and hole diffusion noise are
replaced by user defined models.  The
{bold} f.mnsndiff 
and
{bold} f.mnspdiff 
keywords on the
{bold} material 
statement tell Atlas to use the C-INTERPRETER functions in the given
file.  (These C_INTERPRETER functions don't do anything interesting
because they exactly mimic the default Atlas models.)

N.b. the
{bold} trap 
statements add a couple of deep level traps which behave as GR
centers.  The GR noise from these traps is automatically calculated.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{section} THERMAL : Thermal Distribution Application Examples



{subsection} thermalex01.in : Simple Two Transistor Simulation

Requires: DevEdit 3D/Thermal 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example runs thermal simulation of a 2 transistors. The main sequential tasks are:

{bullet} Specification of two neighboring transistor regions in DevEdit 3D
{newline}
{bullet} Specification of heat sinks in in DevEdit 3D
{newline}
{bullet} Interface to Atlas
{newline}
{bullet} Selection of thermal models and material parameters
{newline}
{bullet} Solution of temperature distribution

The structure in this example is defined using DevEdit 3D. The structure was 
initially defined using the graphical mode of DevEdit 3D. After the mesh was 
created, a command file was saved from DevEdit 3D enabling the structure to 
be re-created in DeckBuild.

The structure used here consists of two neighboring transistors
embedded in a substrate material. For thermal modeling, the transistors
are considered only as heat sources. No internal details of the
transistors are considered. An Aluminum region is defined as an 
{bold} electrode
on the bottom of the substrate material. This will act in
Atlas as a thermal rather than an electrical boundary condition.

The
{bold} go atlas 
statement automatically interfaces DevEdit 3D to Atlas. On reading the
three dimensional mesh file, Atlas will automatically enter 3D mode.

The material statement is used to define the thermal conductivities of each region using the 
{bold} tc.const 
parameter. This parameter sets a constant value for thermal
conductivity. Later examples show regions with temperature dependent
thermal conductivities. The
{bold} power 
parameter sets the thermal output of the region. This naturally defines these regions at heat sources. 

The command
{bold} models thermal 
is all that is required to enable the 3D thermal calculations. The final stage sets
{bold} solve t1=300
. This defines the temperature of the heat sink (or electrode) number 1. The final 3D thermal distribution is saved to the file specified by the 
{bold} outfile
parameter. This can be viewed in TonyPlot 3D.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} thermalex02.in : Eight Power Source Structure

Requires: DevEdit 3D/Thermal 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example runs a thermal simulation of a 2 layer structure with 8 power 
sources. The main sequential tasks are:

{bullet} Specification of all ten regions in DevEdit 3D
{newline}
{bullet} Specification of heat sink in in DevEdit 3D
{newline}
{bullet} Interface to Atlas
{newline}
{bullet} Selection of thermal models and material parameters
{newline}
{bullet} Solving of temperature distribution

This example is similar to the device described in 
{bold} Thermal Simulation and Design of a GaAs HBT Sample and Hold Circuit 
by Ken Poulton et al. The device technology is from the paper by R.
Nubling in Technical Digest of 1990 GaAs IC Symposium pp53-56.

The structure in this example is defined using DevEdit 3D in a similar
manner to the previous example. Initially the structure was defined
using the graphical mode of DevEdit 3D. After the mesh was created, a
command file was saved from DevEdit 3D enabling the structure to be
re-created in DeckBuild.

Once in Atlas, the 
{bold} models thermal 
statement is used to indicate that this is a heat distribution simulation. 
The
{bold} material 
statement is used to set the heat power output of each of the eight
heat producing regions in this structure. Region #10 is defined to have
a constant thermal conductivity of 1.0. The
{bold} solve t1=300 
statement sets the thermal boundary condition on the electrode to be
300K and then solves the heat flow equation self-consistently in the
structure. The resulting 3D heat distribution can be shown in
TonyPlot 3D.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} thermalex03.in : Layers with Temperature Dependent Conductivity

Requires: DevEdit 3D/Thermal 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example runs thermal simulation of a 2 layer structure with 8 power 
sources where the thermal conductivity of region #1 (the first layer)
and region #10 (the second layer) is a function of temperature.

The structure and syntax used in this example is exactly the same as that used in the previous example with the following exception. The thermal conductivity of region #1 is defined to be dependent on temperature by the statement
{bold} tcon.polynom
. This sets a polynomial dependence of thermal conductivity as described in the manual. 

In region #10, the thermal conductivity is set according to a simpler power law. The parameter
{bold} tcon.power
is used to indicate this. Parameters of the power law are set using the
{bold} tc.c0 
and
{bold} tc.npow
. Details of the equations used can be found in the models description of Thermal 3D.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} thermalex04.in : GaAs IC Structure

Requires: DevEdit 3D/Thermal 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example runs thermal simulation of a  GaAs IC structure with three
heat producing devices.

The device consists of three GaAs regions defined as heat sources in a
GaAs substrate. A single thermal contact is applied to the bottom of
the substrate region. The structure is prepared using DevEdit 3D in a
similar manner to the previous examples in this section.

In Atlas, the 
{bold} material 
statement is used to define the power output of two of the three GaAs
regions. The substrate is defined as having a temperature dependent
thermal conductivity according to the
{bold} tcon.power 
parameter.

This example is designed to show the effect of the heating produced by
neighboring devices on a non-heat producing transistor. The third GaAs
region (defined as region #4) has no heat power output. However the
solution file will show that the device is heated by conduction from
the neighboring devices.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} thermalex05.in : Simple Simulation with Temperature Stepping

Requires: DevEdit 3D/Thermal 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example runs thermal simulation of a 2 transistors. The main sequential tasks are:

{bullet} Specification of two neighboring transistor regions in DevEdit 3D
{newline}
{bullet} Specification of heat sinks in in DevEdit 3D
{newline}
{bullet} Interface to Atlas
{newline}
{bullet} Selection of thermal models and material parameters
{newline}
{bullet} Specification of temperature stepping parameters
{newline}
{bullet} Solution of temperature distribution

The structure in this example is defined using DevEdit 3D. Initially
the structure was defined using the graphical mode of DevEdit 3D. After
the mesh was created, a command file was saved from DevEdit 3D enabling the
structure to be re-created in DeckBuild.

The structure used here consists of two neighboring transistors
embedded in a substrate material. For thermal modeling the transistors
are considered only as heat sources. No internal details of the
transistors are considered. An Aluminum region is defined as an 
{bold} electrode
on the bottom of the substrate material. This will act in
Atlas as a thermal rather than an electrical boundary condition.

The
{bold} go atlas 
statement automatically interfaces DevEdit 3D to Atlas. On reading the
three dimensional mesh file, Atlas will automatically enter 3D mode.

The material statement is used to define the thermal conductivities of each region using the 
{bold} tc.const 
parameter. This parameter sets a constant value for thermal
conductivity. Later examples show regions with temperature dependent
thermal conductivities. The
{bold} power 
parameter sets the thermal output of the region. This naturally defines these regions at heat sources. 

The command
{bold} models thermal 
is all that is required to enable the 3D thermal calculations. The final stage sets
{bold} solve t1=300
. This defines the temperature of the heat sink (or electrode) number 1. 
In this example the temperature on electrode 1 is stepped by adding the 
{bold} TEMPSTEP NSTEPS 
and
{bold} electrode 
parameters.  
{bold} TEMPSTEP 
determines the size of the temperature step and the
{bold} NSTEPS 
gives the number of temperature steps to be performed.  The 
{bold} electrode 
parameter identifies which electrode to step as more than one electrode temperature can be defined on the 
{bold} solve 
statement.  The 3D thermal distributions are saved to the file specified by the 
{bold} outfile 
parameter. The output file name rightmost characters will be incremented alphanumerically so a different file will be saved for each step.  
These can be viewed in TonyPlot 3D.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} thermalex06.in : Simple Simulation with Power Stepping

Requires: DevEdit 3D/Thermal 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example runs thermal simulation of a 2 transistors. The main sequential tasks are:

{bullet} Specification of two neighboring transistor regions in DevEdit 3D
{newline}
{bullet} Specification of heat sinks in in DevEdit 3D
{newline}
{bullet} Interface to Atlas
{newline}
{bullet} Selection of thermal models and material parameters
{newline}
{bullet} Specification of the power stepping parameters
{newline}
{bullet} Solution of temperature distribution at different thermal powers

The structure in this example is defined using DevEdit 3D. Initially
the structure was defined using the graphical mode of DevEdit 3D. After
the mesh was created, a command file was saved from DevEdit 3D enabling the
structure to be re-created in DeckBuild.

The structure used here consists of two neighboring transistors
embedded in a substrate material. For thermal modeling the transistors
are considered only as heat sources. No internal details of the
transistors are considered. An Aluminum region is defined as an 
{bold} electrode 
on the bottom of the substrate material. This will act in
Atlas as a thermal rather than an electrical boundary condition.

The
{bold} go atlas 
statement automatically interfaces DevEdit 3D to Atlas. On reading the
three dimensional mesh file, Atlas will automatically enter 3D mode.

The material statement is used to define the thermal conductivities of each region using the 
{bold} tc.const 
parameter. This parameter sets a constant value for thermal
conductivity. Later examples show regions with temperature dependent
thermal conductivities. The
{bold} power 
parameter sets the thermal output of the region. This naturally defines these regions at heat sources.  The region thermal power can also be defined in the 
{bold} solve 
statement for power stepping as shown below.

The command
{bold} models thermal 
is all that is required to enable the 3D thermal calculations. The final stage sets
{bold} solve t1=300
. This defines the temperature of the heat sink (or electrode) number 1. 
The region thermal power can be specified by adding the 
{bold} POWERx
parameter where 
{bold} x
is the region number.  This has the same effect as in the 
{bold} material
statement and will override the value if already set.  In this example the thermal power of region 2 is stepped by adding the
{bold} POWERSTEP NSTEPS 
and
{bold} STEPREGION 
parameters.  

{bold} POWER2 
defines the initial thermal power for region #2.  
{bold} POWERSTEP 
determines the size of the power step, 
{bold} NSTEPS 
sets the number of power steps to be performed and the
{bold} STEPREGION 
option determines which region to step as the thermal power of any region may be specified on the 
{bold} solve 
statement.

The final 3D thermal distribution is saved to the file specified by the 
{bold} outfile 
parameter. The output file name rightmost characters will be incremented alphanumerically so a different file will be saved for each step. These can be viewed in TonyPlot 3D.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} thermalex07.in : Simple Simulation with Temperature and Power Stepping

Requires: DevEdit 3D/Thermal 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

This example runs thermal simulation of a 2 transistors. The main sequential tasks are:

{bullet} Specification of two neighboring transistor regions in DevEdit 3D
{newline}
{bullet} Specification of heat sinks in in DevEdit 3D
{newline}
{bullet} Interface to Atlas
{newline}
{bullet} Selection of thermal models and material parameters
{newline}
{bullet} Specification of temperature and power stepping parameters
{newline}
{bullet} Solution of temperature distributions at different temperatures and thermal powers

The structure in this example is defined using DevEdit 3D. Initially
the structure was defined using the graphical mode of DevEdit 3D. After
the mesh was created, a command file was saved from DevEdit 3D enabling the
structure to be re-created in DeckBuild.

The structure used here consists of two neighboring transistors
embedded in a substrate material. For thermal modeling the transistors
are considered only as heat sources. No internal details of the
transistors are considered. An Aluminum region is defined as an 
{bold} electrode 
on the bottom of the substrate material. This will act in
Atlas as a thermal rather than an electrical boundary condition.

The
{bold} go atlas 
statement automatically interfaces DevEdit 3D to Atlas. On reading the
three dimensional mesh file, Atlas will automatically enter 3D mode.

The material statement is used to define the thermal conductivities of each region using the 
{bold} tc.const 
parameter. This parameter sets a constant value for thermal
conductivity. Later examples show regions with temperature dependent
thermal conductivities. The
{bold} power 
parameter sets the thermal output of the region. This naturally defines these regions at heat sources. 

The command
{bold} models thermal 
is all that is required to enable the 3D thermal calculations. The final stage sets
{bold} solve t1=300
. This defines the temperature of the heat sink (or electrode) number 1. 
In this example the temperature on electrode 1 and the power of region 2 are  stepped by adding the 
{bold} POWERSTEP TEMPSTEP NSTEPS STEPREGION
and
{bold} electrode 
parameters.  
{bold} POWERSTEP 
and
{bold} TEMPSTEP 
determine the size of the power and temperature steps and the
{bold} NSTEPS 
parameter gives the number of steps to be performed.  The 
{bold} STEPREGION 
and
{bold} electrode 
parameters identify which region and electrode to step, as more than one region thermal 
power and electrode temperature can be defined on the 
{bold} solve 
statement.  The final 3D thermal distribution is saved to the file specified by the 
{bold} outfile 
parameter. The output file name rightmost characters will be incremented alphanumerically, 
so a different file will be saved for each step.  These can be viewed in TonyPlot 3D.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} thermalex08.in : Infrared Heat Lamp Annealing in Vacuum with Radiative Cooling

Requires: Thermal3D
{newline}
Minimum Versions: Atlas 5.24.1.R

When a wafer is clamped only at it edges and is heated with an infra-red 
source in a vacuum, the majority of the heat loss occurs through 
{bold} black body radiation.
The vacuum prevents thermal conduction mechanisms for the majority of the 
wafer area.  It is also important to realize that if both sides of the wafer
are exposed to the vacuum without contact to a conductive heat sink, both the
front and back sides of the wafer will radiate heat and so black body heat 
radiation must be simulated from both surfaces for accurate results.
 
In Atlas, black body radiation is simulated with an additional logical 
parameter, 
{bold} "BLACKBODY"
added to the 
{bold} "THERMCONTACT"
statement.  This allows the user to set up multiple thermally radiative 
boundary conditions in their structure.

The power per unit area lost to black body radiation for an ideal radiator,
is known absolutely for any given temperature, K.  The power absorbed by 
that same body from it's surroundings, is also known absolutely from the 
temperature of those surroundings.  The nett power loss or gain, to or 
from, any body by infra-red radiation, is therefore simply the difference 
between the power lost to it's surrounds and the power absorbed from it's 
surroundings.

The formula in Atlas is given by:

{bold} { ALPHA (T - EXT.TEMP) }  +  { STEFAN ( T^4 - EXT.TEMP^4) }  W/cm^2
 
Where:-

{bold} "ALPHA"
is the coefficient to take account of thermal conductivity to
the wafer holder, and should be set to zero if all the heat loss is
through radiative processes only,

{bold} "T"
is the temperature of the surface calculated by Atlas,

{bold} "EXT.TEMP"
is the external temperature of the surroundings, 
usually 300K if the equipment in normal laboratory conditions,

{bold} "STEFAN"
is the black body radiation constant.

For reflective surfaces, the 
{bold} surface emissivity
correction can be taken account of by reducing the value of the 
{bold} "STEFAN" 
parameter from the ideal black body radiation value of 
5.67051x10^-12 W/cm2/K^4, which is the default value.  The area of the 
thermal contact is also calculated by Atlas by integration of the area 
of all mesh points in contact with the user defined thermal contact.

So in summary, for an ideal black body radiator, only the background 
temperature 
{bold} "EXT.TEMP" 
need be specified on the 
{bold} "THERMCONTACT" 
statement,the rest will be calculated by Atlas.  For reflective surfaces, 
with less than ideal radiation characteristics, the 
{bold} effective emissivity coefficient 
can be taken account of by using the appropriate value of the 
{bold} "STEFAN"
parameter.  Simply multiply the default value of "STEFAN" by the 
emissivity coefficient.  For pure radiative cooling, also set the thermal 
conductivity coefficient, 
{bold} "ALPHA" 
to zero.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{section} FERRO : Ferroelectric Application Examples 



{subsection} ferroex01.in : Material Parameter Effects in 1D MOS Capacitor 


Requires: S-Pisces/Ferro
{newline}
Minimum Versions: Atlas 5.24.1.R


This simulation demonstrates the effects of various ferroelectric
material settings on the CV characterisitics of a
Metal-Ferroelectric-Silicon Capacitor.

It demonstrates:

{bullet} Basic structure definition using Atlas syntax
{newline}
{bullet} Definition of PZT material parameters
{newline}
{bullet} Application of ferroelectric model
{newline}
{bullet} Using probe to analyse polarisation
{newline}
{bullet} Plotting output curves and structures.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} ferroex02.in : Threshold Shift in 2D FET 


Requires: S-Pisces/Ferro
{newline}
Minimum Versions: Atlas 5.24.1.R

This simulation demonstrates the threshold voltage shift due to
ferroelectric polarisation in the insulating gate dielectric of an
FET.

{bullet} Basic structure definition using Atlas syntax
{newline}
{bullet} Definition of PZT material parameters
{newline}
{bullet} Application of ferroelectric model
{newline}
{bullet} Using probe to analyse polarisation
{newline}
{bullet} Plotting output curves and structures.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{section} ORGANIC : Organic Device Application Examples



{subsection} organicex01.in : OLED: Device Characteristics of MEH-PPV Polymer LED 

Requires: Blaze/Organic Display
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the basic characteristics of an Organic Light Emitting Diode (OLED). It demonstrates:

{bullet} OLED structure definition using Atlas syntax
{newline}
{bullet} Material parameter specification
{newline}
{bullet} Choosing the OLED physical models
{newline}
{bullet} Current density versus anode voltage characteristics
{newline}
{bullet} Current density versus electric field characteristics
{newline}
{bullet} Luminescent power of the OLED
{newline}
{bullet} Langevin recombination plot at 10V
{newline}

The file starts with the
{bold} SET 
statement which defines the thickness variables for substitution into Atlas syntax. This is followed by defining the OLED structure such as the mesh, region, electrode location and doping. 
This is a three layer device consisting of the MEH-PPV polymer film sandwiched between an Indium-Tin-Oxide (ITO) coated glass substrate and a metal. The ITO is the anode while the cathode is made up of metal. 
In addition, the polymer film is p-type doped with a uniform concentration of 1e15 cm-3.

After the device description, the
{bold} MATERIAL 
statement is used to specify the material properties of the ITO and also the MEH-PPV material. In the first
{bold} MATERIAL 
statement, the
{bold} REAL.INDEX 
parameter is used to set the real refractive index (which is directly related to the absorption coefficient) of the ITO. In the second
{bold} MATERIAL 
statement,
{bold} AFFINITY
 specifies the polymer LUMO level and  
{bold} EG300 
specifies the bandgap of the polymer. This gives a HOMO level of 4.9eV (i.e. HOMO level = 
{bold} EG300 + AFFINITY
). 
{bold} RST.EXCITON 
specifies the exciton singlet to triplet ratio of the polymer. This parameter is a key factor in determining the ultimate limit of the OLED efficiency.
{bold} TAUS.EXCITON 
specifies the singlet exciton lifetime and
{bold} LDS.EXCITON 
specifies the singlet exciton diffusion length.

Other material parameters of the polymer such as bandgap, density of state (Nc and Nv), relative permittivity, lifetimes, Richardson constant 
and real refractive index are also specified in this statement.

After the 
{bold} MATERIAL 
statements, the 
{bold} MOBILITY 
statement is used to set the polymer mobility parameters for the Poole-Frenkel-like mobility model. Parameters such as the 
{bold} DELTAEN.PFMOB 
and
{bold} DELTAEP.PFMOB 
specify the thermal activation energy of the organic polymer at zero electric field for electrons and holes respectively, while 
{bold} BETAN.PFMOB 
and
{bold} BETAP.PFMOB 
specify the electron and hole Poole-Frenkel factor respectively. 
{bold} MUN 
and
{bold} MUP 
are used to set the low field electron and hole mobilities respectively. 

The
{bold} CONTACT 
statements are used to specify the workfunction of metal and ITO at the cathode and the anode respectively. The first 
{bold} CONTACT 
statement specifies a workfunction of 2.9eV (equivalent to Calcium) at the cathode. This forms an electron-injection barrier of 0.1eV (i.e. Ca workfunction - polymer affinity) at the cathode. 
The second 
{bold} CONTACT 
statement specifies the workfunction of ITO as 4.7eV. This forms a hole-injection barrier of 0.2eV given the polymer HOMO level of 4.9eV. The 
{bold} NEW.SCHOTT 
option specifies a heterojunction thermionic tunneling model to be used, while the 
{bold} AUTO.OHMIC 
option automatically converts the contact to ohmic when there is no barrier. 

In the
{bold} MODELS 
statements, several organic models are used such the Poole-Frenkel-like mobility model (
{bold}PFMOB
), the Langevin bimolecular recombination model (
{bold} LANGEVIN
) and the singlet exciton model (
{bold} SINGLET
). The
{bold} PFMOB 
and
{bold} LANGEVIN 
models account for the transport and recombination mechanism of the polymer, while the
{bold} SINGLET 
model is used to calculate the radiative rate for luminescence due to the Langevin recombination in the OLED. The
{bold} PRINT 
option prints the status of all models, coefficients, and constants in the runtime output window. 

After specifying the structure, an initial solution is first performed with the 
{bold} SOLVE INIT 
statement. This is followed by biasing the anode to 10V. Here, the luminous wavelength 
{bold} L.WAVE 
is set in the
{bold} SOLVE 
statement so that the luminous power can be extracted during the ramp. A 
{bold} PROBE 
statement is included to probe the maximum electric field of the device at x = 5um.

The current density versus voltage and the current density versus electric field data are then extracted via the 
{bold} EXTRACT 
statement. After extracting the data, these data are plotted with the 
{bold} TONYPLOT 
statements. 
For the first plot of current density versus voltage, you should select to display "anode bias" along the x axis and "anode current" along the y axis. 
The second plot shows the current density versus the electric field. 

The third plot is the Luminescent power of the OLED. In this figure, it is 
seen that the device "turns-on" at about 2 Volts.  Finally, the contour plot 
of the Langevin recombination at 10V is displayed.  In this case, most of the 
radiative recombination is seen to be confined within the polymer layer 
close to the cathode.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.




{subsection} organicex02.in : OLED: Transient Simulation of MEH-PPV Polymer LED 

Requires: Blaze/Organic Display
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the transient simulation of an Organic Light Emitting Diode (OLED). It demonstrates:

{bullet} OLED structure definition using Atlas syntax
{newline}
{bullet} Material parameter specification
{newline}
{bullet} Choosing the OLED physical models
{newline}
{bullet} The Langevin and Exciton Density contour plot at 12V
{newline}
{bullet} Transient response of the Exciton Density and Anode Current
{newline}

The simulation structure used in this example is the same as the previous example. After specifying the simulation structure, a steady-state simulation is performed to initialize the transient analysis. 
{bold} DT.MAX 
on the
{bold} METHOD 
statement specifies the maximum time-step for transient simulation. 

The
{bold} PROBE 
statement is used to save the singlet exciton density at the centre of the OLED structure. The value of this parameter is saved to the log file. The 
{bold} OUTPUT 
statement is used to specify the Langevin recombination rate to be saved in the structure file.

In this example, a 12V square voltage pulse of 0.5us is used to study the transient response of the OLED. 
To perform this simulation, a log file is first opened to save all the simulated data after the LOG statement. Next, the
{bold} SOLVE 
statement sets the anode at 0V for 50ns. This is followed by ramping the anode from 0V to 12V with a ramp time of 5ns. The parameter
{bold} DT 
in the second
{bold} SOLVE 
statement is used to set the first time step of the transient. All other time steps are calculated automatically by the program. A
{bold} DT 
value of ramptime/100 is a safe one under most circumstances. The
{bold} TSTOP 
parameter will set the time until which the simulation will continue. Once the simulation reaches 500ns, the third
{bold} SOLVE 
statement will ramp down the anode voltage from 12V to 0V with a ramp time of 5ns. The anode voltage remains at 0V till 550ns. 

In this example, 4 plots are automatically generated by the 
{bold} TONYPLOT 
statements after the simulation. The first and second plots show the Langevin Recombination and singlet exciton density contour plots at 12V. 
The third plot shows the transient response of the exciton density due to a 12V square voltage pulse of 0.5us. 
Since the exciton density is proportional to the Electro-Luminescence (EL) intensity, the generic features of the simulated exciton density transient curve are similar to that of an EL curve. 

Lastly, the final plot is a transient response of the anode current. 
The transient response of the anode current is characterized by a sharp charging spike due to the capacitance of the device followed by a quasi-steady state. 
At turn-off, there is a sharp discharging spike followed by some decay. 
The current spikes seen in this plot are due to capacitances of the OLED structure. 
These transient current spikes may affect timing requirements and also the power consumption, thus, degrading the performance of the OLED device.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} organicex03.in : Doping Dependent Hopping Mobility 

Requires: Blaze/Organic Display
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the basic characteristics of the doping dependent organic hopping mobility model. 
The simulations will produce graphs of mobility as a function of doping for an organic material. It demonstrates: 

{bullet} Single organic layer definition using Atlas syntax
{newline}
{bullet} Hopping mobility model specification using the ODEFECTS and MODELS statements
{newline}
{bullet} Material parameter specification
{newline}
{bullet} Mobility specification
{newline}
{bullet} Contact specification
{newline}
{bullet} DBInternal specification
{newline}

The template Atlas input deck "organicex03_1.in" is used to calculate the hopping mobility in an organic material. 
The doping value is specified using the DeckBuild 
{bold} set 
command. 
The parameters of interest (the hopping mobility) are extracted using the "
{bold}extract from 2d.max.conc
" capability. 

The content of the template file can be seen inside the input deck file "organicex03.in". 

The file "organicex03.in" starts with the
{bold} GO INTERNAL 
command which transfers control from the current simulator (i.e. Atlas) to DBInternal. The deck file consists of two main parts: 

The 
{bold} LOAD 
command specifies which template file should be used for multiple runs. The 
{bold} SWEEP 
command specifies how the variables set in the template file should be changed. 
In this example, the doping varies from 1e17 to 1e23, and the gamma varies from 2.5e7 to 3.5e7. 
The number of simulations is set to 14 times 3 (i.e. 42). 

The 
{bold} SAVE 
command tells DBInternal to collate the data generated in all extract commands into the file "organicex03.dat".

After all simulations are complete, the resulting mobility vs doping are plotted in TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} organicex04.in : OLED: 2 layers versus 3 layers OLED 

Requires: Blaze/Organic Display
{newline}
Minimum Versions: Atlas 5.24.1.R


A conventional 2 layer organic light emitting diode consists of a Hole 
Transport Layer (HTL) and an electron transport layer (ETL). A good OLED 
structure requires sufficient carrier injection so that large exciton density 
is generated when the carriers recombine. However, a 2-layer OLED structure 
has a low injection current due to the poor metal/organic material interface 
and therefore has a low device output efficiency. Commercial OLED structures 
are multi-layers and this example compare 2 layers versus 3-layers OLED. 

This example is based on the following reference:

J.Staudigel et al, "A quantitative numerical model of multilayer vapor-deposited 
organic light emitting diodes" Journal of Applied Physics Vol. 86, Number 7  
October 1999

In the first part on this example a hole-only unipolar organic device is simulated 
and simulation result is compared to measurement. Schottky contacts are defined 
for both anode and cathode electrodes and defect states are defined whithin the 
organic material using the 
{bold} odefect 
statement. A good fit is obtained between simulation and measurement. 

The second part of the deck compare a 2 layers OLED versus a 3 layers OLED. 

To demonstrate why the 3-layer OLED has a higher efficiency than a 2-layer device, 
we need to take into account interface defect between organic/organic material. To
do so we have defined interface defect states using the
{bold} ointdefect 
statement combined with interface thermionic emission model. 
The main effect of the organic/organic interface is to add trap states which reduces 
the energy barrier height and enhance carriers injection.

Simulation results indeed show thatthe 3 layers OLED has a lower anode current
as expected but a higher luminescent power due to higher Langevin recombination rate.
The same simulations done without interface defect states show opposite behavior (i.e
luminescent power is higher in 2 layers OLED). 


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} organicex05.in : Pasveer Hopping Mobility Model and Gaussian DOS

Requires: Blaze/Organic Display
{newline}
Minimum Versions: Atlas 5.24.1.R


This example compares I-V curves generated using the Pasveer hopping mobility
model [1] with using a constant mobility model when using a Gaussian energy
distribution of band states.  It also shows the effects of electron 
concentration throughout the device for different structure bias.  An 
explanation of the Pasveer mobility model together with the gaussian energy 
density of states distribution and diffusion models is briefly described below.


{bold} Gaussian Density of States Energy Band Structure

It has been found that the band structure of organic materials is better
represented by a gaussian energy distribution for the density of states rather
than using the normal parabolic energy distribution of states used for 
crystalline semiconductor materials.  The average eneregy level cited for the 
equivilent "valence" and "conduction" bands in organic materials, is therefore
in the middle of the gaussian energy distribution, rather than at the band 
edges of the distribution as in the case for ordered crystalline materials.

A gaussian energy band distribution is specified on the material statement, 
where for the conduction band, the total density of states is specified by 
setting the 
{bold} NtC.gauss 
parameter and the width of the gaussian distribution is set by the 
{bold} SigC.gauss 
parameter.  Two analagous parameters are also avalable for the valence band. 


{bold} Pasveer Hopping Mobility Model [1]

Also demonstrated in the example is the Pasveer hopping mobility model [1], 
which was developed to be used in conjuction with the Gaussian energy 
distribution of the density of states.  In an analagous way to mobility models
in crystalline materials, the Pasveer model makes the mobility dependent on
both the fraction of filled states (similar to the conmob model in silicon)
and the electric field (similer to fldmob).

To activate the Pasveer hopping mobility model for electrons, specify
{bold} Pasveer.N 
on the mobility statement.  The parameter that determines the maximum carrier
density used in the carrier dependent mobility model is specified using the
{bold} CCutoff.N 
parameter, and the analagous maximum field used in the field dependent 
mobility model is specified using the 
{bold} FCutoff.N 
parameter.  Once again there are analagous parameters for the valence band.


{bold} Diffusion Model 

The diffusion model resulting from a gaussian distribution of states 
necessitates a corrective term to the Einstein diffusion relationship which
is also included in the models.


[1] The Pasveer reference publication is as follows:
	W.F.Pasveer et al., Physics Review Letters, 94, 206601 (2005)
 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} organicex06.in : Hole transport in polyfluorene based sandwich devices


Requires: Blaze/Organic Display
{newline}
Minimum Versions: Atlas 5.24.1.R

The IV curves of hole-only sandwich-type devices containing a blue-emitting 
polyﬂuorene-based copolymer are simulated for a wide range of temperatures and 
for several thicknesses of the active organic layer based on [1]. In [1] it is 
shown that IV curves cannot be accurately describe using a commonly used mobility 
model which only depend on the electric field but that a consistent and quantitatively
precise description of all curves can only be obtained using an extended Gaussian 
disorder model EGDM [2]. In this model, the mobility depends on the electric field 
and on the carrier concentration.Please refer to organicex05 for a detailed description 
and simulation of the EGDM model implementation. 

The device under test is a single hole-only layer device. The input deck is parametrized
so that the variation of temperature and active layer thickness can be simulated easily 
using the internal Design of Experiment feature of deckbuild. Model parameters 
are set in the input deck using Table 1 from [1] and Low carrier density and low 
electric field mobility model is defined as mu0(T) = mu0 * exp(-C * (sigma/kT)^2)
(see equation 6 in [1]). The "baseline" input deck is named organixex06_aux.in and
in organicex06.in, simulations are performed in order to reproduce Fig2, Fig3(b), 
Fig5(c) and Fig5(d) from [1]. Even if a direct comparison with measurement is not
done a very good agreement is obtained for the full range of temperature and 
thicknesses. 

Linear search damping is activated with the 
{bold} ls.damping
parameter in the 
{bold} method
statement. 
{bold} lsd.skip.iter 
is the number of Newton iterations that occurs before linear search damping is 
used. This is an alternative to the default Newton iteration scheme and shouldn't 
be used in all cases, but helps convergence in this case.


[1] S.L.M.van Mensfoort, S.I.E.Vulto, R.A.J.Janssen, and R.Coehoorn      
    Hole transport in polyflourene-based sandwich-type devices:          
    Quantitative analysis of the role of energetic disorder              
    Physical Review B 78, 085208 (2008)    

[2] The Pasveer reference publication is as follows:
	W.F.Pasveer et al., Physics Review Letters, 94, 206601 (2005)
 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} organicex07.in : Color sensor with vertically stacked organic photodetectors

Requires: Blaze/Organic Display
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the spectral simulation of an organic color sensor
The device consists of three vertically stacked organic photodetectors which
are individually sensitive to blue, green and red light from top to bottom [1]. 

In the first part of the example, we create successively the blue, green and 
red-sensitive detectors which are separated by thick glass substrates. ITO 
electrodes of each detector are then created and assigned the same workfunction. 

Organic materials are defined in the second part of the input deck. The dispersive
refractive index is given in an index file where the absorption coefficients of
primary absorptive materials are taken from Ref.[1]. Other material parameters 
are taken from other literatures or estimated from typical values. 

Similar to organic solar cells, singlet exciton rate equation and exciton 
dissociation model are enabled by setting the
{bold} SINGLET
and
{bold}  S.DISSOC
parameters of the
{bold}  MODEL
statement, respectively. Poole Frenkel 
mobility model and Langevin recombination model are used in this example as well.

Transfer matrix method is activated in the
{bold}  BEAM
statement by setting
{bold}  TR.MAT 
to correctly simulate coherent effects of light.

After setting DC biases of each detector, wavelength ramping is performed from 
0.4 to 0.75 um under 50 uW/cm2 illumination power density for each monochromatic
light beam. 

External quantum efficiency and the sensitiviy of each detector are 
extracted from the spectral file. It should be noted that there exist dense ripples upon 
the envelope of the spectral response because of the optical interference effect.

[1] H. Seo, S. Aihara, T. Watabe, H. Ohtake, M. Kubota, and N. Egami      
    "Color sensors with three vertically stacked organic photodetectors"          
    Jpn. J. Appl. Phys., Vol. 46, pp. L1240-L1242, 2007              
    

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} organicex08.in :  Simulation of OLED device using a Quantum Model for Emission Spectrum

Requires: Blaze/Organic Display/Quantum
{newline}
Minimum Versions: Atlas 5.24.1.R

In this example we simulate a 3-layer device with Alq3/Alq3:DCJTB/NPB
similar to that described in [1]

Photon emission model:

We use the Holstein model for the Alq3 and DCJTB spectra in both the electron
transport and the emissive layers. The model is parameterized by the exciton-phonon
coupling and the exciton hopping energies. The former is set to 1.61 for Alq3.
This value was taken from  [2].

For DCJTB this number is not available from experiments. We used a slightly
higher number than Alq3 since we expect excitons to be localized on DCJTB.

The homogeneous and inhomogeneous broadenings were derived by fitting to
experimental data in [2] for Alq3 and then similar broadenings were used for DCJTB.

The additional Stokes shift due to reorganization energy was also used as an
additional parameter to properly align the emission and absorption spectra with
experiment [2].

Photon Propagation model:

We use the transfer matrix method to propagate the light from emissive layers
to the outside. Emission is modeled as Hertzian dipoles placed uniformly across
the thickness of the layer, and added incoherently. We observe a strong modification
of spontaneous emission lifetime of the dipole due to the presence of interfaces
and metal electrode. This is plotted as the average Purcell factor, which is produced
by weighing the Purcell factors of each dipole according to the amount of light it
emits in free space.

The strong modification of spontaneous emission lifetime must also be fed back into
the drift diffusion model. At present, ATLAS is not capable of doing this. 

Modification of spontaneous emission lifetime is higher in ETL layer than in EML layer
due to the vicinity of ETL to metal electrode.

[1] C.C. Lee et. al. "Electrical and Optical Simulation of Organic Light-emitting
devices with fluorescent dopant in the emitting layer" Journal of Applied Physics
vol 101, 114501 (2007)
[2] Martin Brinkmann, Gregory Gadret, Michele Muccini, Carlo Taliani
Correlation between Molecular Packing and Optical Properties in Different Crystalline
Polymorphs and Amorphous Thin Films of mer -Tris ( 8-hydroxyquinoline )
aluminum ( III ) Journal of American Chemical Society    122 p. 5147-5157 (2000)

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{section} MAGNETIC : Magnetic Transport Application Examples



{subsection} magneticex01.in : Hall Voltage for n-type and p-type resistor

Requires:  S-Pisces/Magnetic
{newline}
Minimum Versions: Atlas 5.24.1.R

The example shows :

{bullet} How to specify the Magnetic field and Hall scattering factors.
{newline}
{bullet} The Hall voltage set up across a resistor.
{newline}
{bullet} How the Hall effect shows the type of carrier dominating conduction. 
{newline}

To apply a magnetic field to Atlas,  simply assign a value to the parameter
{bold} bz 
on the 
{bold} models 
statement.   The magnetic field must be 
perpendicular to the current flow, and so attempts to assign a non-zero value
to either 
{bold} bx 
or 
{bold} by 
will result in an error message.


The voltages at the centre left and right of the device are given relative
to the reference voltage in the centre of the device. Their difference is the Hall Voltage,  which is zero if no magnetic field is applied.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} magneticex02.in : Current based Magnetic field detector

Requires: S-Pisces/Magnetic
{newline}
Minimum Versions: Atlas 5.24.1.R

The example shows : 

{bullet} A dual collector bipolar structure made using Atlas syntax
{newline}
{bullet} Bifurcation of the collector currents due to Magnetic field
{newline}

Without the field, the collector currents are identical,  applying the
magnetic field breaks the symmetry causing more current to flow to one of
the collectors.  The difference in collector currents allows the magnetic
field to be measured.  This structure is not strictly speaking a
magneto-transistor as the base thickness is zero in some directions.


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} magneticex03.in : Directional magnetic field detector

Requires:  Device 3D/Magnetic 3D
{newline}
Minimum Versions: Atlas 5.24.1.R

The example shows:

{bullet} 3D structure formation using Atlas syntax
{newline}
{bullet} Model settings for 3D Magnetic field
{newline}
{bullet} Field detection using open circuited contacts

The Magnetic field in Atlas 3D is specified by setting some combination of
BX,BY, or BZ on the MODELS statement. In this case the current flow is in the x-direction and so we set up a field in the y-direction and z-directions
by setting BY and BZ on the 
{bold} models
 statement.  Open circuited contacts
are placed perpendicular to the y-direction and z-direction respectively. The
potential drop in the y-direction (and hence
{bold} BZ
) is measured between contacts Hall1 and Hall2
 and that in the z-direction (and hence 
{bold} BY
) is measured between contacts Hall3 and Hall4. The ratio of potential
differences generated can be seen to be in proportion to the ratio of 
magnetic field components,  thus giving the direction of the field in 
the y-z plane. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} magneticex04.in : Extraction of Hall scattering factors
Requires:  S-Pisces/Magnetic
{newline}
Minimum Versions: Atlas 5.24.1.R

{bullet} Creating a 2d Hall cross structure
{newline}
{bullet} How to set Hall scattering factors
{newline}
{bullet} How to extract Hall scattering factors from simulation data

The Hall scattering factors, r_n and r_p, are theoretical constants 
which is put into MAGNETIC2D and affects the terms of the Magnetic
matrix. For the limit n >> p we have a theoretical Hall coefficient
of -r_n/n e and for p >> n we have a theoretical Hall coefficient of
r_p/p e.  The Hall coefficients can also be calculated directly from
the simulated  Hall voltage, current density and magnetic field as 
explained in the Atlas manual.

The purpose of this deck is to obtain the Hall coefficients directly 
from the simulation results, and multiply by the relevant carrier
density to extract values for the hall scattering factors over a range of
biases.  These are then plotted to show that they agree closely with the
values of Hall-scattering factor input on the MODELS statement.  This acts
as one validation of the Magnetic module.

Note: You should select anode bias as the 
X-quantity in the plot of the extracted data.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{section} MCDEVICE : Monte Carlo Device Application Examples




{subsection} mcdeviceex01.in : Bulk n-type Silicon

Requires: MC Device
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates the simulation of electron transport
in bulk n-type silicon with a single value
of the doping and the electric field.

This example shows how to set bulk material properties,
the number of iterations, the MC time step, and the
number of carriers (i.e., electrons).
This example also shows
how to obtain estimates of the bulk mobility.
This example introduces the bulk mode of MCDEVICE and basic
concepts of modeling charge transport in bulk semiconductors.

The bulk material properties are set on the
{bold} BULK 
statement. The
{bold} FIELD 
parameter and the
{bold} DOPING 
parameter are the most commonly used.
In this case, a low field with no doping is chosen
to model the behavior of mobile electrons in intrinsic silicon in the
linear region of the velocity-field characteristic.

The number of iterations and duration of the time step are
set on the
{bold} ALGO 
statement.
The
{bold} ITER 
parameter implies that mobility estimates
in the mcdeviceex1_diff.log file are averaged over
of TIME = (
{bold} ITER
-
{bold} TRANS
) *
{bold} DT
= (10000-0)*(1e-15 s) = 10e-12 s = 10 ps.
To improve the estimates, increase
{bold} TRANS
, which is the number of transient iterations performed before
TIME=0 when MCDEVICE begins to collect data for the averages.
The number of computational carriers used in the Monte Carlo model
is determined by the
{bold} N 
parameter on the
{bold} PARTICLE 
statement.  For bulk simulations,
{bold} N 
represents the
ensemble size used to collect data.  The magnitude of
the noise of the averages will be reduced both by increasing the
size of the ensemble and by increasing the time during
which data is collected, namely (
{bold} ITER
-
{bold} TRANS
) *
{bold} DT
).

The mobility estimates along with other time-averaged quantities are
written into the mcdeviceex01_diff.log file.  You can plot these
with TonyPlot.  The best estimate for the mobililty
is obtained when drift-derived and diffusion-derived
estimates converge.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mcdeviceex02.in : 25-nm n-MOSFFET

Requires: MC Device
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates 2D Monte Carlo device modeling of a silicon
n-MOSFET without quantum correction.

The first part of the input file specifies the algorithmic parameters of the
Monte Carlo model.  Many of the same parameters specified in the
input file for the bulk example (mcdeviceex01)
are used again here.  In this case,
the number of computational carriers (electrons) is set to 40,000 with the
{bold} N 
parameter on the
{bold} PARTICLE 
statement.
{bold} N 
= 40000 is large enough to adequately sample
the spatial distribution of mobile charge in the device.
To better sample the tail of the distribution function, use a
higher value of
{bold} N 
or statistical enhancement.

On the
{bold} ALGO 
statement,
{bold} DT
= 0.1e-15 s = 0.1 fs is ten times smaller than in the bulk example
since the electrons must sense small variations in the 2D doping and
field profiles.  To get even closer to the steady-state solution,
change from
{bold} ITER 
= 2500 to
{bold} ITER
= 25000.  With this change, MCDEVICE will take about 10
times longer to run the example, but the averages will be closer
to the steady-state solution.  As in the bulk case, you may want
to change from
{bold} TRANS
= 0 to
{bold} TRANS
= 1000 to obtain a more
accurate solution before TIME = 0 when MCDEVICE begins collecting data
for its averages.
We have kept this example short by using
{bold} ITER
= 2500 and
{bold} TRANS
= 0
so you can experience running a complete simulation in just a couple
of minutes.


In this case,
{bold} TSTEP
= 5
on the 
{bold} POISSON 
statement indicates that Poisson's equation will be solved every 5 iterations
(or every 5 *
{bold} DT
= 0.5 fs).  This time must remain short in order for the
electrons to properly
sample spatial and temporal variations of the electric fields.

The second part of the input file specifies a rectangular tensor product
mesh used
to represent the physical structure of the device,
to solve Poisson's equation,
and to help enforce the MC carrier boundary conditions.
A finer mesh captures more
carrier-carrier interaction.  A courser mesh captures less
carrier-carrier interaction.  In this example, we use a typical size
of the 2D mesh for a 25-nm n-MOSFET.  This 2D mesh is finer
than what is typically used when solving for the steady-state
solution of the drift diffusion or energy balance equations for the
same device.

The third part of the input file specifies rectangular regions
on the mesh.  The REGION statements indicate both the
material (MAT parameter) and type of region (TYPE parameter).
When you specify the regions in your input file, always 
include regions with the TYPE of OUT, MC, BLOCK, and CONTACT.
Please see the MCDEVICE chapter of the Atlas User's Manual for
a complete description of
the region types and how they control the Monte
Carlo solution.

The fourth part of the input file specifies the rectangular current
regions used to estimate the current in the device.  In this case,
the x-directed estimates of
the current (dim=1 values in the mcdeviceex02_current.log file)
from the first and third regions represent the terminal currents at
the source and drain, respectively.

The fifth part of the input file specifies the doping profiles.

The last part of the input file includes a
{bold} SOLVE 
statement.  The
{bold} SOLVE 
statement performs the Monte Carlo solve at the voltage biases
provided by the
{bold} V<NAME> 
parameters on the
{bold} SOLVE 
statement.
Additional commented
{bold} SOLVE 
statements may be
used to do perform voltage ramps
or obtained solutions at other bias points.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mcdeviceex03.in : 25-nm n-MOSFFET with quantum correction

Requires: MC Device
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates 2D Monte Carlo device modeling of a silicon
n-MOSFET with quantum correction.

For all aspects of this example apart from the quantum correction,
please see the previous example, mcdeviceex02.

The aspects of this example related to the quantum correction are
specified with three different statements.

On the
{bold} QREGION 
statement,
the 
{bold} BOUNDP 
parameter specifies a rectangular domain where
the quantum correction is included.
In this case, the quantum correction is included just under the gate.
{bold} DIR
= Y
on the
{bold} QREGION 
statement specifies the
direction of quantization.

The
{bold} SCHRMESH 
statement specifies the number and location of nodes used for the
Schroedinger mesh.  The Schroedinger equation is solved
on the 1D mesh specified here at every
{bold} XSTEP
= 1
mesh lines along X
and at every
{bold} TSTEP
= 4000
iterations.  Undersampling the quantum solution either
spatially or temporally may reduce the accuracy of the solution.
This choice
was found to be adequate for this device
and is a reasonable starting point for modeling other devices.

The
{bold} SCHRREGION 
statement specifies the material regions
used for the quantum correction.
You must specify these material definitions using
{bold} SCHRREGION 
statements consistently with the material definitions
you specified on the 2D Poisson mesh using
{bold} REGION 
statements.
In this example, although MCDEVICE obtains non-zero values of the 
electrons' wave functions in the SiO2 region,
MCDEVICE confines the MC electrons to the silicon substrate.
As a result,
the "Electron Conc" and "Average Electron Conc" fields in the
mcdeviceex03_sol.str file
do not show electrons in the SiO2 even though electron penetration of
oxide barrier is considered as part of the model.
This choice is conventional.
The model does a good job of predicting
the impact of quantum size effects on the electron concentration
and the terminal currents.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mcdeviceex04.in : 25-nm p-MOSFFET

Requires: MC Device
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates 2D Monte Carlo device modeling of a silicon
p-MOSFET without quantum correction.

For all aspects of this example apart from the quantum correction,
please see mcdeviceex02.

This example was generated by changing all n-type dopants to
p-type dopants, all p-type dopants to n-type dopants,
and by negating all applied bias voltages.

The
{bold} CARRIER 
parameter on the
{bold} ALGO 
statement is changed from
{bold} CARRIER 
= E for electrons (as in mcdeviceex02) to
{bold} CARRIER
= H for holes.  This means that holes are modeled using
the Monte Carlo transport model and electrons are modeled using
the constant quasi-Fermi method.  In mcdeviceex02,
these choices are reversed.

In additional, the
{bold} PHON
,
{bold} BANDS
,
and
{bold} FINAL 
statements are
added near the end of the input file (just before the
{bold} SOLVE 
statement).  These three statements are provided here
to change to settings
consistent with
{bold} CARRIER
= H.
The default values for these three statements are
are consistent with
{bold} CARRIER
= E.

In this case, the x-component of the currents produced by the
p-MOSFET are negative while the x-component of the current
produced by the n-MOSFET were positive.  This is as expected and
follows the sign conventions for the current
described in the "Current Regions" section of the MCDEVICE
chapter of the Atlas User's Manual.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mcdeviceex05.in : Imported 25-nm n-MOSFFET

Requires: MC Device
{newline}
Minimum Versions: Atlas 5.24.1.R

This example demonstrates 2D Monte Carlo device modeling of a silicon
n-MOSFET by importing the mesh, regions, and doping from
a Silvaco structure file.

For all aspects of this example apart from the
{bold} IMPORT 
statement, please see mcdeviceex02.

In preparation for this example, we generated the same structure used
in mcdeviceex02 using Atlas outside the MCDEVICE module and saved it
in the mcdeviceex05_atlas.str file.
This example uses the
{bold} IMPORT 
statement to 
import structure information from this file into MCDEVICE.

The
{bold} MESH, REGIONS
, and
{bold} DOP 
parameters on the
{bold} IMPORT 
statement are set to
{bold} TRUE
. This indicates that all three aspects will be imported
from the structure file specified by the
{bold} STRFILE 
parameter.
The 
{bold} TYPE 
parameter is set to 8 to indicate that
the file is a Silvaco structure file.

The initial definitions of
the source, drain, gate, and substrate regions
are imported from the mcdeviceex05_atlas.str file.
The 
{bold} REGION 
statements change the
{bold} TYPE 
parameter for these regions from
{bold} MC 
to
{bold} CONTACT
.

Specify all contact definitions
in your input file either by changing the
{bold} TYPE 
parameter of imported regions (as shown here)
or by adding new contact definitions.
This is true since
flat contacts are ignored by
{bold} IMPORT 
statements
and contact regions are imported as
{bold} TYPE=MC
.

All aspects of the structure
can be modified after import and prior to a
{bold} SOLVE 
statement by using the
{bold} XMESH, YMESH, REGION
, and
{bold} DOPING 
statements.
In this case, just the
{bold} TYPE 
parameters of the contact
regions were changed
and all other structure information
from the import were retained.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{section} MERCURY : Examples of the Fast Simulation of FETs


{subsection} mercuryex01.in : Planar N-Type MESFET  


Requires: Mercury
{newline}
Minimum Versions: Atlas 5.24.1.R


This is a basic introduction to the Mercury module.  Mercury is
optimized for the fast simulation of epitaxial FETs (that is FETs that
have a constant epistructure and doping profile from the source to the
drain).

This example defines a simple, planar n-type MESFET and simulates the
DC-IV curves and the small-signal AC characteristics.

Most of the commands are familiar Atlas commands, however there are a
few commands and parameters that are specific to the Mercury module.

The
{bold} network clear 
command removes the external circuit that surrounds the FET.  As
Mercury can do a large-signal harmonic balance simulation on the FET
it needs to be able to solve the FET within an external circuit.  This
circuit is not usually needed when simulating the DC or small-signal
behavior.

The
{bold} models n_depletion 
command tells Mercury that the device is an n-type depletion mode
FET.  Mercury can use this information to optimize the simulation.

The
{bold} poisson 
command is used to generate a look-up table that characterizes the
channel as a function of surface condition.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mercuryex02.in : Recessed N-Type MESFET


Requires: Mercury
{newline}
Minimum Versions: Atlas 5.24.1.R


The Mercury module is optimized for simulating epitaxial FETs.  That
is FETs where the material and doping are constant along the
x-dimension of the device (from the source to the drain).  The only
variation allowed in the x-direction is the position of the gate and
the position/depth of a recess on the surface.

This example defines a simple, recessed n-type MESFET and simulates the
DC-IV curves and the small-signal AC characteristics.

This example introduces the
{bold} surface 
command that is used to define the recess.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mercuryex03.in : Recessed P-Type MESFET


Requires: Mercury
{newline}
Minimum Versions: Atlas 5.24.1.R


This example defines a simple, recessed p-type MESFET and simulates the
DC-IV curves and the small-signal AC characteristics.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mercuryex04.in : Recessed P-Type HEMT


Requires: Mercury
{newline}
Minimum Versions: Atlas 5.24.1.R


The Mercury module can model the band offsets associated with a
multi-layer epistructure and so can generate the channel associated
with a modulation doped structure (where the mobile carriers are
physically removed from the doping that generates them).

This example defines a modulation doped GaAs/InGaAs/GaAs HEMT and
simulates the DC-IV curves and the small-signal AC characteristics.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mercuryex05.in : Harmonic Balance


Requires: Mercury
{newline}
Minimum Versions: Atlas 5.24.1.R


As the Mercury module uses a 1D simulation to calculate the transport,
it uses a relatively small number of mesh points (compared to a 2D
Atlas simulation of the same FET).  Therefore Mercury can use the
Harmonic Balance method to simulate the large signal behavior of the
FET.  The matrices used in the Harmonic Balance method are 25-100
times bigger than the matrices used in a DC simulation of the same
device.

This example defines a simple, recessed, n-type MESFET and does a
Harmonic Balance simulation at 100 MHz.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mercuryex06.in : Gain Compression


Requires: Mercury
{newline}
Minimum Versions: Atlas 5.24.1.R


This example defines a simple, recessed, n-type MESFET and does a
Harmonic Balance simulation at 100 MHz and 1 GHz.

This example goes to higher input power than the previous example and
so displays the gain compression that occurs.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mercuryex07.in : Trend Analysis


Requires: DBInternal, Mercury
{newline}
Minimum Versions: Atlas 5.24.1.R


The speed of Mercury means it is well suited for trend analysis,
investigating how changes in the structure of the device affect the
output.

This example shows how the doping in a device effects the current
pinch off behavior.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


{subsection} mercuryex08.in : Yield Analysis


Requires: DBInternal, Mercury
{newline}
Minimum Versions: Atlas 5.24.1.R


The speed of Mercury means it is well suited for yield analysis,
investigating how random variations in the construction of a device
will affect the output.

This example shows how changes in the doping, the recess, and the gate
length affect the drain current and transconductance at some quiescent
bias.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

﻿

{section} MOCASIM : Mocasim Application Examples


{subsection} mocasim01.in : Default GaAs material simulation


Requires: Mocasim, TonyPlot
Minimum Versions: Mocasim 5.16.0.R



This example demonstrates the simulation of the bulk parameters for a
default material (GaAs).  There are seven Mocasim sub-sections plus
two calls to TonyPlot:
{newline}
{bullet} Define the material.
{newline}
{bullet} Define the scattering mechanisms.
{newline}
{bullet} Define the range to simulate over.
{newline}
{bullet} Specify a backup file.
{newline}
{bullet} Do the Monte Carlo simulation.
{newline}
{bullet} Save the results.
{newline}
{bullet} Fit a standard model to the results.
{newline}
{bullet} Output the results.
{newline}

The first section uses the 
{bold} initialize
statement to select the material to simulate. 

The second section uses the
{bold} deformation_potential_acoustic_phonon,
{bold} polar_optical_phonon,
{bold} ionised_impurity
and
{bold} intervalley_phonon
commands to activate the scattering mechanisms
associated with the material, and to assign appropriate
parameters to model this scattering.

The third section uses the
{bold} field,
{bold} temperature, 
and
{bold} doping
commands to define the range over which to perform the Monte Carlo
simulation.  In this example, we are calculating the parameters
as a function of electric field at a fixed temperature and a
fixed doping.

The fourth section uses the
{bold} log
command to define a backup file.  A Monte Carlo simulation usually
takes a long time, so it is sensible to save the results once they
have been calculated (so that if a running simulation is interrupted
the points that have already been calculated don't have to be
simulated again).

The fifth section uses the
{bold} solve
command to carry out the Monte Carlo simulation.

The sixth section uses the
{bold} save
command to save the transport results in a form that can
be viewed in TonyPlot.

The seventh section uses the
{bold} fit
command to fit a standard model to the Monte Carlo data.  In this
example we are fitting the ATLAS negative-differential mobility
model to the GaAs mobility.  The resultant coefficients can be
used in ATLAS.  The
{bold} compare
parameter is used to specify a file that can be used to output a
comparison between the Monte Carlo data and the fitted model.

The final section uses the
{bold} tonyplot
command to display the results of the simulation.  The first
plot displays the raw Monte Carlo data.  The second plot displays
the Monte Carlo data and the fitted model.


To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.

{subsection} mocasim02.in : Default Si material simulation


Requires: Mocasim, TonyPlot
Minimum Versions: Mocasim 5.16.0.R


This example has exactly the same structure as example 1.

This example demonstrates the simulation of the bulk parameters for a
default material (Silicon).  There are seven Mocasim sub-sections plus
two calls to TonyPlot:
{newline}
{bullet} Define the material.
{newline}
{bullet} Define the scattering mechanisms.
{newline}
{bullet} Define the range to simulate over.
{newline}
{bullet} Specify a backup file.
{newline}
{bullet} Do the Monte Carlo simulation.
{newline}
{bullet} Save the results.
{newline}
{bullet} Fit a standard model to the results.
{newline}
{bullet} Output the results.
{newline}

The first section uses the 
{bold} initialize
statement to select the material to simulate. 

The second section uses the
{bold} defpot_acoustic_phonon,
{bold} ionised_impurity
and
{bold} intervalley_phonon
commands to activate the scattering mechanisms
associated with the material, and to assign appropriate
parameters to model this scattering.

The third section uses the
{bold} field,
{bold} temperature, 
and
{bold} doping
commands to define the range over which to perform the Monte Carlo
simulation.  In this example we are calculating the parameters
as a function of electric field at a fixed temperature and a
fixed doping.

The fourth section uses the
{bold} log
command to define a backup file.  A Monte Carlo simulation usually
takes a long time so it is sensible to save the results once they
have been calculated. This is so that if a running simulation is interrupted,
the points that have already been calculated do not have to be
simulated again.

The fifth section uses the
{bold} solve
command to do the Monte Carlo simulation.

The sixth section uses the
{bold} save
command to save the transport results in a form that can
be viewed in TonyPlot.

The seventh section uses the
{bold} fit
command to fit a standard model to the Monte Carlo data.  In this
example we are fitting the ATLAS Caughey-Thomas mobility
model to the GaAs mobility.  The resultant coefficients can be
used in ATLAS.  The
{bold} compare
parameter is used to specify a file that can be used to output a
comparison between the Monte Carlo data and the fitted model.

The final section uses the
{bold} tonyplot
command to display the results of the simulation.  The first
plot displays the raw Monte Carlo data.  The second plot displays
the Monte Carlo data and the fitted model.


To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.




{subsection} mocasim03.in : User-defined material simulation 


Requires: Mocasim, TonyPlot
Minimum Versions: Mocasim 5.16.0.R
 

This example demonstrates how to override the default material
and simulation parameters.

The
{bold} material
command is used to override the default materials parameters.
The
{bold} dc_dielectric
parameter is used to set the DC dielectric constant.  The
{bold} energy_gap
parameter is used to set the three energy gaps of the three-
valley model.  The energy gaps must be defined in the order
Gamma, L, and X.  So in this example the direct (Gamma) band
gap is being set to 1.4 eV.

On the
{bold} initialize
statement the
{bold} burn_in
parameter is used to set the number of time steps we run
before we start calculating the transport parameters. This
is so that the non-physical initial distribution of electrons
does not affect the results. The
{bold} num_time_step
parameter is used to set the number of time steps we use
to actually calculate the transport parameters. The more time
steps are used, the more accurate the results will be, but
the longer the simulation will take.

The
{bold} print
statement is used to output the parameters used in the
Monte Carlo simulation.  This file contains the "internal"
parameters (such as number of time steps, the energy
range over which the scattering is calculated), the "material"
parameters (such as band-gaps, electron masses, dielectric
constants), and the "scattering" parameters (such as
phonon energies and deformation potentials).


To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.

{subsection} mocasim04.in : Scattering rate extraction 


Requires: Mocasim, TonyPlot
Minimum Versions: Mocasim 5.16.0.R
 

In this example we output the scattering rates generated by Mocasim.

In Section 1 and 2 we set up the scattering mechanisms used in 
example 1.

In Section 5 we calculate the scattering rate at a temperature of
300 K and a doping of 1e14 cm^-2 and output the rates to 
mocasim04_1.dat.  The scattering rates are calculated as a function
of electron energy, from 0 eV to 7.5 eV by default.

The first tonyplot shows the individual scattering rates for electrons
in the L-valley.

The second tonyplot shows the total scattering rates for low energy
electrons, and for all electrons.


To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.

{subsection} mocasim05.in : Default GaN material simulation


Requires: Mocasim, TonyPlot
Minimum Versions: Mocasim 5.16.0.R
 

This example repeats example 1 and 2 with a Wurtzite material.

The main difference between examples 1 and 2 and this example is
on the
{bold} intervalley_phonon
command.

In Zincblende and Diamond structure crystals, the structure of the
conduction band minima is fairly consistent.  There is a minimum at
the Gamma point of the Brillouin zone, a minimum along the L direction
of the Brillouin zone, and a minimum along the X direction of the
Brillouin zone.

In Wurtzite structure crystals there is no such uniformity.  The
three-valley model uses the three lowest conduction band minima.
The lowest minima is given the ordinal 0, the next lowest minima
is given the ordinal 1, and the third lowest minim is given the
ordinal 2.

The three lowest minima for GaN can be seen from the output of the
{bold} print
command in section 5.

The 
{bold} fit
command to fit a polynomial model to the Monte Carlo data.  The
polynomial model is of the form

mu = Sum{e=0...numE-1,n=0...numN-1,t=0...numT-1} Cent*E^e*log(N)^n*T^t

This polynomial contains numE*numN*numT terms and so can very quickly 
become unwieldy.  In this example the doping and the temperature are
fixed, so electric field is the only independent variable.


To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.

{subsection} mocasim06.in : User-defined scattering example 


Requires: Mocasim, TonyPlot
Minimum Versions: Mocasim 5.16.0.R


This example demonstrates the bulk parameter simulation of a default
material (GaAs), however user-defined scattering mechanisms are defined
for the Gamma<->L intervalley transition.

This example is basically the same as example 1 except that some of
the scattering mechanisms are defined by a c-interpreter file (and 
we don't fit a model to the results, so there is no Section 7 in this
example).


To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example. 

{subsection} mocasim07.in : Temperature dependent Si simulation

Requires: Mocasim, TonyPlot
Minimum Versions: Mocasim 5.16.0.R


This example is very similar to example 2.  However in example 2
we did a simulation over a range of electric fields (at a fixed
temperature and doping), in this example we do a simulation over
a range of temperatures (at a fixed electric field and doping).

Instead of fitting the Caughey-Thomas mobility model we fit the
basic ATLAS low-field temperature dependent mobility model.

As well as fitting the model to the Monte Carlo data we generate
a c-interpreter function that will calculate the model.  The
parameter
{bold} tofimun
tells Mocasim to generate a file with the template of the ATLAS
"int tofimun(...)" function.  The parameter
{bold} ci_file
tells Mocasim where to save the c-interpreter function to.

This c-interpreter function could be read into ATLAS with
the command

mobility material=silicon f.tofimun=mocasim07_4.lib


To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example. 



{subsection} mocasim08.in : Doping dependent GaAs simulation

Requires: Mocasim, TonyPlot
Minimum Versions: Mocasim 5.16.0.R


This example is very similar to example 1.  However in example 1
we did a simulation over a range of electric fields at a fixed
temperature and doping. In this example we do a simulation over
a range of doping at a fixed electric field and temperature.

Instead of fitting the Negative Differential mobility model, we fit the
basic ATLAS analytic low-field mobility model.

As well as fitting the model to the Monte Carlo data, we generate
a c-interpreter function that will calculate the model.  The
parameter
{bold} munsat
tells Mocasim to generate a file with the template of the ATLAS
"int munsat(...)" function.  The parameter
{bold} ci_file
tells Mocasim where to save the c-interpreter function to.

This c-interpreter function could be read into ATLAS with
the command

mobility material=gaas f.munsat=mocasim08_4.lib


To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.
 

{section} SONOS : SONOS Non-Volatile Memory Examples

{subsection} sonosex01.in :  Nitride charging dependence on capture cross-section

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

The example shows :

{bullet} How to create a simple SONOS structure.
{newline}
{bullet} How to activate and specify the parameters for the DYNASONOS model.
{newline}
{bullet} How to charge a SONOS structure.
{newline}
{bullet} How to specify and interpret the SONOS logfile output.

Typical Atlas meshing commands are used to set up a MOSFET-like
structure. The main difference is the presence of a layer of Silicon
Nitride in the gate stack.  The insulating layer between the Nitride and the
channel is termed the tunnel oxide,  and the insulating layer between
the Nitride and the contacts is called the blocking layer.  The Atlas
 SONOS model is invoked using the
{bold} INTERFACE N.I DYNASONOS 
statement.  The value of DYNASONOS flag is enabed by default,  and so 
it is not necessary to specify this explicitly.

To use the DYNASONOS model, the insulators in the gate stack must be changed
to (wide-gap) semiconductors and given values for density of states, mobility
and effective mass.  The effective mass values strongly affect the tunneling
current through the gate stack.  

Additionally, one must use the NITRIDECHARGE statement to set up the parameters
of the nitride traps.  The density of traps can be set with the parameters
NT.N (acceptor-like traps) and NT.P (donor-like traps). In this deck we
want to trap electrons and so specify a non-zero value for NT.N. The
parameter SIGMAT.N gives the cross-section for trapping the electrons in the
Nitride conduction band and is set to 4 different values within this deck.

The parameter ELEC.DEPTH specifies the energy depth of the electron 
trap below the conduction band.  The parameter TAU.N gives the characteristic
timescale for emission from the trap level to the conduction band. 
 
The parameter SIGMAN.P controls hole capture from the valence band and is
set to zero with loss of generality.

The Nitride traps are charged up by ramping the bias to 16 V over 1 nanosecond
and then maintaining this for 1 millisecond.

The stored charge as a function of time (nettcharge) is plotted for the four 
different values of SIGMAT.N.  The larger the cross-section then the
more charge is stored.  The stored charge should be the integrated 
difference between the current entering the Nitride region from the
channel and that leaving to the gate contact.  This can also be seen in the
other plots, and by using the TonyPlot integrate tool you can obtain an
estimate of the nett stored charge to compare (within truncation errors) 
with nett charge.
 
As the trapping cross-section increases, less charge arrives at the interface
with the blocking insulator and the out current decreases and is delayed,
as can be seen in the plots of in and out current at the different values of
capture cross-section.  In all cases a steady state is obtained where
in and out current are matched and the nett charge is constant.

The structure files of the charged device are plotted, the user can use the 
TonyPlot cutline tool to view the Trapped Insulator Charge, Electron Charging
Rate and other relevant parameters

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.



{subsection} sonosex02.in : Threshold Voltage Shift Calculation

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

The example shows :

{bullet} How to set up a SANOS device (variant of a SONOS device)
{newline}
{bullet} How to obtain the threshold Voltage of a SANOS device
{newline}
{bullet} How to obtain data for a range of Biases and time frames
{newline}

The blocking insulator need not be made of the same material as the
tunnelling insulator.  In this case we have a blocking insulator made
of Sapphire (Al203) and a tunnelling insulator made of Silicon dioxide.

This example uses the DBINTERNAL feature of DeckBuild, and the deck
sonosex02_aux.in is run for each value of the Gate Bias specified by
the parameter sweep of vgate in the sonosex02.in deck.

Each time sonosex02_aux.in is run,  it sets up a SANOS structure, very
similar to the structure in sonosex01.in , but with the blocking insulator 
layer made of Sapphire.  It is necessary to make this material into a widegap
semiconductor and set other parameters on the MATERIAL statement.

The DYNASONOS model is selected on the first INTERFACE statement.  Because
of the relatively low conduction band offset between the Silicon Nitride
and the sapphire,  the 
{bold} INTERFACE S.S THERMIONIC
statement is used to model any thermionically emitted current leaving the
device.  This current will not appear in the SONOS outcurrent, but in the
gate conduction current.

In the
{bold} NITRIDECHARGE
 statement, we set up the relevant parameters 
and also specify 
{bold} PF.BARRIER.
  This sets the barrier height for the
Poole-Frenkel detrapping model, which is enabled by the PF.NITRIDE flag
on the MODELS statement.

The gate bias is ramped and the device charged for 1 second.  A structure file
is saved out at various preset charging times.  The next part of the deck
reads in these structure files in turn, and for each one it ramps the drain 
bias and also the gate bias in order to calculate the threshold voltage using the
deckbuild EXTRACT facility.  The gate stack layers are treated as insulators
in this case, to make the simulation simpler.  The charge trapped in the
Nitride layer affects the threshold voltage in the same way.

After calculating the threshold voltage for the set of Gate biases and at each
of the preset charging times,  the threshold data is plotted.  The threshold voltage 
increases with Gate Bias and also with charging time.  For a charging 
time of 1.0 seconds there is a roughly linear relationship between gate bias 
and threshold voltage (0.65 V of threshold voltage change for every 1.0 V of
bias volatge change).  The threshold voltage for the uncharged device is also
shown, and threshold volatge shifts can be calculated relative to this.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run  
button to execute the example.



{subsection} sonosex03.in : Erase example

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

The example shows:

{bullet} How to create a SONOS device structure
{newline}
{bullet} How to charge and then erase the device 
{newline}
{bullet} Use of PROBE statement to obtain stored charge density

This example illustrates how the position of the trapped charges in
the Silicon Nitride vary with time as the device is charged up and then
erased by changing the Gate Bias.  This example has a 2 nm thick
tunnelling layer, a 5 nm Nitride layer and a 5 nm blocking oxide layer.

The NITRIDECHARGING statement sets up a density of 10^20 /cm^3 of electron
traps, having a relatively high capture cross-section of 10^-10 cm^2.
A bias of 18 V is applied to the gate and the device is charged up.  The
state of the structure is saved out to a structure file at certain
values of charge time. It is charged for 1.0 seconds, after which SOLVE
INIT is called, with the SONOS parameter specified.

SOLVE INIT preserves the stored charge density,  but on its own tries
to put in the steady state equibrium solution.  The combination of a
large fixed charge, and weak coupling of the drift-diffusion equations
through the wide band-gap semiconductors,  can result in erroneous
free carrier screening of the fixed charge.  The SONOS parameter used with
SOLVE INIT avoids this.

After this, negative bias is applied to the gate, ramping for 1 nanosecond
and then the device is erased for 1.0 seconds.  The structure file is
output at preset intervals in order to allow the user to inspect the 
progress of the erasing.

The integrated nett stored charge in C/um is obtained using the PROBE statement

{bold} PROBE NAME=nettcharge SONOS.CHARGE INTEGRATE  Y.MIN=-0.0075 Y.MAX=-0.0015 X.MIN=0.1 X.MAX=0.2 
and this quantity can be plotted as a function of time.  When the device is
 charged, the largest contribution is from the tunnel current into the
Nitride conduction band.  For erase, it is the tunnelling direct from the traps
to the channel. This is illustrated by doing a second erase,  with the only
change being the parameter ELEC.DEPTH in the NITRIDECHARGING statement.
This is increased from 1.5 eV to 2.0 eV, in order to reduce the direct
trap-to-channel tunnel current.  It can be seen from the log file that 
the erase takes longer with deeper traps.

The user can employ the TonyPlot cutline tool to see the vertical profile
of the Trapped Nitride Charge through the gate stack at various time points
of the charging/erasing.
 
To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run  
button to execute the example.



{subsection} sonosex04.in : Retention example

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

The example shows:
{bullet} How to create a SONOS device structure
{newline}
{bullet} How use the PF.NITRIDE model
{newline}
{bullet} How to study the long term retention properties of the device
{newline}


The device is set up using Atlas mesh commands to make a dielectric stack of
 4 nm of Silicon oxide, 5 nm of Silicon Nitride and 10 nm of Sapphire (Al2O3).

The device is charged for 1 millisecond with a Gate Bias of 18 V, before the
{bold} SOLVE INIT SONOS 
statement resets all electrode biases to zero,  while preserving the fixed
charge density in the Silicon Nitride and protecting the free charge
densities in the insulator stack from numerical problems.

The device is simulated for up to 10 years,  with progressively increasing 
step sizes.  It saves out the structure files at preset time points, so that
you can look at the change in charge profile and the (negative) Sonos 
electron charging rate as time progresses. To do this, use the TonyPlot
cutline tool to create sections through the gate stack.  The overall
stored charge is shown in the logfile, and can be seen to be much
diminished after 3 x 10^8 seconds

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run  
button to execute the example.


{subsection} sonosex05.in :  Example of simplified SONOS model

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

The example shows:
{bullet} How to use the simplified SONOS model
{newline}
{bullet} How to charge the device using hot carrier gate current
{newline}
{bullet} How to erase the device using tunnelling
{newline}

The device is set up in a similar way to the DYNASONOS model.  The main
difference is that the gate stack materials remain as insulators,
they are not changed to wide bandgap semiconductors. The gate material
parameters which will affect the simulation are the tunnel insulator
effective masses, and the bandgap and affinity parameters.

In this example case a device with a a 5/15/10 nm ONO gate stack is 
constructed.  It is still necessary to specify N.I on the INTERFACE
statement,  but the DYNASONOS model must be explicitly cleared by 
using the syntax ^DYNASONOS.  The NITRIDECHARGE statement is not required.

In this example the N.CONCANNON parameter on the MODELS statement is
set, and this also has the effect of enabling the Hot Electron energy
balance model. The gate is given a positive bias, in order to attract
hot electrons leaving the channel.  The drain is then biased to half
of the gate bias and the hot electrons follow field lines until they
either leave the device or charge the traps at the edges of the Nitride
region.  

After the device is charged the threshold voltage is obtained.  The structure
field is also saved, enabling you to look at the trapped charge under
the "Insulator Charge" field, in units of cm^2.

The device is then erased by applying a negative bias to the gate, with
drain and source grounded.  The structure file is saved and the threshold
voltage measured.

The Idrain versus Vgate plots are shown for the uncharged, charged and
erased state of the device. 

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run  
button to execute the example.



{subsection} sonosex06.in :  Charging a SONOS device using the Lucky Electron model

Requires: S-Pisces
{newline}
Minimum Versions: Atlas 5.24.1.R

The example shows:

{bullet} How to charge the device using lucky electron gate current
{newline}
{bullet} How to obtain the threshold voltage for different charging times 
{newline}

The device structure is set up to be the same as in sonosex05.  The difference
is that the gate stack materials are changed to semiconductors and the 
necessary parameters are set.  This example uses lucky electron gate current
and the values of effective mass in the tunnelling insulator do not affect
the simulation (they may if set to be unphysically small).

The NITRIDECHARGE statement is used to specify electron traps at a uniform density 
of 5x10^19 /cm^3, and sets up various parameters for the capture cross-section
and emission rates.  The emission rates are in fact overridden because on the 
MODELS statement the PF.NITRIDE flag is specified.  With this choice,  the emission
rates are calculated using the Poole-Frenkel formula (see the DYNASONOS section in
 the manual).  The HEI flag is also used to select a hot carrier gate current 
calculation using the lucky electron approximation along with the drift-diffusion
simulation.  


The gate bias is set to 8V and the drain is ramped to half of this.  At the 
channel/insulator interface, the hot electron current is calculated and the
electric field lines are used to determine where the current arrives at the
interface between the Silicon Nitride and the surrounding insulator.  The
Nitride is then charged at its interface according to the amount of hot
carrier current arriving there.  

The structure file is saved to file at certain preset simulation times.
The SONOS.RATES flag was set on the OUTPUT statement and so you can see the
location of the Nitride charging at each output time.  Only a subset of
structure files are output by the example, but you can also view the
other ones if desired.

The next part of the deck uses dbinternal to obtain the threshold
Voltage for each of the saved structure files.  It does this in the
file sonos06_aux.in. The advantage of using dbinternal is that the
data file containing the threshold values can be plotted using
TonyPlot. These threshold voltages are plotted against charging time.
The logfiles Idrain versus Vgate are also saved to file and can be viewed
 in TonyPlot.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run  
button to execute the example.
{section} Athena_IMPLANT : Implant Process Simulation

{subsection} aniiex01.in : Comparison of Gaussian, Pearson and SVDP methods 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example compares implant analytical models: Gaussian (symmetrical)
profile, single Pearson (amorphous implant), and SIMS Verified Dual
Pearson (
{bold}SVDP
) method. 
The parameter 
{bold} PRINT.MOM 
specifies that moments used in each simulation should be printed out.
The
{bold} MOMENTS 
statement is used to select the tables.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} aniiex02.in : Tilt Angle Dependence using the SVDP Model 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows how  35 keV boron implant profile depends on the
tilt angle. the SIMS Verified Dual Pearson (
{bold}SVDP
) method is used.  
The parameter 
{bold} PRINT.MOM 
specifies that moments used in each simulation should be printed out.
As can be seen the boron distribution is very sensitive even for a small
variation in the tilt angle.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} aniiex03.in : Screen Oxide Thickness Dependence using the SVDP Model 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows how a 35 keV boron implant profile depends on the thickness of the surface oxide. Oxide is grown in DRY ambient at a temperature of 900 C. 
Oxidation time varies from 0 to 160 minutes which results in oxide thicknesses
between approximately 50 and 400 Angstroms. The values of oxide thickness are extracted and
then substituted into the 
{bold} S.OXIDE 
parameter of the 
{bold} IMPLANT 
statement. The surface screen oxide partially randomizes the ion flux which
leads to less channeling with increasing oxide thickness.
The SIMS Verified Dual Pearson (
{bold}SVDP
) method allows us to properly predict this effect.  
Parameter 
{bold} PRINT.MOM 
specifies that moments used in each simulation should be printed out.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} aniiex04.in : Experimental Verification of Channeling Profiles  

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example compares zero-tilt boron implant profiles obtained using
the SIMS Verified Dual Pearson (
{bold}SVDP
) method with experimental results (R.J. Shreutelkamp, et.al.,
Nucl.Instr. & Meth., B55, p.615, 1991) saved in *.exp files.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} aniiex05.in : Dose Dependent Channeling of Phosphorus 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the dose dependence of zero-tilt P implant profiles obtained using the 
SIMS Verified Dual Pearson (
{bold}SVDP
) method and compares them with experimental results (R.J. Shreutelkamp, et.al., 
Nucl.Instr. & Meth., B55, p.615, 1991) saved in *.exp files. As the implant dose
increases, more damage is caused resulting in additional dechanneling of 
phosphorus ions. Therefore, the profile tail shortens with increasing dose.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} aniiex06.in : Retrograde Well Formation Using High Energy Implants

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows high energy implant capability. The look-up tables
for main implants are extended up to 8 MeV which allows simulation
of modern technologies involving MEV implants. In this example,
the three microns deep retrograde well is formed using two P implants
(2 MeV and 0.75 MeV) with subsequent 1 hour, 1100 C anneal. 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} aniiex07.in : User-Defined MOMENTs with Parameters from MC Simulation

Requires: SSuprem 4, MC IMPLANT
{newline}
Minimum Versions: Athena 5.21.2.R

This example can be used as a template which allows us to estimate implant moments
from Monte Carlo simulation and then use these moments in subsequent 
analytical implants. This approach is useful for those ion/material/energy combinations
which are not included into look-up tables. 

In the first part of the example, the Monte Carlo method is used to calculate 
moments for 70 keV boron in titanium silicide. Parameter
{bold} PRINT.MOM 
specified in the 
{bold} IMPLANT 
statement allows Athena to save the calculated moments in the standard structure
file 
{bold} aniiex07_01.str
. 

In the second part of the example, first the moments parameters 
for single Pearson distribution are extracted from the file. Then, the 
parameter substitution capability of 
{bold} DeckBuild 
is used to path these parameters to the 
{bold} MOMENTS 
statement. After that the moments set in the
{bold} MOMENTS 
statement are used in the analytical implant. The parameter
{bold} ANY.PEARSON 
is set to FALSE. This ensures that Pearson type-IV distribution will be used.
Profiles obtained in Monte Carlo and analytical simulations
are compared in TonyPlot.


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} aniiex08.in : Phosphorus Implant through Thick Nitride Layer

Requires: SSuprem 4, MC IMPLANT
{newline}
Minimum Versions: Athena 5.21.2.R

This example compares Monte Carlo and analytical methods for implantation into
a multi layered structure. It shows that analytical methods are reasonably accurate
even for the case when the profile peak is close to interface between two
materials with quite different stopping powers. In most cases the default 
{bold} DOSE.MATCH 
method appears to be fairly adequate, but sometimes range scaling methods (
{bold} MAX.SCALE
, for example) may give slightly better profiles in the deeper layer.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} aniiex09.in : Lateral Implant Straggle

Requires: SSuprem 4, MC IMPLANT
{newline}
Minimum Versions: Athena 5.21.2.R

This example compares analytical methods for simulation of 2D implantation.
It also shows how to use Monte Carlo simulation for estimation of spatial
moments. 

In the first part, Monte Carlo simulation is used to save a structure 
with spatial moments. Only 20000 trajectories is enough to estimate the moments.

In the second part, all 8 spatial moments are extracted. Then, the default
and 
{bold}FULL.LAT 
model are used to simulate 2D implant into the 0.2 microns mask window. The default method uses only 5 spatial moments, and lateral distribution is
Gaussian  with standard deviation independent from the vertical coordinate.
FULL.LAT model uses 8 spatial moments and lateral distribution is a symmetrical
Pearson function with standard deviation varying as a parabolic function
of the vertical coordinate.
In general, lateral kurtosis should also depend on the vertical
coordinate, however the simplified approach with constant kurtosis slightly
smaller than the averaged fourth lateral moment KURTT is used. Obtained 2D
profiles are overlaid in TonyPlot. 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} aniiex10.in : LDD Formation using High Tilt Angle Implant (LATID)

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the use of the analytical angled implant model.
A MOS structure is created with angled full rotation LDD implants. 
Full rotation is used to provide symmetry of 2D profiles. LDD implant
uses off-axes direction (48 degrees) to exclude very deep penetration along 
45 degrees direction. A very detailed Monte Carlo simulation would be needed
to obtain a reliable set of moments for 45 degree implants. Source and
drain As implant is performed at 0 degrees. 


{bold} Note: 
The parameter
{bold} STD_TABLE 
is used in the 
{bold} MOMENTS 
statement. Otherwise the SVDP model would
overestimate the implant tail because it does not have surface oxide
dependence for arsenic.


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} aniiex11.in : 2D BCA coincident boron arsenic point implants

Requires: SSuprem 4, MC IMPLANT
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the difference between two implants as
a result of the order in which they are done.  The implant
damage from the first implant affects the second implant.

An impenetrable 
{bold} barrier 
layer is deposited upon silicon in this example,
which is then etched to create a 10 nm wide window.  This structure
forms the starting point for two separate cases.

In the first case, a 10 keV arsenic implant is performed, followed by
a 10 keV boron implant.  Arsenic, a heavier ion than boron, creates
significant damage in the silicon.  As a result, the crystal
integrity of silicon is reduced, which in turn reduces the boron
channeling.

The second case reverses the order of the implants (but maintains
the same energy and dose).  Boron is
first implanted, and the normal 
{bold} [100] 
channel profile of boron as determined by BCA is formed.  The arsenic 
implant follows. Since boron is much lighter than arsenic, there is 
less damage created by the boron implant (which can also be viewed in the
{bold} .history.str 
files), and arsenic forms nearly the same distribution
as in the first case.  Quantitatively, the peak concentration 
(the projected range) of boron is noticeably deeper in the
second case.

The current example simulates 10,000 ions incident upon the
structure for each implant.  Increased accuracy, at the
cost of increased simulation time, can be obtained by increasing the 
{bold} n.ion 
parameter of the 
{bold} IMPLANT 
statement to 100,000.

The 
{bold} impct.point 
parameter specifies a precise impact location
for the ions.  This parameter makes the barrier layer redundant,
and is available only for Monte Carlo ion implant simulations.  
See the Athena User's manual for a complete description

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} aniiex12.in : Angled Monte Carlo Implant into a Trench 

Requires: SSuprem 4, MC IMPLANT
{newline}
Minimum Versions: Athena 5.21.2.R

This example employs a Monte Carlo implant model to implant boron into
the sidewall of a trench. The 
{bold} RELAX 
statement is also used to
adapt the mesh after trench etching so that a fine mesh can be created
at the surface where it is needed to resolve the implantation.

For this example, ions are incident at an angle of 15 degrees from the
direction of the y-axis.  Thus, the ions are incident directly only on
the right side of the trench and at the top exposed surface.  The
doping on the left side and bottom of the trench is due to reflected
ions.  There is a visible reduction in the depth of the profile about 1
micron from the bottom of the trench.  This corresponds to the point in
the trench where ions are directly incident above this point and 
shadowed below it. The first TonyPlot shows the ion trajectories
(including those of reflected ions). To facilitated the visualization
select the LINE (the last icon in the 
{bold} DISPLAY 
menu) button.

Following the implant calculation, a short diffusion is performed and
the results are plotted using 
{bold} TonyPlot
. 
The output shows 1D profiles
from the surface of the unetched silicon and also from the implanted
sidewall of the trench.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} aniiex13.in : Comparison of Analytical and MC Implant Models

Requires: SSuprem 4, MC IMPLANT
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows that the channeling effect of ion implantation
can be simulated by using the Monte Carlo crystal model.
It compares boron implants at 7 degrees obtained by amorphous and crystalline 
Monte Carlo models with amorphous and SVDP analytical models. Within the range 
of the SVDP model validity the analytical approach is preferred. However outside 
this range the crystalline MC implant can be used for more accurate profiles.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.



{subsection} aniiex14.in : BCA Models for well channeled Boron Implant.

Requires: SSuprem 4, MC IMPLANT
{newline}
Minimum Versions: Athena 5.21.2.R


This example demonstrates that 0-tilt implantation can be simulated using the
Binary Collision Approximation (BCA) Model. In the BCA model the deflection 
of the moving particles is calculated in a strict binary way - between the 
moving ion and the closest atom in the lattice. The difference between 
the BCA model and earlier implemented Monte Carlo crystalline model is 
much more accurate determination of the closest atom and more accurate 
calculation of impact dependent inelastic energy losses. Therefore, 
BCA is capable of much more accurately predicting trajectories of 
well-channeled particles and therefore usually gives much better 
agreement with experiments in those cases where the channeling process 
is dominant, e.g. for 0 degrees implants. 

The simulated profile is compared with experiment (R.J. Shreutelkamp, et.al., 
Nucl. Instr. & Methods, v. B55, p. 615, 1991) and SVDP simulation which is 
also based on SIMS experiments. It should be stressed here that 
experimental results for well channeled implants are quite sensitive 
to many factors including surface conditions (thickness and uniformity 
of oxide surface layer) and precision of the ion beam orientation 
and beam width. Even 0.5 degree deviation in these parameters could 
result in considerable changes of measured implanted profiles. 
Therefore, agreement between these simulations and experiment should 
be considered as quite reasonable.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} aniiex15.in : Preamorphization Effect on Shallow Junction Profile.

Requires: SSuprem 4, MC IMPLANT
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates that the BCA implant model can predict
reduction of the channeling tail by using the preamorphization
technique. Preamorphization of surface layers using Silicon ion
bombardment is often used to avoid deep channeling tails when shallow
symmetric doping profiles are  required.

BCA simulations of three separate 70 keV, 1e13 ion/cm^2, 0-tilt Arsenic 
implants are performed:

{bullet} without preamorphization
{newline}
{bullet} with partial preamorphization (1e14 Si ions/cm^2) 
{newline}
{bullet} with full preamorphization (1e15 Si ions/cm^2). 
{newline}

The profile comparison shows that even partial preamorphization
significantly reduces the channeling tail, while "full"
preamorphization completely eliminates the tail.


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} aniiex16.in : Use of C-Interpreter for Control of Damage Models.

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows how C-Interpreter can be used for control of
PLUS.ONE (or UNIT.DAMAGE)  and <311> Cluster formation models. Both
models estimate distributions of point defect and <311> clusters by
scaling implant profile using factors DAM.F and CLUSTER.F,
correspondingly. Also, in the case of <311>, the user specifies the
concentration limits within which the clusters can be formed.

These methods of damage model control are very limited and sometimes
could not represent physical reality. For example, it is observed that
clusters are not formed near silicon surface, but it cannot be
specified within model limitations. 

The first part of this example, and corresponding Figure on the left, shows that two <311> cluster bands are
formed. This situation is even more pronounced in 2D since the <311>
cluster band could propagate laterally and end up at the surface. This
means that if the model is applied to S/D or LDD implant of a
MOS device, the <311> would "appear" under the gate which is incorrect.

Use of C-interpreter allows us to modify the models. In this case the C-interpreter
file 
{bold} aniiex16.lib 
allows the cluster to be formed only at depths > 0.15 microns. Also, C-interpreter 
allows us to modify the PLUS.ONE model. In this example,  C-interpreter specifies that the PLUS.ONE model is
to be applied to concentrations only above level of 3e15 /cm^3.

The C-interpreter file is specified by the
{bold} DAM.MOD 
parameter in the 
{bold} IMPLANT 
statement.     

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.



{subsection} aniiex17.in : 2D BCA low energy boron source/drain implant

Requires: SSuprem 4, MC IMPLANT
{newline}
Minimum Versions: Athena 5.21.2.R

This two dimensional example of the 
{bold} Monte Carlo Binary Collision Approximation (BCA) 
model has two cases, the first of zero tilt,
the second of thirty degree tilt.  (See the Athena_IMPLANT example
on "BCA Models for well channeled Boron Implant" for a description
of the BCA model.)

The structure includes a thin oxide above the silicon, and polysilicon
0.15 um long (such as used for a MOS gate).  In this example, 
the 2 keV boron implant is effectively a source/drain (or LDD) implant.  
(At this low energy, most analytic implant models are inaccurate.)

The zero tilt case produces nearly symmetric dopant distribution. 
The thirty degree tilt case shows additional dopant
on the left side of the structure, including the left side of
the polysilicon, and a shadowing effect on the right side, as
expected.

A comparison of the zero tilt and the thirty degrees tilt will show
a higher dose in the zero tilt case.  This is due to a larger number
of incident ions reflected in the thirty degrees tilt case.

The 
{bold} beamwidth 
parameter introduces a random tilt between zero and 
{bold} +/- beamwidth/2 
degrees for Monte Carlo ion implant simulations.  For
an accurate simulation, this parameter has been set to 0.1.  


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} aniiex18.in : Effect of Implant Steps Sequence.

Requires: SSuprem 4, MC IMPLANT
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates that not only the profile depth but also details
of the 2D shape depends on the sequence of implant steps. In the first case even
a low dose As implant partially disorders silicon near the surface which
results in a higher probability of channeling in secondary directions. In the
second case, channeling takes place predominantly in the normal direction.


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} aniiex19.in : Use of SIMS Profile Model

Requires: SSuprem 4, MC IMPLANT
{newline}
Minimum Versions: Athena 5.21.0.A

This example demonstrates how to use the SIMS Profile Model. 


In many cases 1D profiles obtained from tabulated range moments are not
accurate and it is preferable to use measured SIMS profile instead. The SIMS 
Profile Model provides this capability. Athena will use SIMS profile stored 
in a file specified by parameter 
{bold} measured.sims 
when 
{bold} profile 
parameter present in the implant statement.


Another possibility is to generate SIMS-like profile using 1D Monte Carlo simulation 
and extract capability of DeckBuild. This capability is shown in the example.
In the first part 1D profile of 200 keV boron profile is simulated using BCA 
Monte Carlo model and then extracted and saved in aniiex19.dat file. In the second part of the example,
the 200 keV boron implantation through 1 micron mask window is simulated. The extracted profile aniiex19.dat is specified in the implant statement with parameter
{bold} extract.sims
. 
The final 2D distribution is not as accurate as the result of a full 2D Monte Carlo simulation but the SIMS Profile Model is obviously much faster.



To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} aniiex20.in : Al implant in 4H-SiC in [11-23] Crystallographic Direction.

Requires: SSuprem 4, MC IMPLANT
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows very pronounced channeling effects 
for on-axis implantation in 4H-SiC. The Al implant energy is 60 keV and
implant direction condition corresponds to on-axis implantation in [11-23]
crystallographic direction. Comparison with results of aniiex20.in shows that 
crystallographic orientation significantly affects the length of channeling tails. 
Crystallographic analysis shows that channels in [11-23] direction are 
"wider" than in [0001] direction which result in almost 2 times longer channeling 
tails when implanting in [11-23] direction. The experimental profiles are taken from 
Wong-Leung et al. J. Appl. Phys. vol.93, pp 8914-8916, 2003.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{section} Athena_DIFFUSION : Diffusion Process Simulation


{subsection} andfex01.in : Boron Implant and Anneal 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example gives a simple demonstration of implantation and
annealing. Boron is implanted and the profile
diffused.  Because the implant is not masked, 
{bold} Athena/SSuprem 4 
remains in 1D mode.

For this anneal of a medium dose implant in an inert ambient the default
{bold} fermi 
diffusion model is used. 


After completing the diffusion calculation, 
{bold} TonyPlot 
is used to plot a 1D cutline through the structure.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} andfex02.in : Oxidation Enhanced Diffusion of Boron 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the diffusion models for Oxidation
Enhanced Diffusion (OED). 
When diffusion is performed in an
oxidizing ambient, point defects are injected into the silicon with a
rate that is a function of the rate at which the silicon is oxidizing.
This point defect injection gives rise to an increased diffusion that
is commonly referred to as OED.

To model OED the 
{bold} TWO.DIM 
diffusion model must specified
on the 
{bold} METHOD 
statement.  When this model is specified, the
interstitial and vacancy concentration will be calculated along with
the impurities.  This model loosely couples the point defects,
generated by the oxidizing Si-SiO2 interface, with the diffusing
boron.

When modeling point defects it is necessary to extend the substrate of
the simulation space to provide an adequate sink for the point defects.
Simulations show that a depth of 20 to 50 microns is required in most
cases.

This example re-runs the simulation using the 
{bold} fermi 
model to compare results. The overlay plot at the end of the simulation
demonstrates the extra oxidation enhancement to the diffusion depth.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} andfex03.in : Damage Enhanced Diffusion of Arsenic

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the damage enhanced diffusion effect in a
heavy arsenic implant typical of MOS source/drain or bipolar emitter
processing. 

Diffusion enhancement due to defects introduced during heavy implants
are responsible for the
{bold} Transient Enhanced Diffusion (TED) 
or
{bold} Rapid Thermal Annealing (RTA) 
effect. 

One of the key parameters in TED modeling using the full.cpl model is
the amount of implant damage generated by the implant. This is
controlled using the
{bold} UNIT.DAMAGE 
model. The parameter
{bold} DAM.FACT 
scales the interstitial concentration relative to the doping profile. 

A 15 second heat cycle at 1000 Celsius is performed and the resulting
dopant profile saved.


When modeling point defects it is necessary to extend the substrate of
the simulation space to provide an adequate sink for the point defects.
Simulations show that a depth of 20 to 50 microns is required in most
cases.

This example re-runs the simulation using the 
{bold} fermi 
model to compare results. The overlay plot at the end of the simulation
demonstrates the extra implant damage enhancement to the diffusion depth.


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.



{subsection} andfex04.in : Transient Enhanced Diffusion using <311> Clusters

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the damage enhanced diffusion effect in a
phosphorus implant typical of MOS LDD
processing. 

Diffusion enhancement due to defects introduced during heavy implants
are responsible for the
{bold} Transient Enhanced Diffusion (TED) 
or
{bold} Rapid Thermal Annealing (RTA) 
effect. 

This example shows the Stanford 311 cluster diffusion model. To enable this model the syntax used is
{bold} method full.cpl cluster.dam i.loop.sink high.conc 
This model is an extension to the fully coupled model that describes
the dissolution of 311 interstitial clusters.


The implant damage is defined in the <311> model using the 
{bold} cluster 
statement. The parameters
{bold} min.cluster  
and
{bold} max.cluster 
describe the doping levels at which clusters form.

Tuning of the TED effect is performed using the release
time of the clusters speicified as follows:

{bold} cluster tau.311.0= <val> tau.311.E= <val> 


When modeling point defects, it is necessary to extend the substrate of
the simulation space to provide an adequate sink for the point defects.
Simulations show that a depth of 20 to 50 microns is required in most
cases.

The plot shows the evolution of the transient enhanced diffusion. At
800 degrees the transient effect lasts for about 5 minutes. The overlay
plot shows how the diffusion in the first 5 minutes is greater the subsequent
55 minutes.


A second plot shows the location and concentration of the interstitial
clusters and the free interstitials. As the clusters decay they release
free interstitials that provide the diffusion mechanism for the
phosphorus.


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.



{subsection} andfex05.in : Phosphorus Pile-up During Oxidation

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the effect of Phosphorus pile-up during oxidation.
To clearly demonstrate the pile-up effect the example starts with constant P concentration of 1e18 /cm^3. The effect is most pronounced when oxidation is more intensive than diffusion, so phosphorus piling-up due to moving oxidation front does not have time to diffuse inside the bulk. High pressure is used to increase oxidation rate.
If the standard 
{bold} Fermi 
model for diffusion is used, the pile-up effect is 
exaggerated because oxidation enhanced diffusion is not taken into account. 
More realistic profiles can be obtained using the
{bold} Two.dim 
model. In this case phosphorus diffuses faster inside the bulk which prevents the formation of a very high pile-up.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} andfex06.in : Stanford High Dose Model 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the high dose extensions to the fully coupled
diffusion model from Stanford.

This model results from the work of Scott Crowder and Peter Griffin at
Stanford and represents an extended fully coupled diffusion model
accounting for dopant-defect coupling, seen at high concentrations.

The model is invoked by selecting the following method flag:
{bold} method high.conc.


This model extends the previous fully coupled model (full.cpl) to
include extra reactions terms related to the pairing of dopant and
point defect states. Further, it includes extra reactions describing
coupled recombination terms in both the bulk and at the surface.

The parameter: 

{bold} ivfactor 
controls the relative rate of PD recombination based upon vacancy-dopant pairs recombining with free interstitials with respect to straight interstitial - vacancy recombination. This parameter may be physically considered as a capture cross section ratio.

Similarly, 
{bold} iifactor 
controls the relative rate of PD recombination based upon interstitial-dopant pairs recombining with free vacancies with respect to straight interstitial - vacancy recombination. This parameter may be physically considered as a capture cross section ratio.

Also related only to the surface, 
{bold} Isurfact 
is the ratio of the
surface capture cross sections of V-PI surface recombination and I-V
surface recombination.

This model is thought to be significant when dealing with unclustered
concentrations above 1e19 /cm^3.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} andfex07.in : Emitter Push Effect 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the use of the 
{bold} FULL.CPL 
model to simulate the emitter push effect on boron diffusion.

The emitter push effect is observed experimentally when a high
concentration phosphorus doped emitter region is diffused within a
boron doped base region.  The boron profile beneath the emitter region
is seen to diffuse more rapidly than the boron profile in the base
region.  This is the result of point defects that are coupled to the
diffusing phosphorus that are swept outward into the substrate where
they enhance the boron diffusion. Such effects were the driving force
behind the development of the fully coupled model in
{bold} Athena/SSuprem 4.  
This model includes terms that describe the flux of point
defects based on gradients in impurity profiles.

The fully coupled model is invoked for the co-diffusion of boron and
phosphorus in this example by specifying the 
{bold} FULL.CPL 
parameter
on the 
{bold} METHOD 
statement.  This model is the most time consuming of the
{bold} Athena/SSuprem 4 
diffusion models and should be used with caution.  The fully
coupled model, however, is the only model that can accurately simulate
the emitter push effect.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.



{subsection} andfex08.in : Grain-based Polysilicon Diffusion Model 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the diffusion of impurities in polysilicon in
both grain and grain boundary components. A comparison is run between the 
default diffusion model and the grain-based model. 

The grain based model is enabled by the syntax:
{bold} method poly.diff 


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} andfex09.in : Arsenic Activation  

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This simple example demonstrates the activation model for Arsenic. This model is based on clustering of arsenic dopant. The default model for activation of other species is based on solid solubility. 

 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.



{subsection} andfex10.in : Impurity Activation Models  

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example compares two Impurity Activation Models implemented in SSuprem 4.  
The first is the Solid Solubility Model which is default for all impurities except Arsenic. The second is the Static Impurity/Vacancy Clustering Model
which is the default for Arsenic only. Any of these two models can be selected for a specified impurity/semiconductor combination. First, phosphorus diffusion simulation is made for the default Solid Solubility Model, while in the second part of the example the Clustering Model is specified for phosphorus in silicon. 

Refer to the manual section  'Electrical Activation and
Clustering Models' for a description of the  models used.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.



{subsection} andfex11.in : Phosphorus Predeposition using POCl 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates simultaneous phosphorus predeposition and oxide 
growth. The oxygen content of the gas is specified by the parameters
{bold} dryo2 press=0.8 
in the
{bold} diffuse 
statement.
The phosphorus concentration is controlled by the 
{bold} c.phos 
parameter.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} andfex12.in : Indium Implant and Anneal

Requires: SSuprem 4/MC IMPLANT
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the implantation and diffusion of Indium in
Silicon. This example uses the 
{bold} fermi 
model to anneal a medium dose implant at high temperature in an inert
ambient.

For implantation the 
{bold} monte 
parameter is used to activate the Monte Carlo implantation model. Monte
Carlo implants will generally be more accurate than the analytical
tables for non-standard species. Analytical tables for Indium do
exist.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} andfex13.in : {311}-Cluster RTA in a MOSFET

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the use of the {311}-Cluster TED model. This model employs a bulk injection of Point Defects from a source of as-implanted {311}-Clusters. The clusters may be thought of as a groups of interstitials that are released into the bulk during the initial diffusion cycle.

This model is applicable for medium dose situations in the 1e13 ~ 1e14 range
that are typical for LDD implants.

The damage, in the form of Point Defects, {311}-Clusters and Dislocation 
Loops are derived from the implanted dopant profile scaled and clipped to 
specific dopant concentration 'bands'.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} andfex14.in : Transient Activation Model

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the use of the transient activation model.
This model simulates the activation of dopants after ion implantation.
The model is invoked by the parameter 

{bold} CLUST.TRANS 
in the 
{bold} METHOD 
statement.

Experiments show that only a small portion (~10-20%) of implanted atoms is activated immediately in the beginning of the annealing process. It takes some
time for impurities to achieve equilibrium active concentration level which
usually corresponds to solid solubility.  On the atomic level this process 
is described as dissolution of various types of impurity-defect clusters.
Phenomenologically this process can be described by a transient equation with 
an Arrhenius type temperature dependent time constant. 

This example simulates Boron transient activation at 3 different temperatures.
The implant dose of 2e14 ions/cm**2 leads to the maximum concentration below
the solid solubility level. The 30 minute anneal results in incomplete 
activation. The "activation ratio" is calculated using EXTRACT capability of 
Deckbuild. The simulation results are in reasonable agreement with experimental
data presented in X.-Y. Liu et.al. Appl. Phys. Lett., v.77, No.13, p.2019, 2000. 
 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.






{section} Athena_ADVANCED_DIFFUSION : Advanced Diffusion Simulation


{subsection} advdifex01.in : Predeposition Simulation Using PLS Model

Requires: SSuprem 4 with DIFSIM Module
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the ability of the 
{bold} advanced diffusion model 
to handle the complex couplings between boron and free point defects.

Although not corresponding to the modern deep sub-micron technologies, this simulation is representative of the high 
dopant concentration features which reveal the complex couplings between
{bold} dopant 
and 
{bold} point defects
. It is therefore considered a meaningful basic test for any advanced diffusion model.

Even if this model has been developed for state of the art technologies, it stills can be used as the 
standard diffusion  model for any diffusion step. For example, in the case of buried layer formation, 
the TED phenomena become irrelevant. So only the
{bold} Classical Dopant Diffusion (CDD) 
part of the advanced diffusion model can be used while 
{bold} Interstitial Clusters (IC) 
and 
{bold} Defect-Dopant Clusters (DDC) 
models can be ignored.

To activate the new advanced diffusion model, specify 
{bold} PLS 
in the 
{bold} METHOD 
statement before the diffusion step. Then, only the SDD part is activated.

To load and run this example, select 
{bold} Load example 
button. This action will copy all associated files to your current working directory. Select the Deckbuild 
{bold} run 
button to execute the example.

{subsection} advdifex02.in : Cowern's Experiment Simulation Using PLS Model

Requires: SSuprem 4 with DIFSIM Module
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the ability of the advanced diffusion model to handle 
{bold} Interstitial Cluster (IC) 
kinetics.

In order to validate the IC model, we simulate the experimental data obtained by 
{bold} Cowern et al
. 
This experiment consists of observing the diffusivity of two boron marker layers after a silicon implantation at 40 keV to a dose of
2E13 atoms/cm^2. From these observations, Cowern has estimated the diffusion enhancement 
and the evolution of Interstitial supersaturation with time. 
From the experimental  point of view, this quantity can be related to the 
{bold} boron diffusion enhancement 
with respect to its thermal equilibrium diffusion.

The surpersaturation evolution curve exhibits three parts:

{bold} 1. 
The first step characterized by a high supersaturation value (first run of the simulation) corresponds 
to a large acceleration of the dopant diffusion and can be explained by the presence of 
{bold} small clusters
.

{bold} 2. 
The second step, exhibits a plateau slightly decreasing with time. It is explained by the competitive growth between {311} 
defects, known as the 
{bold} Ostwald ripening 
phenomena. Diffusion acceleration remains constant during this plateau.

{bold} 3. 
The third step, characterized by the supersaturation collapse, is explained by the 
{bold} entire dissolution 
of the Interstitial Cluster population due to the recombination at the surface.

In order to represent two boron markers obtained by epitaxy in Cowern's experiment, two implants with calibrated moments are used in the example. The initial interstitial profile generated 
by the silicon implant in the experiment is implemented into simulation by the PROFILE statement with the advdifex02.dat file.

To activate the new advanced diffusion model, specify 
{bold} PLS IC 
in the 
{bold} METHOD 
statement before the diffusion step, to take into account both Classical Dopant Diffusion (CDD) and IC models.

To load and run this example, select 
{bold} Load example 
button. This action will copy all associated files to your current working directory. Select the Deckbuild 
{bold} run 
button to execute the example.

{subsection} advdifex03.in : Pelaz Experiment Simulation Using PLS Model

Requires: SSuprem 4 with DIFSIM Module
{newline}
Minimum Versions: Athena 5.21.2.R

In this experiment, a boron marker is deposited at a depth of 0.15 microns. In order to observe the boron diffusion, 
{bold} Pelaz 
has performed a silicon implant in order to generate a 
{bold} high 
interstitial concentration 
at the surface. Unlike the Cowern experiment, the boron concentration is high enough to allow the formation of 
{bold} Boron-Interstitial Clusters (BIC). 
Thus, this experiment exhibits a particular effect of the boron diffusion: an 
{bold} immobilization and  de-activation 
of the dopant at high concentrations even under the solid solubility limit.

The boron peak has been modelled using modified implants (through moments tuning), to mimic the epitaxied marker 
shape. The initial interstitial profile, 
generated by the silicon implant is imported using the advdifex03.dat file.

To activate the new advanced diffusion model, specify 
{bold} PLS IC DDC 
in the 
{bold} METHOD 
statement before the diffusion step to take into account CNET, IC and BIC models.

To load and run this example, select 
{bold} Load example 
button. This action will copy all associated files to your current working directory. Select the Deckbuild 
{bold} run 
button to execute the example.

{subsection} advdifex04.in : 20 keV Implant/Diffusion Simulation Using PLS Model

Requires: SSuprem 4 with DIFSIM Module
{newline}
Minimum Versions: Athena 5.21.2.R

Once the validity of the entire 
{bold} PLS 
diffusion model has been proved using specific experiments, simulations of relevant modern silicon technologies are considered.

Boron implantation at 
{bold} 20 keV 
is widely used  in silicon technologies. Since the experiment setup involves low temperature such as 800C, 
the effects of boron immobilization and desactivation at high concentration take place. Thus, the three 
parts of the PLS model have to be used.

A comparison between 
{bold} chemical 
and 
{bold} electrically active 
boron concentration shows that
even below the solid solubility, most of the dopant stay inactive due to the formation of mixed 
dopant-defect clusters 
{bold} (BIC) 
at high concentrations. By comparing resuls obtained with only CDD or IC model with the full PLS (IC + DDC), it can 
be concluded that this type of 
cluster also consumes free interstitials which leads to 
{bold} reduction 
of the boron  diffusion.

This proves one more time that all three parts of the model: classical, interstitial clusters, and mixed dopant-defect 
clusters,  are needed to accurately simulate the 
post-implant diffusion.

The initial 
{bold} interstitial 
profile generated by the boron implant is modeled though a "+1" model.

To activate the new advanced diffusion model, specify 
{bold} PLS IC DDC 
in the 
{bold} METHOD 
statement before the diffusion step to take into account CDD, IC and BIC models.

To load and run this example, select 
{bold} Load example button
. This action will copy all associated files to your current working directory. Select the Deckbuild 
{bold} run 
button to execute the example.

{subsection} advdifex05.in : 2 keV Boron Implant/Diffusion Simulation Using PLS Model

Requires: SSuprem 4 with DIFSIM Module
{newline}
Minimum Versions: Athena 5.21.2.R

Once the validity of entire 
{bold} PLS 
diffusion model has been proved using specific experiments, simulations of relevant modern integrated 
circuits technologies are addressed.

A most aggressive technology simulation has been carried out, with a 
{bold} 2 keV 
boron implant with a dose of 1E14 atoms/cm^2 followed by a 
{bold} RTA 
at 1000C during 10 seconds. This type of simulation is difficult because it needs to take into account 
a large number of phenomena including 
{bold} defect recombination 
at the surface, and the fact that TED duration is a function of the implant setup and subsequent diffusion duration. Despite 
these difficulties, the model exhibits an excellent behavior with regard to experimental annealed data which proves its relevance.

The initial 
{bold} interstitial 
profile generated by the boron implant is modeled though a "+1" model.

To activate the new advanced diffusion model, specify 
{bold} PLS IC DDC 
in the 
{bold} METHOD 
statement before the diffusion step to take into account CDD, IC and BIC models.

To load and run this example, select 
{bold} Load example button
. This action will copy all associated files to your current working directory. Select the Deckbuild 
{bold} run 
button to execute the example.

{subsection} advdifex06.in : Simulation of Phosphorus Predeposition Using PLS Model

Requires: SSuprem 4 with DIFSIM Module
{newline}
Minimum Versions: Athena 5.21.2.R

To illustrate the improvements that result from an
{bold} advanced diffusion model
, we show simulations of phosphorus predeposition profiles at high and intermediate concentrations. The 
simulation results are compared to the SIMS data of Yoshida and Matsumoto.  This
experiment is representative of high dopant concentration features which reveal 
the complex couplings between dopants and point defects. It is therefore considered a meaningful test for advanced diffusion models.

As our simulations prove, the PLS model accurately reproduces the features of the 
experimental profiles. In particular, the simulated profiles exhibit the enhanced tail, with 
more or less pronounced inflexion in the surface region. This inflexion is the result of the 
strong coupling between the defect gradients and the dopant. 

To activate the new advanced diffusion model, specify 
{bold} PLS 
in the 
{bold} METHOD 
statement before the diffusion step to take into account Classical Dopant Diffusion models.

To load and run this example, select {bold} Load example button. This action will copy all 
associated files to your current working directory. Select the Deckbuild 
{bold} run 
button to execute the example.

{subsection} advdifex07.in : 2 keV Arsenic Implant/Diffusion Simulation Using PLS Model

Requires: SSuprem 4 with DIFSIM Module
{newline}
Minimum Versions: Athena 5.21.2.R

Arsenic implantation is performed with an energy of 2 keV at a dose of 1E15 at/cm^2 and 
followed by a RTA at 1000C during 10 seconds.
All characteristics of arsenic diffusion have been taken into account i.e.:

- Arsenic migrates both via interstitial and vacancy mechanisms with approximately the 
same proportion;

- Arsenic atoms form with vacancy any clusters As2V or As4V;

- Above the solid solubility limit, most of the arsenic quickly precipitates which 
implies an inactivation and an immobilization for most of the dopant at high 
concentration.

The inititial interstitial profile generated by the arsenic implant is modeled though a 
simple 'plus one' model.

To activate the new advanced diffusion model, specify 
{bold} PLS IC DCC SS 
in the 
{bold} method 
statement before the diffusion step to take into account Classical Dopant Diffusion, IC, arsenic 
clusters and solid solubility models.

To load and run this example, select 
{bold} Load example 
button. This action will copy all 
associated files to your current working directory. Select the Deckbuild 
{bold} run 
button to execute the example.

{subsection} advdifex08.in : Simulation of Boron Predeposition using 2D PLS Model

Requires: SSuprem 4 with DIFSIM Module
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the PLS model in a test 2D structure.

To load and run this example, select 
{bold} Load example 
button. This action will copy all 
associated files to your current working directory. Select the Deckbuild 
{bold} run 
button to execute the example.



{subsection} advdifex09.in : 2 keV Boron Implant/Diffusion Simulation Using 2D PLS Model

Requires: SSuprem 4 with DIFSIM Module
{newline}
Minimum Versions: Athena 5.21.2.R


This example demonstrates a low energy boron implant with subsequent RTA using the PLS model in a test 2D structure.

To load and run this example, select 
{bold} Load example 
button. This action will copy all 
associated files to your current working directory. Select the Deckbuild 
{bold} run 
button to execute the example.



{subsection} advdifex10.in : 2 keV As Implant/Diffusion Simulation Using 2D PLS Model

Requires: SSuprem 4 with DIFSIM Module
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates a low energy arsenic implant with subsequent RTA using the PLS model in a test 2D structure.

To load and run this example, select 
{bold} Load example 
button. This action will copy all 
associated files to your current working directory. Select the Deckbuild 
{bold} run 
button to execute the example.



{subsection} advdifex11.in :  PMOS with Arsenic HALO Simulation Using 2D PLS Model

Requires: SSuprem 4 with DIFSIM Module
{newline}
Minimum Versions: Athena 5.21.2.R


This example demonstrates a PLS model simulation in a test PMOS structure.

To load and run this example, select 
{bold} Load example 
button. This action will copy all 
associated files to your current working directory. Select the Deckbuild 
{bold} run 
button to execute the example.






{section} Athena_OXIDATION : Oxidation Process Simulation


{subsection} anoxex01.in : Evolution of a Bird's Beak in Recessed SILO 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the bird's beak profile evolution for a
Recessed SILO process. A nitride mask is deposited and patterned. A
recess into the silicon is then performed using a sequence of etch
statements.

SSuprem 4's ability to dump a structure after a specified number of
time steps and 
{bold} TonyPlot's 
movie function are used to show the formation of the
growing birds beak.  This is accomplished by specifying
{bold} DUMP 
and 
{bold} DUMP.PREFIX 
parameters in the 
{bold} DIFFUSE 
statement.

To watch the movie, first select "Select all plots" from the "View"
popup, and then select "Movie.." from the "Tools" popup. Evolution of the
vertical oxidation velocities is also shown in the movie. This was achieved
by saving a set file with the Y velocity contours. This file is called anoxex02.set.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} anoxex02.in : Mixed Ambient Oxidation 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates 
SSuprem 4's ability to perform oxidation in
mixed gas ambients.  The gas flows can be specified in relative units
for each flow of oxygen, water, hydrogen, and nitrogen by the parameters
{bold} F.O2, F.H2O, F.H2, 
and 
{bold} F.N2 
on the 
{bold} DIFFUSE 
statement.

For this example, the oxidation step is performed several times using
SSuprem 4's 
internal looping capability to specify  a different gas mixture
each time the loop is executed.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} anoxex03.in : Doping Dependent Oxidation Rate

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the effect of dopant in silicon on oxidation rate.
High levels of phosphorus (>1e20) accelerate the oxidation rate on the substrate. 

No special model commands are required to activate dopant dependent
oxidation. The parameter
{bold} grid.ox 
controls the gridding in the grown oxide. 


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.



{subsection} anoxex04.in : Polysilicon Oxidation 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the simultaneous oxidation of polysilicon and
silicon.  This example also shows the lifting of polysilicon as a small
bird's beak is formed.

The example begins by forming a structure that is a sandwich of
polysilicon, oxide, and silicon with a recessed area in the exposed
silicon. Prior to oxidization, the coefficients for polysilicon
oxidation are modified using the 
{bold} oxide 
statement.

The structure is then oxidized to show the polysilicon oxidation
model. The dump parameter of the diffuse statement causes 
{bold} SSuprem 4 
to save a structure file after each time step. The dump.pre parameter 
specifies that the name of these structure files will be of the
form anoxex09mxxx.xxx.str where xxx.xxx is the current total time
of the diffusion step. This allows the making of a movie using the MOVIE
capability of
{bold} TonyPlot
.    

The second 
{bold} TonyPlot 
statement loads intermediate files for a movie.
To watch the movie, first select "Select all plots" from the "View"
popup and then select "Movie.." from the "Tools" popup.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anoxex05.in : Poly Buffered LOCOS (PBL) 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the use of 
SSuprem 4 in modeling a Poly Buffer
Locos (PBL) isolation structure.

The structure is formed by depositing layers to create a sandwich of
silicon, oxide, polysilicon, and nitride.  The nitride is patterned to
expose the area that will be oxidized.  At this point, 
{bold} TonyPlot 
is invoked to display the material structure prior to oxidation.

Next, the structure is oxidized in wet O2 for a time of 120 minutes at a
temperature of 1000 degrees Celsius.

The oxidation completely consumes the polysilicon in the exposed
portion of the simulation and lifts the remaining polysilicon and
nitride.

The final structure is plotted in 
{bold} TonyPlot
.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anoxex06.in : Stress Dependent Oxidation 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the use of 
SSuprem 4 stress dependent
Visco-Elastic Oxidation model. Visco-Elastic, Stress Dependent Models
take longer to run than the default  (
{bold}COMPRESS
) oxidation model
and therefore should only be used when specifically looking at oxides
grown at a temperature of greater than 965C (viscous flow temperature), and
when the oxide profile is critical. Oxidations in this example are
performed with and without the stress dependence. The results of
oxidation using the two models are plotted together using 
{bold} Tonyplot 
to compare
the structures predicted by the two models.

To enable the stress dependent viscous model the syntax required is:
{newline}
{bold} method viscous
{newline}
{bold} oxide stress.dep=t
{newline}


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} anoxex07.in : Effect of Young's Modulus on Bird's Beak 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.17.13.C

This example illustrates a method for tuning the shape of bird's beak
by varying elastic characteristics. This example also demonstrates
how user defined materials can be created and used in Athena.

The example creates a comparison between the default coefficients for
nitride and a user defined material that is similar to nitride but with
modified elastic constants.

The simulation begins with the initial mesh definition in silicon.

Following the 
{bold} INITIALIZE 
statement, a 
{bold} MATERIAL 
statement redefines elastic constants for the new material
{bold} nitride1
. The elastic constant 
{bold} s11.elast
is a reverse value of Young's modulus for non-crystalline materials. This means that the aritficial material 
{bold} nitride1 
is much stiffer than default nitride. 

The new material can now be deposited and patterned just like any other
default material in
{bold} Athena
.
A deposition and an etch of 
{bold} nitride1 
is performed.

Following the patterning of the new material, nitride is deposited and
patterned, so that the structure has the right side with a nitride
barrier to oxidation and the left side with a barrier made of the user
defined stiff material 
{bold} nitride1 
.

The structure is then oxidized and the final structure is plotted.  The
final structure shows that
{bold} nitride1 
is flexed much less than default nitride which results in a different shaped bird's beak on each side.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} anoxex08.in : Effect of Nitride Viscosity on Bird's Beak

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example is a comparison of the effect on oxide growth when varying
the nitride thickness. This effect requires the use of 
{bold} method viscous 


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anoxex09.in : Trench Sidewall Oxidation with Orientation Dependence 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows that the orientation of the wafer will affect the growth
rate of an oxide on trench sidewalls. The orientation od the substrate
is specified by
{bold} init orientation=xyz
. xyz willbe 100, 110 or 111. The rotation of the substrate is
specified by the
parameter
{bold} rot.sub


The method statement parameters
{bold} GRID.OX 
and 
{bold} GRIDINIT.OX 
are used to improve the grid within the grown oxide layer. The thicknesses of
sidewall oxide are extracted for all cases. 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anoxex10.in : Void Formation During Trench Oxidation 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates SSuprem 4's ability to oxidize when colliding
oxide fronts cause a void. A narrow trench is oxidized until the
opposing oxidation fronts touch.  During the oxidation SSuprem 4 saves
the structure after each time step. These saved structures as well as the
final structure are used to monitor the moving boundary progress.

To watch the movie, first select "Select all plots" from the "View"
popup and then select "Movie.." from the "Tools" popup.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.






{subsection} anoxex11.in : SWAMI Isolation Using Stress Dependent Oxidation 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the use of the stress dependent oxidation
model in 
SSuprem 4 
to simulate an isolation oxidation using a SWAMI
process.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.





{subsection} anoxex12.in : Controlling Encroachment using Oxidation Threshold

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example specifies that oxidation only occurs when oxidant concentration 
is above a certain value.

Two oxidation threshold values are used in this example along with a
run using the default model. The threshold model is enabled by:
{bold} method ox.thresh

Parameters for the model are set by material and separately for wet and
dry oxidations using the statement
{bold} oxide  min.oxidant=<value> 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anoxex13.in : Stress Dependent Oxidation for Mesa Isolation Process

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R


This example demonstrates effect of the stress dependent
Visco-Elastic Oxidation model (see also example anoxex06.in) on oxidation in a deep trench etched in the SOI (buried oxide) subsrate.  Oxidations in this example are performed with and without the stress dependence. The results of
oxidation using the two models are plotted together using 
{bold} TonyPlot 
to compare
the structures predicted by the two models.

To enable the stress dependent viscous model the syntax required is:
{newline}
{bold} method viscous
{newline}
{bold} oxide stress.dep=t
{newline}


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{section} ATHENA_STRESS : Stress Simulation Examples


{subsection} anstex01.in : Substrate Shear Stress 

Requires: SSuprem 4
Minimum Versions: Athena 5.21.2.R

This example demonstrates  the ability to calculate shear
stress as a result of an overlying nitride layer.  The results of the
calculation are plotted using 
{bold} TonyPlot 
to display contours of the XX component of stress.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anstex02.in : Stresses in a Buried-SiGe Strained-Silicon MOSFET. Part 1.  

Requires: SSuprem 4
Minimum Versions: Athena 5.21.2.R

This example demonstrates the simulation of stresses in a test MOSFET structure with
 embedded anSiGe layer. The simulated process includes epitaxial growth of thin 
compressed SiGe and relaxed silicon layers. The standard gate stack is then emulated by 
gate oxide and poly deposition and oxide spacer formation.  All important geometrical 
characterisics of the test structure, including thicknesses of different layers, spacer width, gate length, etc.,
are parametrized. This allows us to investigate the effects of parameter
 variations on important device characteristics using either DBInternal capability of Deckbuild or Virtual Wafer Fab (VWF).
The set values of all parameters approximately correspond to those used
to simulate Figs. 2. and 3 in 
{bold} [1]
.  

The most important step of this test process is etching of the source/drain areas because 
it creates free surfaces on the sides of the buried SiGe layer. This step results in 
elastic expansion of the buried layer, reducing the compressive stress inside the 
layer and generating tensile stress in silicon above, i.e. under the gate. This 
enhanced tensile stress affects carrier transport and effectively improves device 
characteristics. The stresses in the whole structure are  calculated before and after the S/D etch. 

The results of the calculation are plotted using 
{bold} TonyPlot 
to display 2D contours of the XX component of stress in the final structure. The second plot compares stress profiles (obtained by 
{bold} Extract ... curve
statements and measured in MPa) through the center of the gate before and after the S/D etch step. 

The series of
{bold} Extract
statements calculate the average stresses under the gate. The first 2 extract statements estimate 
average stress at specified depth under the gate. Next 2 extract statements estimate 
average stress inside a box under the gate. 

The last extract statement calculates the important figure of merit of this 
process, i.e. the stress transfer efficiency (STE) specified as absolute value of 
the ratio between the average stresses under the gate and initial stress in the SiGe 
buried layer.  

{bold} [1] J.G. Fiorenza, et.al. "Detailed Simulation Study of a Reverse Embedded-SiGe Strained-Silicon MOSFET", IEEE Trans. on Electron Devices, v.55, No.2, p. 640, (2008).

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} anstex03.in : Stresses in a Buried-SiGe Strained-Silicon MOSFET. Part 2.  

Requires: SSuprem 4
Minimum Versions: Athena 5.21.2.R

This example is similar to the previous example anstex02.in. There are three main differences: 

1. This example demonstrates the use of the STRESS.HIST method instead of several STRESS statements.

2. It calculates dopant induced intrinsic stresses based on Germanium fraction in Silicon instead of user-defined intrinsic stresses in the SiGe layer. This is achieved by specifying 
{bold} DOPANT.STRESS
parameter in the METHOD statement. 

3. It uses more realistic angled etching of source/drain area.

Two additional process parameters, 
{bold} Ge_fraction 
and 
{bold} etch_angle, 
are introduced. These parameters could be used for further optimization of the process.
It is interesting to note that if a realistic 70-75 degrees etch is applied the stress 
transfer efficiency (see previous example) could be increased by 12-15% in some cases.

The results of the calculation are plotted using 
{bold} TonyPlot 
to display 2D contours of the XX component of stress in the final structure. 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

























{section} Athena_COMPOUND : Compound Semiconductor Process Simulation  


{subsection} ancoex01.in : Ion Implant Tilt Angle Dependence 

Requires: SSuprem 4, MC Implant
{newline}
Minimum Versions: Athena 5.21.2.R

This example calculates 10 keV Be implant profiles in GaAs for 0 and 7 degrees 
implant angles. The BCA implant model is used. The results show that ion channeling is very pronounced for light Be ions. 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.



{subsection} ancoex02.in : Ion Implant Dose Dependence 

Requires: SSuprem 4, MC Implant
{newline}
Minimum Versions: Athena 5.21.2.R

This example calculated 10 keV Si implant profiles in GaAs for 3 implant doses:
1e14, 5e14, and 2.5e15 ions/cm**3. The damage accumulation with the implant dose decreases the number of channeling ions which results in relatively smaller channeling tails.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} ancoex03.in : GaAs MESFET Gate Simulation in 1D

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example simulates a simple 1D GaAs Mesfet structure underneath the gate. 
Carbon is used as background dopant in the INIT statement. Beryllium and silicon are implanted into GaAs using the analytical implant model. Next the anneal step is performed using the default Fermi method. 

The hump in the beryllium profile where it intersects with silicon profile is due to the electric field effect. 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.



{subsection} ancoex04.in : Zinc Diffusion in N-type Indium Phosphide

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the effect of n-type doping on Zinc diffusion in InP. 

It has been found that the main diffusion mechanism for Zn in A3B5 compounds 
is via doubly charged interstitial pairs. This means that Zn diffusivity is 
proportional to the second power of hole concentrations. Therefore, high  
background n-type doping concentration results in strong retardation of zinc
diffusion. Also, the Zn diffusion profile drops abruptly when n- and p-type
concentrations are close to each other near the pn-junction. The diffusivity
coefficients DIPP.0 and DIPP.E are selected to approximately match experimental
data from G.J. van Gurp et.al. J. Appl. Phys., v.61(5), p.1846 (1987). 

The simulation results for high n-type levels are in a reasonable agreement 
with the experiments from this paper as well. Other effects may influence 
these simulations. For example, the activation mechanism in this case can 
be much more complicated than that based on the simple solid solubility 
level set to 1e19 for all impurities. There is evidence that the solid
solubility of Zn may depend on n-type doping level as well. In any case, this
example is a good starting point for calibration of impurity diffusion effects
in A3B5 compounds.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.















{section} Athena_Elite : 2-D Topography Simulation


{subsection} anelex01.in : Deposit Machine Comparison 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of six different deposit machines:
unidirectional, planetary, dual directional,  hemispherical,
CVD, and conical.
The resulting structures are plotted for comparison.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex02.in : Unidirectional Deposit Example 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example uses the unidirectional deposit model with incident
angles of 0, 45, -45, and 80 degrees from the surface normal.
The unidirectional model uses a cosine law deposit that 
is applicable to line of sight deposition.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex03.in : Trench Etching: A Simple Approach 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

Simple directional etching can be modeled by combining two etch rate 
components: isotropic and directional. By selecting positive or negative
values for the isotropic component, you can model trench etch with 
undercuts or conical sections such as demonstrated in this example. 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex04.in : Trench Etching Using the RIE Model 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates simple trench etching using a combination 
of isotropic and directional etch components. The initial structure 
was created in three steps. The 
{bold} INITIALIZE 
statement defines 
silicon as the substrate material and specifies the structure dimensions. 
The second step is a simple vertical deposition. The third step models 
lithography in a very simple manner. An opening with critical dimensions 
of 0.8 um and sidewall a slope of 89 degrees is created with the 
{bold} ETCH 
statement.

The RIE was performed in two steps. The first step has a high 
isotropic component.  This produces a 
rounded profile with undercutting. The second portion has a high
directional component.
This produces a quick and dirty simulation 
of a strawberry shaped profile that is observed experimentally.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex05.in : Microloading Effects 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

The angular distributions obtained from the Monte Carlo simulation 
may be approximated by a Gaussian distribution overlaid by a strong 
peak at 0 degrees. Using such an approximation or using the original 
distribution obtained from the Monte-Carlo program for the calculation 
of local ion flux results in strawberry-shaped profiles.  
They have rounded bottoms and a barrel-like underetching in the upper
part of the trenches. A microloading or proximity effect can be seen.
Small feature sizes have a lesser etch rate than wide feature sizes.
The maximum etch rate can only be reached in a distance from the mask
feature that is large compared to the etch depth. 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex06.in : Comparison of RIE Model Components 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates simple trench etching using the
{bold} RIE 
etching model.
The input file consists of four parts.

The first part produces the initial
multilayered structure using the 
{bold} Athena INITIALIZE, DEPOSIT, 
and 
{bold} ETCH 
statements. In the first step, the 
{bold} INITIALIZE 
statement defines silicon as a substrate 1.0 micron thick and 2 microns wide.

The second step is a simple vertical deposition of photoresist. The third step models lithography in a very simple manner.
An opening with critical dimensions of 0.6 um and a sidewall slope of 87 degrees is created with the 
{bold} ETCH 
statement. The second part demonstrates an example of 
{bold} WET 
or isotropic etching, which is modeled using the parameter
{bold} ISOTROPIC 
e.g. 
{bold} rate.etch machine=ad1 silicon a.s rie isotropic=50.0

The third part shows anisotropic (directional) etching using the parameter
{bold} DIRECTIONAL 
e.g.
{bold} rate.etch machine=ad1 silicon a.s rie directional=50.0
The last part illustrates chemical etching using the parameters
{bold} CHEMICAL 
and
{bold} DIVERGENCE 
, e.g.
{bold} rate.etch machine=ad1 silicon a.s rie chemical=50.0 divergence=5 
where 
{bold} CHEMICAL 
is the rate and
{bold} DIVERGENCE 
is the standard deviation in degrees of a Gaussian distribution of ions 
with angle, incident upon the surface.
The simulation results appear on the joint plot at the very end of simulation.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex07.in : Effect of Beam Divergence on Etch Rates

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R
 
This example demonstrates simple trench etching using the
{bold} RIE 
etching model. The example illustrates the influence of the
{bold} DIVERGENCE 
parameter on the final profile obtained by the
{bold} CHEMICAL 
etch mode.
The input file consists of four parts. The first part produces the initial
multilayered structure using the 
{bold} Athena INITIALIZE, DEPOSIT, 
and 
{bold} ETCH 
statements. The 
{bold} INITIALIZE 
statement defines silicon as a substrate 1.0 micron thick and 2 microns wide.
The second step is a simple vertical deposition of photoresist. The third step models lithography in a very simple manner.
An opening with critical dimensions of 0.6 um and a sidewall slope of 87 degree is created with the 
{bold} ETCH 
statement.

The second part demonstrates an example
of  chemical etching, modeled using the parameter
{bold} CHEMICAL 
e.g. 
{bold} rate.etch machine=ad2 silicon a.s rie chemical=50.0 divergence=0.1 
The third part shows the same etching mode, except the parameter
{bold} DIVERGENCE=10 
The last part illustrates the same etching mode with
{bold} DIVERGENCE=45

The simulation results appear on the joint plot at the very end of the simulation.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex08.in : Trench Etch Tuning using RIE Model 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates etching using the
{bold} RIE 
etching model. The example illustrates the influence of the
{bold} DIVERGENCE 
of the ion beam on the final profile obtained by the
{bold} DIRECTIONAL 
etch mode.
The angular distribution of the ions coming down to the wafer is assumed
to be Gaussian. Parameter
{bold} DIVERGENCE 
sets the standard deviation of the distribution function (in degrees).
The input file consists of two major parts. 

The first part creates the initial
multilayer structure using the 
{bold} Athena INITIALIZE, DEPOSIT, 
and 
{bold} ETCH 
statements. The 
{bold} INITIALIZE 
statement defines silicon as a substrate 1.0 micron thick and 2 microns wide.
The second step is a simple vertical deposition of photoresist. The third step models lithography in a very simple manner.
An opening with critical dimensions of 0.6 um and a sidewall slope of 87 degree is created with the 
{bold} ETCH 
statement.
 
The second part of the input file demonstrates an example of 
{bold} RIE 
etching simulation using the parameters
{bold} DIRECTIONAL
, 
{bold} ISOTROPICAL
, 
{bold} CHEMICAL
, 
and
{bold} DIVERGENCE
. 
{bold} DIVERGENCE 
determines the standard deviation of the ion's Gaussian angular distribution function for the 
{bold} CHEMICAL 
component of the 
{bold} RIE 
etch model.
This example shows a number of simulations with a variation of the
of the three etching components:
{bold} DIRECTIONAL
, 
{bold} ISOTROPICAL 
and
{bold} CHEMICAL 
etch rates.

The simulation results appear on the joint plot at the very end of the simulation.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex09.in : Trench Filling and Planarization 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

A simple trench filling, planarization, and etch back is demonstrated 
in this example. The initial trench profile was defined using the 
{bold} ETCH 
statement with a bottom critical dimension of 0.6 um 
and 87 degree sidewall slopes.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex10.in : Ion Milling of Aluminum 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates Athena/Elite ion milling using the 
{bold} RIE 
model. Ion milling shows a strong directional dependence. For this example, 
the incoming ion flux is vertical.  This is modeled by
using the 
{bold} RIE 
model with a directional component only.  This results 
in a vertical penetration.

A machine called 
{bold} ionmill 
is defined and applied to the window 
structure.  After each one minute etch, a structure file is saved.
Following the last ion milling step, the structures are plotted sequentially.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex11.in : Two-Step Trench Etch Process 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example simulates trench etching. Etching is described by a
combination of wet etching (30nm/min) and ion induced etching
(100nm/min). 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex12.in : Lift-off Profile Polymer Etching 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

The example described in this section originated from studies accompanying 
the development of a lift-off resist profile for sub-micron MESFET 
fabrication using a tri-level resist technique. The goal of this process 
development is to get the lift-off profile in the bottom resist of 
the tri-level system without using special e-beam exposure techniques 
or multi-layer e-beam resists.

The resist system used instead is quite simple. The bottom layer 
is a hard baked standard Novolac or polyimide resist covered with a 
silicon nitride intermediate layer. This intermediate layer is used 
during the etching process as a hard mask. The top layer is a PMMA
resist structured by conventional electron beam lithography. The top 
PMMA resist is stripped and etching begun.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex13.in : Interconnect Metalization 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example performs a sequence of deposition and etch steps corresponding
to a double metal power IC process.  The step coverage and topography of 
the second metal level is critical in determining the success of the process.

This example compares the structures created by two final metalization 
techniques.  The first technique includes surface diffusion that would result
from a high temperature during deposition or from increased temperature or 
RF bias.  The second technique does not use surface diffusion.
The improved step coverage due to surface diffusion is evident from the 
plots produced.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex14.in : MOS LDD Spacer Formation 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example simulates poly gate etching and spacer formation. The 
structure is initialized, a stack of layers is deposited, a photomask 
is patterned, and a directional etch of polysilicon is performed. The 
photoresist is removed, the oxide is deposited using CVD with a step 
coverage of 70%, and finally a highly directional oxide etch is performed.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex15.in : Metal Passivation 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example simulates metal passivation. The presence of defects 
(metal feet) on the sides of the metal line causes cracks in the deposited 
insulator that could be a source of corrosion or inter-level shorts.

By contrast, sputtering on a hot substrate can prevent crack formation. 
{bold} Elite 
models the effect of the hot substrate by incorporating 
surface diffusion using the 
{bold} SIGMA.DEP 
parameter.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex16.in : Intermetal Dielectric Formation 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of two conductors (poly and aluminum) that 
come close together. The narrow gap between them can form voids as 
demonstrated in this example for atmospheric pressure CVD. 
The type of inter-metal dielectric material, the thickness of this 
dielectric, and the method of insulation can have an impact on design 
rules for ICs with multi-level metalization.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex17.in : Custom Deposit 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of the
{bold} CUSTOM2 
 deposition model which allows us to specify an angular distribution of deposition flux. 
The data files anelex17*.dat are used to read in a user defined
set of angle vs. deposition rate parameters.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex18.in : Trench Etch 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of 
{bold} Elite 
to model trench etching.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex19.in : Contact Etch, Reflow, and Metalization 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of 
{bold} Elite 
to model a contact opening by using an
isotropic etch followed by a directional etch. This results in an opening
that has edges that may be prone to metal thinning during interconnect metal
deposition.  To reduce this effect, reflow is performed using the 
{bold} Elite 
reflow model.  This is accomplished by specifying 

{bold} material oxide visc.0=1.862e-20 gamma.reflo=1e3 reflow 

{bold} method viscous 

{bold} diff time=10 temp=950 reflow 

which invokes a time temperature cycle that calculates the effects of surface
tension on the structure.

Following reflow, the metalization is performed using a simple
CVD model that is characterized using deposit rate and step coverage
parameters.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex20.in : Sticking Coefficient for Monte Carlo Deposit 

Requires:  Elite, MC DEPOSIT/ETCH
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of 
{bold} Elite 
to model deposit into a test structure 
with changing sticking coefficient.  The step coverage varies as a function 
of the sticking coefficient in a complex manner as a function of geometry.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex21.in : Surface Diffusion for Monte Carlo Deposit 

Requires:  Elite, MC DEPOSIT/ETCH
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of 
{bold} Elite 
to model deposit into a test structure 
with surface diffusion.  The deposit gradually fills the hole in the 
structure so that deposit into the hole is reduced.  This results in 
a tip structure whose sharpness is a function of the surface diffusion.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex22.in : Monte Carlo Deposit into Contact Cut

Requires:  Elite, MC DEPOSIT/ETCH
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of 
{bold} Elite 
to model deposit into a test structure 
with an atomistic level surface repositioning calculation.  Individual 
particle resting places can be seen in the final structure plots.
Increasing the surface diffusion parameter, 
{bold} SIGMA.DEP
, changes the resulting density due to atom re-positioning.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex23.in : Monte Carlo Deposit on Sloped Sidewall

Requires:  Elite, MC DEPOSIT/ETCH
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of 
{bold} Elite 
to model deposit onto a test structure 
with an atomistic level surface repositioning calculation.  Individual 
particle resting places can be seen in the final structure plots.
Increasing the surface diffusion parameter, 
{bold} SIGMA.DEP
, changes the resulting density due to atom re-positioning.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex24.in : Customizable Deposit from an ASCII File 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of 
{bold} Elite 
to model a customizable deposit. Input is performed via an ASCII file containing angle and rate information.

The example begins by creating a test structure using geometrical etch with a 
{bold} START CONT DONE 
sequence of 
{bold} ETCH 
statements.  This creates a globe on which deposition will be performed 
and compared.  The globe is then deposited with rates that are included
in a data file using the 
{bold} CUSTOM1 
model.  
The first data file anelex24_1.dat specifies that the deposit rates will be constant
at all angles except at a single angle (-45 degrees) where the rate is ten times higher.

A second data file anelex24_2.dat specifies cosine rate distribution with a maximum rate in the vertical direction. 
Finally, the deposit is repeated using a standard unidirectional model.  

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex25.in : The Hard Polish Model 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of 
{bold} Elite 
to model chemical mechanical polishing using the hard polish model.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex26.in : The Soft Polish Model 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of 
{bold} Elite 
to model chemical mechanical polishing
using the soft polish model. This example calculates results for the 
the soft polish model so that they can be compared to the published
results by J. Warnock, "A Two Dimensional Process Model for Chemimechanical
Polish Planarization", Electrochem. Soc. Vol 138, No. 8, August 1991.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex27.in : Hard and Soft Pad Modeling Using the Soft Polish Model 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of 
{bold} Elite 
to model chemical mechanical polishing
using the soft polish model. A hard polishing pad is simulated by setting 
LENGTH.FAC = 30. The soft pad uses LENGTH.FAC = 4.2. LENGTH.FAC is a 
measure of the flexibility of the pad.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex28.in : Multi-layer CMOS structure  

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the use of a global shrink parameter with application to a simple multi layer interconnect structure sitting on top of some CMOS 
transistors.


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} anelex29.in : Simple Plasma Etched Trench with Sidewall Implant

Requires:  Elite, MC DEPOSIT/ETCH
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the use of plasma etching to etch a simple
trench structure.

The example etch machine uses a Monte Carlo simulated plasma model to
describe the angular ion distribution incident on the substrate surface.
At each point on the surface, an angular "window" of visibility is
calculated.  This window of visibility is used in the integration of
the angular distribution to calculate the etch rate.

Each surface string is then moved and remeshed at the end of the
etch step. This windowing, ray tracing technique is highlighted in this
example if you change the SPR500 resist thickness.

After trench etch, the structure is implanted at an angle and the
trench is oxidized. This highlights the ability of Elite to perform
physical etch alongside oxidation and implant functions.

In the first
{bold} rate.etch 
command, the parameters for the plasma etcher are defined.  These
parameters define the characteristics of the machine and are used to
calculate the ion angular and energy distributions which, in turn, are
used to calculate the ion flux at each point on the surface during
etching.

The first parameter,
{bold} plasma 
is used to select the plasma etching model.

The parameters for the Monte Carlo plasma etching simulation are 
{bold} pressure 
in mT which will effect the mean free path and
therefore the fractional angular window "seen" by the plasma
by a given surface string element.

{bold} tgas 
is the gas temperature in Kelvin and and will effect the 
pressure and hence the mean free path calculation.

{bold} tion 
is the temperature of the ion and is typically at a higher value
than that of the gas.

{bold} vpdc 
is the specified DC bias on the cathode electrode. This will
control the energy and angular anisotropy of the incoming ions energy.

{bold} vpac 
is the AC component of the electrodes bias.

{bold} lshdc 
in meters is the mean debye sheath thickness.

{bold} lshac 
is the alternating component of the sheath thickness in meters.

{bold} freq 
is the AC frequency of the RF power supply in MegaHertz.

{bold} nparticles 
is the number of Monte Carlo particles used in the calculation.

{bold} mgas 
is the gas atomic mass in AMUs. This is used in the collision calculation
and will affect the momentum transfer characteristics.

{bold} mion 
is the atomic mass of the ion in AMUs.

{bold} elec.model 
selects the type of plasma electric field model to be used. Here
there are four options,

{bold} constant, linear, collision, child
. These four models respectively include Constant, Linear electric field
models and then Collision dominated and collisionless Child-Langmuir
models for the spatial dependence of the electric field.

{bold} energy.div 
relates to the number of energy divisions for the energy distribution.

{bold} angle.div 
relates the the number of angular quantizations for the angular energy
distribution.

{bold} qio 
is the momentum transfer cross section in meters^2.

{bold} qcht 
is the charge exchange cross section in meters^2.

Subsequent
{bold} rate.etch 
statements define the parameters for each of the materials etched.

When the plasma model is invoked, the angular window calculation is very 
important to the final profile. The Thickness of the photoresist, in this
example, will determine largely the angular ion energy distribution via a 
resist 
shadowing calculation. Thus, making the resist thicker will result in less 
'bowing' of the sidewall. Try making the resist thinner to say, 0.1 um to 
see this effect.


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} anelex30.in : Dopant Concentration Enhanced Etch Rate

Requires:  SSUPREM4, Elite, MC DEPOSIT/ETCH
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the used of dopant enhanced etching using the Elite
module of Athena.  A simple trench is etched into the silicon substrate
with half of the region of the trench passing through high concentration
Phosphorus.  A normal etch is first performed giving a symmetrical
trench structure.  The simulation is then re-initialized to the pre-etch
state and Phosphorus enhanced etching is defined for the etch machine.
The trench is etched again, but this time the final trench structure is
asymmetrical as the etch rates were enhanced as the surface moved through
the high concentration Phosphorus region.

The dopant enhanced etch rate is defined by the equation

	ERenh = (1 + enh) ER

where ER is the normal (un-enhanced) etch rate and enh is the
enhancement due to the dopant.  This enhancement is calculated as a
function of the dopant using the equation:

	enh = 0.5*Enh.Max*(tanh(Enh.Scale*(S - Enh.MinC)) + 1)

where the parameters have the following meanings

{bold} Enh.Max 
defines the maximum enhancement factor

{bold} Enh.MinC 
gives the solution value below which enhancement decays

and
{bold} Enh.Scale 
gives the spread of the enhancement over solution values, i.e., how
quickly does the enhancement factor reach its maximum.

For exponentially varying solutions, S and Enh.MinC are used as a logarithm.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex31.in : Oxidation Induced Stress Enhanced Etch Rate

Requires:  SSUPREM4, Elite, MC DEPOSIT/ETCH
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the stress enhanced etching using
the Elite module of Athena.  A simple trench is etched into the silicon
substrate through a region near a bird's beak.  This region 
contains two high Sxy stress areas developed after oxidation. 
Oxidation is simulated using a stress-dependent viscous model. 

A standard 
{bold} RIE 
etching machine is defined using the 
{bold} RATE.ETCH 
statement.
Stress enhancement of the etch rate is specified in the 
{bold} RATE.DOPE 
statement.   

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex32.in : Metal Void Formation 

Requires:  Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the formation of a void in a deposited metal
layer. The input files defines a machine for the metal deposition into
a contact. The machine is described using the hemispherical model.

To activate the formation of any voids in the metal layer the parameter
{bold} void 
is required on the deposit statement. 

The resulting plot shows the void formation and that the subsequent
deposition of a dielectric layer 
{italic} does not fill the void.


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex33.in : Polymer Redeposition Effect 

Requires:  Elite, MC DEPOSIT/ETCH
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates basic capabilities of the Monte Carlo Plasma Etching Module. It shows the effect of polymer redeposition on the etching of a deep trench in silicon.  

Oxide is used as a masking material. First, a 0.4 micron opening is formed in masking oxide. Than, parameters of plasma for machine MCETCH are specified. 
Also, parameters of interaction of incoming ion fluxes as well as polymer 
flux with all materials in the structure including polymer are specified 
in the
{bold} ETCH.RATE 
statement.

After that, 3 minutes of etching is applied to the initial structure with and without
redeposition taken into account. Redeposition is controlled by the
{bold} MC.REDEPO 
parameter.

The resulting plot compares the shape of the trenches obtained with and without
redeposition taken into account. It can be seen that redeposition slows down the etching process. Also, the resulting trench has positive slopes instead of a "barrel" shape.  


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anelex34.in : Polymer Etch Rate and Reflection Effect 

Requires:  Elite, MC DEPOSIT/ETCH
{newline}
Minimum Versions: Athena 5.21.2.R

This example is similar to 
{bold} anelex33.in
. It demonstrates how the characteristics of redeposited polymer affect the etching efficiency and shape of an etched trench. 

The effect of polymer redeposition could be increased either by decreasing
polymer etch rate (parameters
{bold} MC.ETCH1 
and 
{bold} MC.ETCH2
) or by decreasing polymer particle reflection from the polymer layer (parameter
{bold} MC.PLM.ALB
) 

The resulting plot shows that in both cases trench becomes shallower and narrower.    


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.



{subsection} anelex35.in : Effect of Plasma Characteristics 

Requires:  Elite, MC DEPOSIT/ETCH
{newline}
Minimum Versions: Athena 5.21.2.R

This example is similar to 
{bold} anelex33.in
. It demonstrates how plasma characteristics affect etching efficiency and shape of an etched trench. Fluxes of ions and neutrals leaving a plasma sheath are represented by a bimaxwell velocity distribution function. In this approximation higher relative normal plasma temperatures 
{bold} MC.NORM.T1/MC.LAT.T1 
and 
{bold} MC.NORM.T2/MC.LAT.T2 
result in particle fluxes less dispersed in the lateral direction.

In this example only one type of particle is considered. Two normal to lateral temperature ratios are considered: the first is 7:1 and the second is 15:1.   
 

The resulting plot shows that "narrower" plasma ion flux results in a narrower and deeper trench.    


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.




{section} Athena_Optolith : Optical Lithography Simulation 


{subsection} anopex01.in : Aerial Image Simulation 

Requires: SSuprem 4/Optolith 
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the first step in lithography simulation.
A simple mask has been used: two elbows and a contact hole (cd=1 um).
The stepper description corresponds to: Canon FRA-1550, g-line , NA=0.43, sigma=0.5.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} anopex02.in : Arbitrary Source Shapes 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example is a comparison of imaging using a SHRINC source with diagonal and perpendicular orientation of individual sources. The source aerial images are
calculated and compared with each other. Also, maximum normal intensities for both cases are extracted.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex03.in : Planar Lithography with Phase Shift Masks 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows lithography with phase shift masks.
The aerial image is calculated for a 0.3 um contact hole and a 0.3 contact hole
with sub-imageable (0.1 um) 180 degree phase shift outriggers. The use of phase-shifters results in twice double intensity in the center of the 
whole (see the first TonyPlot). Consequently, only the use of phase-shifting technique allows to achieve desirable CD, while the sample without phase-shifters remains underdeveloped.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex04.in : Imaging Using an Annular Illuminator 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example compares DUV lithography using annular and  circular
apertures.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex05.in : Imaging Using Spatial Filtering Techniques 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example simulates DUV lithography using more complicated
annular apertures.

The input deck is composed of two parts.  The first part shows standard imaging, where the Aerial Image was generated using a circular aperture.

The second part of the Input deck repeats the same simulation conditions,
but it uses spatial filtering in the projection system with an annular aperture constructed from five zones.

Note the difference in aerial image data generated by the two parts of the
input deck. The image for the filtered system shows an improved quality for
smaller CDs when compared with the image for the circular aperture.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex06.in : Aberrated Aerial Image 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example simulates an aerial image for a projection system that has
0.5 lambda "astigmatism", and the position of the image patch under consideration 
is located at the upper right boundary of the circular image field.

The input deck is composed of two parts: simulation of the aerial image 
without and with aberrations (astigmatism).

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex07.in : SHRINC from Circular Sources 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of arbitrary source positions to make a
SHRINC-type source.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex08.in : Aerial Image of of Arbitrary Shaped Masks

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R


{bold} NOTE: 
This example works only on UNIX/LINUX computers. 

This example demonstrates the capability of calculating the image of a mask which
consists of several polygons of arbitrary shape. The mask is designed 
in MaskViews and stored in the layout file anopex08.lay. Note that some the
of polygons are set to have 50% transmittance. 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex09.in : Superposition of Multiple Images 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonsrates imaging using a SHRINC illumination aperture where images with different defocus values are superimposed.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex10.in : SHRINC Source for 45 Degree Lines 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the effect of a SHRINC imaging system on 
two sets of lines that are at 45 degree angles to each 
other.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex11.in : Swing Curves for CD Variation with Resist Thickness 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates CD variation as a function of resist thickness.
This is due to reflection effects inside the resist. This example should be 
compared with the results from anopex12.in.
The example uses DBInternal capabilities to generate a swing curve for resist 
thickness variation from 0.9 to 1.2 microns. 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex12.in : Use of AquaTAR for CD Variation with Resist Thickness 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the use of an AquaTAR to minimize reflection 
effects inside the resist. The example uses DBInternal capabilities to 
generate a swing curve for resist 
thickness variation from 0.9 to 1.2 microns. 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex13.in : Demonstration of Multilayer Resists 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the use of multiple resists for a possible
contrast enhancement layer.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex14.in : Imaging of a Complex Mask using MaskViews

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R


{bold} NOTE: 
This example works only on UNIX/LINUX computers. 


This example shows the ability of 
{bold} Optolith 
to simulate aerial image formation
of a complicated mask. The mask is stored in anopex14.lay for use in 
{bold} MaskViews
.
There are two ways of loading mask information into 
{bold} Optolith
:  through the section file anopex14.sec  generated by 
{bold} MaskViews 
or by direct use of 
{bold} MaskViews 
layout file anopex14.lay. Final images are similar. The first approach 
is more appropriate to the Manhattan layout, while second approach is advantageous for layouts with arbitrary polygons.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex15.in : Aerial Image Calculation for Mask Pattern with Non-Manhattan Geometry 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

Calculate the aerial image of a mask with non-Manhattan geometry. This example
includes a 45 degree metal joint and a circular contact opening.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex16.in : Interference Imaging Technique 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of
{bold} Optolith 
to model a technique that utilizes interference created by a mirror 
to form an interference pattern for imaging.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex17.in : Smile Plot Generation 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates how to use DBInternal capabilities to generate 
smile plots. The CDs are extracted for 11 values of defocus for 6
different doses. The smile plot obtained allows us to select the optimum dose
for this lithography process.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} anopex18.in : Demonstration of Multiple Exposures 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates exposure for two wavelengths. The example
shows how imaging and exposure must be performed for each wavelength.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex19.in : Non-planar Lithography 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows non-planar lithography. The effects of exposing photoresist
over a change in topography are demonstrated. The example uses a user defined
aerial image cross section. The intensity data are read from the file 
anopex19.exp. The photoresist is developed, and the effects of the light reflected
off of the 45 degree slope can be seen.  

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex20.in : Resist Flow Model for Post-development Bake 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows planar lithography. The photoresist is baked following 
development to show the flow that takes place.

The plot shows the resist before and after the bake.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} anopex21.in : Demonstration of BPM for Non-planar Lithography 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the dose-dependence effect on patterning over a non-planar structure. The structure with symmetrical trench is created and saved in the
{bold} anopex21.str 
file for subsequent lithography simulation. Also, the intensity distribution corresponding to a simple layout with the main feature aligned with the center 
of the trench is calculated and saved in the 
{bold} anopex21_int.str 
file. 

Two separate exposure-bake-development simulation sequences are performed. The 
first one uses the constant refraction index (n0 = 1.4 + i * 0.02) specified in 
the OPTICAL statement. In the second simulation the refraction index varies 
linearly with dose from n0 to n1=1.6 + i * 0.04. The comparison of final 
structures shows that the "dose effect" could be very strong. In the constant
refraction index case the strong reflections from the walls with subsequent "undercut" during development may even result in complete removal of the feature. 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex22.in : Optimization of Phase Shift Mask 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example uses  the looping capability of DBInternal for optimization of
sub-imageable ( < 0.12 um) 180 degree phase shift outriggers. The example
is based on example anopex03.in. The maximum intensity is extracted as a function
of two parameters: the distance of the shifters from center of the contact
hole mask and width of the shifters. The final hole structures are shown for
all 15 conditions simulated.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anopex23.in : Contact Printing Simulation 

Requires: SSuprem 4/Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates simulation of contact printing for a simple mask consisting of from two elbows and a contact hole (cd=1 um). The parameter
{bold} GAP 
in the 
{bold} IMAGE 
statement specifies the mask-to-wafer gap (in microns) for contact printing.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{section} Athena_COMPLEX : Complex Process Examples

{subsection} anex01.in : Non-planar Optical Lithography 

Requires: SSuprem 4, Elite, and Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example uses
{bold} Optolith  
to show non-planar lithography over a complex topography created using 
{bold} SSuprem 4  
and
{bold} Elite
.

The example begins with a silicon substrate that is 24 microns wide
and 1 micron deep.  Two parameters on the 
{bold} INITIALIZE  
statement specify that the no impurity (geometric) mode and 
the coarse grid mode be employed.  The parameter
{bold} NO.IMP  
specifies that the introduction of impurities
will be bypassed. This results in a much faster calculation for 
many steps and still produces similar topographies to the calculation
including impurities.  For simulations that are concerned
primarily with topography, the no impurity mode can typically 
be applied without loss of significant information.

The parameter
{bold} SPACE.MULT  
specifies that all grid spacings specified by the parameter
{bold} SPACING  
on the 
{bold} LINE 
statement should be multiplied by the specified value.  This results
in a global grid coarsening by the specified factor.  This speeds the 
simulation by reducing the discretization.

The process sequence begins with deposition of a thin oxide 
to model the effect of gate oxidation. Next, nitride is deposited and 
patterned simply by specifying the positions of a vertical 
plane that defines the boundary of the etch region.
Following the nitride patterning, field oxidation is performed
and the nitride mask is stripped.

Next, gate polysilicon is deposited and patterned using the geometric 
etch capability and a structure file is saved.

Following the structure file save, the structure is implanted.  
Since the no impurity mode is being used, the implant step will be 
ignored.  Next, the sidewall spacers are formed by depositing 
oxide and etching it using the vertical etch model.  The source/drain
implant is performed next, but due to the use of the no impurity
mode, it is bypassed. The next step is the source/drain implant anneal.
This step runs much more quickly in no impurity mode.  This is
because impurity diffusion, which typically limits the time step size
during diffusion and causes more equations to be solved, does not
need to be calculated.  

The next step is to deposit spin-on-glass. The glass deposition and 
reflow process are approximated here by performing a deposit that includes
a geometric smoothing performed during the deposit. This is accomplished
by defining an 
{bold} Elite  
machine using the 
{bold} RATE.DEPO  
statement and including the parameters
{bold} SMOOTH.WIN  
and
{bold} SMOOTH.STEP  
as part of the statement. The 
{bold} Elite
machine is invoked by specifying the 
{bold} DEPOSIT  
statement with the 
{bold} MACHINE  
parameter used to specify the previously defined machine.

The next sequence of process steps deposits photoresist, patterns the resist 
with the geometric etch capability, defines a wet etch machine and 
employs that machine on the structure, defines a directional 
etch machine and employs that machine on the structure, saves
the structure, and strips the photoresist.

Following this, a short wet etch is performed to remove fillets from the 
structure, and aluminum is deposited using the 
{bold} Elite
hemispherical model.

Next, photoresist is deposited using the same geometric smoothing approach that is applied to model spin-on-glass reflow. This results in a nearly planar top surface following the resist deposit.
The parameter
{bold} NAME.RESIST  
specifies the type of resist that will be used from the library of
resists included in the models file. In this case, the photoresist
named OiR32 is applied.

After the resist is deposited, the simulation begins the 
{bold} Optolith   
portion of the process. This performs a detailed analysis of the 
photolithographic process of this final structure.  
{bold} Optolith  
simulation begins by performing imaging.  The 
{bold} ILLUMINATION
, 
{bold} ILLUM.FILTER
, 
{bold} PROJECTION
,  and 
{bold} PUPIL.FILTER  
statements describe the illumination system.  The 
{bold} LAYOUT  
statements define two mask features. The parameter
{bold} LAY.CLEAR  
removes any previously defined layout information so that a new layout can be
initialized.  Once the illumination system and the layout have been 
defined, the imaging module is invoked. The 
{bold} IMAGE  
statement invokes the imaging module and specifies the 
window in which imaging will be performed.  The parameter 
{bold} DX  
specifies the discretization along the x-dimension and the parameter
{bold} ONE.D  
specifies that the imaging should consider only one dimension. The 
parameter
{bold} CLEAR  
specifies that the mask should be considered as a clear field
with dark features defined by the 
{bold} LAYOUT  
statements.  

The 
{bold} OPTICAL  
statement defines the index of refraction for BPSG material at
a wavelength of 0.365 microns.  The 
{bold} EXPOSE   
statement performs the resist exposure from the results of the 
imaging module.  

Following exposure, the 
{bold} BAKE  
statement performs post-exposure bake and calculates the diffusion
of the photoactive component.  Finally, resist development
is performed using the 
{bold} DEVELOP  
statement. The 
{bold} MACK 
model is specified along with the development
{bold} TIME  
, number of 
{bold} STEPS 
at which regridding will be performed, and
the number of non-regridded 
{bold} SUBSTEPS  
that will be taken per step.

Finally the results of the simulation are plotted using 
{bold} TonyPlot  
.  The non-ideal features in the photoresist due to reflections from the 
underlying topography can be seen in the lines of resist that remain.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anex02.in : Trench Isolation Example 

Requires: SSuprem 4, Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the fabrication of a trench isolation 
structure using
{bold} Elite 
and 
{bold} SSuprem 4 
to model etching and oxidation processes.  

The example begins with grid definition. This is tailored to 
place fine grid in the area that will be exposed during the trench etch.
The 
{bold} INITIAL 
statement does not specify a material type, so silicon is taken by default.
A background doping of boron with concentration 1.0e15 is specified.
The parameter
{bold} NO.IMP 
specifies that the entire simulation should neglect all processing
steps that introduce dopant into the structure.  This results 
in a much faster calculation for diffusion and oxidation calculations
but will not produce a structure suitable for electrical analysis
because dopant will be left out. This is intended to provide 
a fast mode of calculation that is useful for initial simulations.
The parameter
{bold} SPACE.MULT 
specifies that a coarser grid be used than that specified by the 
{bold} SPACING 
parameter on the 
{bold} LINE 
statements. This also is intended for fast initial runs of the simulator.
To disable these features for a more complete calculation, simply
delete the 
{bold} NO.IMP 
and 
{bold} SPACE.MULT 
parameters from the 
{bold} INITIALIZE 
statement.

Following initialization, a nitride layer is deposited and patterned 
by the 
{bold} DEPOSIT 
and 
{bold} ETCH 
statements. The structure is then reflected to create a symmetric
structure for trench etching.

The trench is performed by defining an etch machine with the
{bold} RATE.ETCH 
statement. For this etch, the etch rates for all materials except 
silicon are assumed to be zero, so only rates for silicon are defined.
If other materials were to be etched, the rates for each material should be 
set with a
{bold} RATE.ETCH 
statement.
For this etch process, the rates are defined for the
{bold} RIE 
model.  This simple model describes the etch process as a combination 
of 
{bold} ISOTROPIC 
and 
{bold} DIRECTIONAL 
components.  The parameter
{bold} U.M 
specifies that the etch rates are given in units of microns per minute.

The etch is then performed for a period of 10 minutes.

Following the etch, the nitride masking layer is removed with the
{bold} ETCH NITRIDE ALL 
statement.

The trench is then filled with a sandwich of materials. First a layer 
of oxide is deposited with the simple conformal model. Then a layer of 
polysilicon is deposited with the 
{bold} Elite 
calculation. Finally, photoresist is deposited using
{bold} Elite 
to model the resist flow.  This is included by adding the parameters
{bold} SMOOTH.WIN 
and 
{bold} SMOOTH.STEP 
to the deposit machine definition.  These two parameters specify
the width over which a simple averaging algorithm will be applied
and the number of times it will be applied respectively.  This results in 
a smoothed profile that is a fast way of modeling the flowing resist
during deposit.

The structure coated with resist has a surface that is nearly
planar.  By applying an etch process that erodes all materials at 
an equal rate, the planarization process can be modeled.  This is 
performed next by specifying the etch rates for an
{bold} Elite 
type calculation using the 
{bold} WET.ETCH 
model.  Following the etch, the grid on the surface of the structure
is relaxed to remove any excess grid that may have been introduced
during the etch process.  The parameter
{bold} DX.SURF 
on the 
{bold} RELAX 
statement specifies the minimum surface segment size in microns for the 
relax operation.

Next, a nitride layer is deposited and patterned to control the area that 
will be oxidized.

Some model parameters are set for the oxidation using the 
{bold} METHOD 
and 
{bold} OXIDE 
statements.  Then the diffusion is performed in two steps, first in 
dry oxygen specified using the 
{bold} DRYO2 
parameter, and then in water, specified by the 
{bold} WETO2 
parameter.

Finally, the structure is plotted using 
{bold} TonyPlot 
and the structure saved to a file.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anex03.in : Comparison of Simple and Realistic Resist Surfaces 

Requires: Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates optical lithography over non-planar topography.  
{bold} Optolith 
is invoked to expose and develop the photoresist.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anex04.in : Metal Patterning Over Non-planar Topography 

Requires: SSuprem 4, Elite, and Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates optical lithography over non-planar topography.  
{bold} Optolith 
is invoked to expose and develop the photoresist.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anex05.in : Multi-level Interconnect Formation 

Requires: SSuprem 4, Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of 
{bold} Elite 
to model a complete interconnect 
system over isolation oxide grown using 
{bold} SSuprem 4
.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anex06.in : Trench Formation and Planarization 

Requires: SSuprem 4, Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of 
{bold} Elite
to model a trench process
using a unique self-aligned process.  The process begins with spacer formation 
over a patterned sandwich of oxide and nitride layers. Next, oxidation 
is performed using the spacer as a mask.  This creates a bird's
beak that extends under the spacer.  After etching the nitride, 
an opening is created by etching enough oxide to remove the 
bird's beak. This opening is used to pattern a trench etch.
The resulting trench is oddly shaped because of the simultaneous
erosion of the silicon and the lateral erosion of the masking 
oxide.

Following the trench formation, an oxide layer is grown.  The structure is 
then filled with oxide.  Planarizing photoresist is deposited next.

Finally, the structure is planarized by eroding all materials with a similar 
etch rate. The sequence of structures is then plotted using 
{bold} TonyPlot
.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example
.


{subsection} anex07.in : Trench Oxidation  

Requires: SSuprem 4, Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of
{bold} Elite 
to model a trench process
using two different etch conditions.
Following the trench formation, an oxide layer is grown.  
Note that "uneven" surfaces resulted from 
{bold} Elite 
etch don't prevent to simulate the oxidation process.

The final structures are then plotted using 
{bold} TonyPlot
.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anex08.in : DevEdit Mesh Adaptation with Elite and SSuprem 4 

Requires: SSuprem 4, Elite, and DEVEDIT
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of 
{bold} DevEdit 
in a mesh adaptation application. A trench is etched with an 
{bold} Elite 
etch machine. A highly doped oxide is
then deposited inside the trench for sidewall doping.  Boron segregation
and transport coefficients are defined. (These parameters may be used
to calibrate the amount of out diffusion of boron.)

A short heat cycle segregates out some of the boron from the oxide
into the silicon trench sidewall.

{bold} DevEdit 
is then invoked to regrid the structure based upon the
concentration gradient of the boron and phosphorous. The weight for
each impurity will determine the distance from the diffusion front that
the grid is refined. These parameters should be used in relation to the
estimated subsequent diffusion profile.

{bold} DevEdit 
is invoked at a point where minimal material boundary points exist to minimize
the mesh density. This is a preferred although not essential method of use.

Next,
{bold} Athena 
is re-invoked and again the segregation and transport
coefficients are defined in the new 
{bold} Athena 
session.

A second diffusion is started, and the boron diffusion front now moves
within the refined mesh region.

{bold} DevEdit 
may be used in this manner to refine at any stage during a process
flow. 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anex09.in : GaAs on Silicon Process 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of 
{bold} Athena 
in a GaAs on Silicon example.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anex10.in : Trench Etching and Lithography 

Requires: SSuprem 4, Elite, and Optolith
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of 
{bold} Athena 
in a trench etching example. 
{bold} Optolith 
is used for patterning and 
{bold} Elite 
is used for etching.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.



{subsection} anex11.in : CMOS Example Using MaskViews

Requires: SSuprem 4, MaskViews
{newline}
Minimum Versions: Athena 5.21.2.R

{bold} NOTE: 
This example works only on UNIX/LINUX computers. 

{bold} MaskViews  
is a product enabling the design of more than one device side by side.
For example, if an NMOS and a PMOS pair need to be considered side by
side, then
{bold} MaskViews  
is used in conjunction with a single generic input file. 
{bold} MaskViews  
sends to the process simulator the mask, grid, boolean region and
electrode name information. 

This example uses an IC Layout cross section along with a 
generic process flow to realize a specific device.
To run this example, first invoke 
{bold} MaskViews  
from the 
{bold} Tools - MaskViews - Start MaskViews  
menu options. An IC Layout editor will appear. Create a cutline object by selecting the 
{bold} Write file  
button. Then select the beginning and end of the required cross section
on the layout itself. This action will generate a 'cutline object' as a
file. (If used under the 
{bold} VWF  
the cutline object will be loaded into the 
database). The cutline object contains 4 pieces of information:

{bullet} masking information - where to place the photoresist or barrier
{bullet} grid information - automatically generated from a set of rules
{bullet} boolean regions information - defining regions of interest
{bullet} electrode names - for use in a later device test

Load the cutline object into 
{bold} DeckBuild 
by using the 
{bold} Tools - MaskViews - Cutlines  
menu option. Once loaded into 
{bold} DeckBuild
, press
{bold} run
.

The completed run will relate directly to your IC layout cutline selection.

Note the use of the 
{bold} AUTOELECTRODE  
statement, used to refer any available electrode names at a particular
point in the process flow to a specific material region.
Electrode names may be associated with poly, metal or silicide regions.
The 
{bold} AUTOELECTRODE 
statement will search from the top of the
structure until it finds an appropriate electrode material.

The lateral position of the electrode is determined from the
IC layout electrode mask position. Electrodes are named automatically,
half-way from the point where the cutline intercepts the
layout electrode polygon to the point where the cutline leaves the 
electrode polygon.

The grid is derived from a set of rules relating to the edge
of each mask layer. These rules are defined under the :
{bold} define - grid - x  
pop-up window within 
{bold} MaskViews
.

This example also demonstrates the use of 
{bold} MaskViews
, with a view to usage
under the Virtual Wafer Fab. When used under the 
{bold} VWF
, split lots may
include many devices, e.g. a P-channel and an N-channel MOS device.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anex12.in : Bipolar Example Using MaskViews 

Requires: SSuprem 4, MaskViews
{newline}
Minimum Versions: Athena 5.21.2.R

{bold} NOTE: 
This example works only on UNIX/LINUX computers. 

This example uses an IC Layout cross section together with a generic 
process flow to realize a specific device.

To run this example, first invoke 
{bold} MaskViews  
from the 
{bold} Tools - MaskViews - Start MaskViews  
options. Create a cutline object by selecting the 
{bold} Write file  
button, and then selecting the beginning and end of the required cross section.
Load the cutline object into 
{bold} DeckBuild  
by using the 
{bold} Tools - MaskViews - Cutlines  
menu option. Once loaded into 
{bold} DeckBuild
, press
{bold} run
.

To load and run this example, display this text and select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.
{section} Athena_MISC : Miscellaneous Process Simulation Examples


{subsection} anmiex01.in : Multiple Impurities in a Material (BPSG) 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates the deposition of material such as BPSG
that contains multiple impurities in 
{bold} Athena
.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anmiex02.in : Epitaxial Growth

Requires: SSuprem 4 
{newline}
Minimum Versions: Athena 5.21.2.R

This example makes use of the 
{bold} EPITAXY 
statement to create an
epitaxial layer with a specific mesh density and boron concentration.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.




{subsection} anmiex03.in : Phosphorus Segregation Modeling 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the use of improved discretization to
improve spurious phosphorus segregation through gate oxides.  

The problem is clearly seen in the left plot. The original gridding has
no mesh points wholly within the oxide layer. It results in too much
diffusion through the oxide. The only way to decrease the transport is
to increase the number of grid points in the thin oxide. 


To increase mesh in thermally grown oxides the parameter 
{bold} method grid.ox 
is used. The default
Lowther discretization method means the diffusion into silicon is
almost completely eliminated (right plot).

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} anmiex04.in : Substrate Shear Stress 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates  the
capability to calculate shear
stress as a result of an overlying nitride layer.  The results of the
calculation are plotted using 
{bold} TonyPlot 
to display contours of each of
the three components of stress produced by the calculation.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} anmiex05.in : MOSFET Scaling with the STRETCH command 

Requires: Athena
{newline}
Minimum Versions: Athena 5.21.2.R

The command 

{bold} stretch poly length=<val> 

will stretch the defined material to the indicated final length. 

This can be used in short channel effect scaling experiments using VWF.


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.




{subsection} anmiex06.in : Salicide Example Using Titanium Silicide 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example models a self aligned silicide (salicide) process.

No special commands are required to enable silicidation. Any interface
between a refractory metal and silicon or polysilicon will cause growth
of a silicide material.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} anmiex07.in : Selective and Non-selective Si Deposition 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

It is known that crystalline Si cannot be grown on non-crystalline
(Poly-Si or other material) surfaces. Therefore, in those cases when
the epitaxial or other type of silicon growth takes place in the
structure with different surface material types, the crystalline Si grows only
on Si while Poly-Si grows elsewhere.  To facilitate simulation of such 
structures the capability to selectively transform Si into Poly during 
deposition or epitaxy has been implemented. The capability is invoked
by the parameter SI_TO_POLY in the corresponding DEPOSIT or EPITAXY
statement. This example demonstrates this capability for Si deposition
on the structure consisting of 2 LOCOS isolation areas and an active Si area.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.



{subsection} anmiex08.in : Analytical Etch of a Trench with Angled Sidewalls and Undercuts

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates use of ANGLE and UNDERCUT parameters with default 
(DRY) analytical etch. ANGLE specifies the angle (in degrees) of resulting
sidewalls. The ANGLE is measured from horizontal. ANGLE=90 (default)  corresponds to  vertical sidewalls, ANGLE < 90 results in trenches 
narrowing to the bottom, while ANGLE > 90 produces a retrograde sidewalls.
UNDERCUT specifies the penetration (in microns) of the etch under the
mask edges. The UNDERCUT length is measured along the boundary line between
etched material and masking layer. 

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.




















{section} Athena_CALIBRATION : Process Simulator Calibration 


{subsection} ancaex01.in : OED Tuning Using TWO.DIM for DRYO2 

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example compares the 
{bold} two.dim 
and 
{bold} Fermi 
methods for simulation of diffusion
in an oxidizing ambient. The two.dim method shows the Oxidation Enhanced
Diffusion (OED) effect. The next example 
{bold} ancaex02.in 
demonstrates how OED profiles could be calibrated.


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} ancaex02.in : OED Calibration Using THETA.0 


Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows how to use the interstitial injection coefficient 
{bold} theta.0 
for calibration of Oxidation Enhanced Diffusion. Only prefactor theta.0
is used in this example. If data on temperature dependence of OED was
available,  
{bold} theta.E 
could be calibrated as well.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} ancaex03.in : Calibration of Thin WetO2 Oxidation 

Requires: SSuprem 4, OPTIMIZER 
{newline}
Minimum Versions: Athena 5.21.2.R

This example performs calibration of thin oxide model parameters using
OPTIMIZER. These parameters are quite accurately characterized for dryo2
ambient, but virtually no information exists for wetO2 ambient. Historically,
wet oxidation has been predominantly used for thick oxide growth. However,
low temperature, low pressure, short time wet oxidation is becoming more
popular. Unfortunately, to the best of our knowledge extensive experimental 
results do not exist for such oxidations. Therefore, calibration based just
on few experimental points may need to be performed for wet thin oxidations.

The default value for thin oxidation term for wetO2 is zero. This
usually underestimates thin oxide thickness. The default values result
in 71 A and 173 A oxide thicknesses for 30 and 90 minutes wetO2
oxidation at 820 C and pressure of 0.2 atmospheres. Typical
experimental values could be 100 A and 230 A.  These values
are selected as targets for calibration procedure.  Only using
OPTIMIZER could the parameters of thin oxidation models be found.

To load and execute this example, select the
{bold} Load example 
button. Once loaded, select  
{bold} Optimizer... 
from the
{bold} Main Control 
menu. The
{bold} Deckbuild: Optimizer 
screen will appear. Select 
{bold} Load File ... 
from the 
{bold} File 
menu and then load the special optimizer file 
{bold} ancaex03.opt 
from the scrolling 
{bold} Optimizer Load 
menu.

Preset parameters and targets are included in this file. When you
select 
{bold} Parameters 
from the
{bold} Mode 
menu you will find that thinox.0 and thinox.l are chosen as parameters for optimization. The default values for dryo2 oxidation are selected as an initial 
guess.

Oxide thicknesses 
{bold} tox1 
and
{bold} tox2 
after 30 and 90 minutes of oxidation respectively are selected as a targets.


You can modify any of these targets and/or parameters. Please refer to
Chapter 
{bold} Optimizer 
in the VWF Interactive Tools Manual.

If you want to run the preset optimization
task, it is better to slightly improve the default stop criteria as follows:

Select 
{bold} Setup 
from the
{bold} Mode 
menu. Then decrease the maximum error down to 2, and increase the number of Iterations to 10.

After this just select the
{bold} Optimize 
button, on the OPTIMIZER menu.

{subsection} ancaex04.in : Tuning LOCOS Shapes using the COMPRESS Model

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.18.0.R

This example shows a simple way of tuning the LOCOS bird's beak shape.
It is known that the length and thickness of a bird's beak during LOCOS
oxidation decreases with an increase of nitride thickness. This happens
because thicker nitride produces higher stresses which decrease
oxidation rates.  A viscous stress-dependent oxidation model should be
used to accurately predict this effect. However this model is
very time consuming therefore one can use the 
{bold} compress 
model with
higher Young's modulus for nitride in order to decrease bird's beak
length. This example calculates LOCOS for two values of nitride Young
modulus coefficient 3.89e12 dynes/cm^2  (default) and 3.89e14 dynes/cm^2.
The values of Young's modulus are reverse proportional to the elastic constant s11.elast. Poisson's ratio stays unchanged because it is equal to -(s12.elast/s11.elast).


To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.



{subsection} ancaex05.in : Tuning Threshold Voltage using Seg.0 and Theta.0

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates how physical parameters related to silicon/oxide interface can be used for the tuning of
threshold voltage of a MOS structure. A simplified 1D simulation of an
NMOS channel formation is considered. Two parameters are used for the Vt calibration:  
{bold} Seg.0 
, which is the prefactor of boron segregation coefficient on the
silicon /oxide interface, and 
{bold} theta.0 
which is the prefactor of interstitial injection coefficient. Using DBInternal capability 
(see section DOE of the Deckbuild Examples), the simulation is repeated for 7 different values of Seg.0 and for 5 different theta.0. 
For each case the threshold voltage is extracted using 
{bold} QuickMOS 1dvt. 
The results are stored in the
{bold} ancaex05.dat 
file for subsequent plotting of Vt vs theta.0 for different Seg.0 curves. Such curves could be used
for selecting of appropriate segregation and interstitial injection coefficients.  

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.


{subsection} ancaex06.in : Tuning Directional and Isotropic Etch for Spacer Formation 

Requires: ELITE
{newline}
Minimum Versions: Athena 5.21.2.R

This example demonstrates how to use etch rate parameters to tune
a MOS spacer width and shape. In the first simulation the etch rate is completely
directional. This corresponds to simple dry (anisotropic) etching of SSuprem 4.
The dry etch model usually overestimates spacer width. In the second simulation,
an isotropic component is included which results in a narrower spacer.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.



{subsection} ancaex07.in :  Multiple Implant Profile Optimization 

Requires: SSuprem 4, OPTIMIZER
{newline}
Minimum Versions: Athena 5.21.2.R

This example performs optimization of implant doses and energies as well as 
diffusion temperature in order to obtain a specified boron doping profile as
well as pn-junction depth. 
The target boron profile is a constant doping with concentration of 2e16
all the way from the silicon surface until x=1.0. The target for the pn-junction
depth is 1.5 micron.  


To load and execute this example, select the
{bold} Load example 
button. 

First, run the example without optimization. From, the 
{bold} TonyPlot 
profile you will see that boron concentration varies between 2e16 and 5e16
and the pn-junction is around 1.3 microns.

In order to find an optimized solution select
{bold} Optimizer... 
from the
{bold} Main Control 
menu. The
{bold} Deckbuild: Optimizer 
screen will appear in a moment. Select 
{bold} Load File ... 
from the 
{bold} File 
menu and then load the special optimizer file 
{bold} ancaex07.in.opt 
from the scrolling 
{bold} Optimizer Load 
menu.


Preset parameters and targets are included in this file. When you
select 
{bold} Parameters 
from the
{bold} Mode 
menu you will find that doses and energies for all 4 implants as well as diffusion
temperature are chosen as parameters for optimization.


Boron profile 
{bold} bcurve 
is chosen as an optimization target. Constant concentrations of 2e16 are set as target
values for depths from 0.02 to 1 micron. Then a concentration of 1e16
is set for 1.1 micron. Weights for all these points are set to 1.0. A junction depth of 1.5 microns is
an additional point target with a weight of 6.0. 

Now you can modify any of these targets and/or parameters. Please refer to
Chapter 
{bold} Optimizer 
in the VWF Interactive Tools Manual.

If you want to run the preset optimization
task it is better to slightly relax the default stop criteria as follows:

Select 
{bold} Setup 
from the
{bold} Mode 
menu and increase the maximum error to 20.

After this just select the
{bold} Optimize 
button. 

After optimization is completed you may execute the 
{bold} TonyPlot 
which will the plot final optimized profile.
After optimization is completed you may copy optimized parameters back to the input deck
by selecting 
{bold} Copy to Deck 
from the
{bold} Edit 
menu. After that you can run the optimized deck from the beginning and obtain a
{bold} Tonyplot 
of the optimized profile.


{subsection} ancaex08.in : Extraction of Implant Moments from Measured Data

Requires: SSuprem 4 and OPTIMIZER
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows how the general purpose OPTIMIZER can be used for
extraction of dual-Pearson implant parameters from an experimental
profile. This technique could be useful when Athena's implant look-up
tables do not include moments for a specific implant (e.g. 0 degrees angle,
very high or low energy, "exotic" ion-material combination, etc.) or
when it appears that a simulated profile does not match an experimental one.
This example can also be used as a tutorial for setting up an optimization
procedure with a so-called curved target.

An experimental profile for 1e13 ion/cm**2, 15 keV, 0 degrees Boron implant
into <100> crystalline silicon is used in this example. This SIMS profile 
published by H. Kinoshita of the Microelectronic Research Center (Austin, TX).
The profile is in a simple XY format which can be read into the OPTIMIZER
{bold} ancaex08_4256.opt
.

To load and execute this example, display this text and select the
{bold} Load example 
button while this text is displayed. This will copy the input file and several support
files including ancaex08_4256.dat and ancaex08_4256.opt will be copied
to your current working directory at this time.

Selection of initial values for optimization is usually very important
in the setup of the optimization task. In thr case of implantation one can use
parameters available for a similar implant. To demonstrate the flexibility
of this approach, parameters corresponding to the same implant but at 
7 degrees are used. It can be performed by using default a SVDP model and
PRINT.MOM parameter in the IMPLANT statement.

If you want to compare this initial approximation with the experimental one,
just  select the
{bold} run 
button to execute the example. In the end the two profiles will be
overlaid in TonyPlot, so one can see that the experimental profile
has a much bigger and deeper channeling peak than the default 7 degrees
profile.

The Optmizer is used to find a better set of dual-Pearson parameters
{bold} range, std.dev, gamma, 
etc. that will result in a simulated profile which better match the experimental one. 
In order to achieve this, select
{bold} Optimizer... 
from the
{bold} Main Control 
menu. The
{bold} Deckbuild: Optimizer 
screen will appear in a moment. Unlike the first example ancaex08.in, this example
does not use a special optimizer file with preset parameters and targets,
so you should repeat the following steps in order to set the optimization task.

First, select
{bold} Parameters 
from the
{bold} Mode 
menu, this will display the Parameter worksheet. Select (highlight) the
MOMENTS statement and choose
{bold} Add 
from the 
{bold} Edit 
pull-down menu. The
{bold} Parameter define 
pop-up will appear. Check all check-boxes excluding the first two which
correspond to dose and energy, then press
{bold} Apply
. 
Nine new rows will be inserted into the Parameter worksheet.  By
default all min/max values for parameters are +-50%. This should be
changed for some parameters. For example, we may expect a wider range
for skewness (asymmetry) for Pearson distributions, therefore we set
{bold} {newline}
Minimum value 
to -1.0
and
{bold} Maximum value 
to +3.0 for  
{bold} gamma 
and
{bold} sgamma 
parameters.
Also, the intervals for the fourth moment 
{bold} kurtosis 
of both first and second Pearson functions should be wider (2.7,10.0).
{bold} dratio 
should not be higher than 1.0 therefore its maximum value should be set
to 1.0. To edit any of these numeric values position the pointer over
the corresponding cell of the worksheet, click the left-hand mouse
button, edit the value, and do not forget to push the return button
after finishing the editing.

The next step is setting the curved target. Select
{bold} Targets 
from the 
{bold} Mode 
menu. Highlight the 
{bold} extract 
line. This line extracts the Boron chemical concentration profile which
corresponds to the SIMS measured profile. After that choose
{bold} Add 
from the
{bold} Edit 
pull-down menu. A new row will be inserted into the Target worksheet.
The target name will correspond to the name in the extract statement.
Now, to insert experimental profiles as a curved target select the only
row in the worksheet by double-clicking the left-hand button while the
pointer is positioned anywhere in the row, then choose
{bold} Edit > X/Y Data > Insert > From File
. The 
{bold} Optimizer X/Y Target Data 
pop-up will appear. Select
{bold} ancaex08_4256.opt 
file and then press 
{bold} Load
.

The next step is to change the response type of the curved target from 
{bold} log 
to
{bold} linear
.
Otherwise the estimated error would be very small because Optimizer
would take the log of the result and target at each point before
computing the error. Select the
{bold} Edit > Select all
. All the rows will appear raised. Then choose 
{bold} Lin/Log
from the same menu and all row's response type will be toggled.


Now, once the parameters, targets, and setup information have been
defined, the Optimization process can be started by pressing the
{bold} Optimize 
button. During the optimization run, the 
{bold} Graphics 
mode shows real-time updates of parameter, target, and error values.
After optimization is completed you may execute  
{bold} TonyPlot 
which will plot the comparison between optimized and measured profiles. 
{section} Athena_ADAPTMESH : Process Simulation with Adaptive Meshing 

{subsection} amex01.in : Trench Isolation Structure

Requires: SSuprem 4/Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the fabrication of a trench isolation
structure using
{bold} Elite 
and
{bold} SSuprem 4 
to model etching and
oxidation processes. We test this as a nonplanar structure application for
base mesh generation.

The example begins without grid definition.
The
{bold} GRID.MODEL 
statement specifies a grid type
{bold} TRENCH
.

Finally, the structure is plotted using
{bold} TonyPlot 
and the structure saved to a file.

To load and run this example, select the
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the
{bold} DeckBuild run 
button to execute the example.

{subsection} amex02.in : Poly Emiter Bipolar Device Structure (PNP)

Requires: SSuprem 4/Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the fabrication of a PNP Bipolar device
structure using
{bold} Elite 
and
{bold} SSuprem 4 
to model etching and 
oxidation processes.
In this example, the
{bold} ADAPTIVE MESHING 
is turned on using the command
{bold} method adapt
. The grid should be adapted during ion implantation and anneal process.
The initial grid setting is still using that designed by hand. However,
the first time use of the grid adaptation feature
{bold} grid.model 
allow the grid parameters to be optimized according to its application area,
e.g. PNP Bipolar device.
and stored in the template
{bold} PNP
. 
At this moment, the template
{bold} PNP
only contains one line:

{bold} adapt.par disable oxide

{bold} adapt.par disable poly

This means do not use an adaptive grid in oxide and poly since the grid inside
oxide and poly is not important for PNP Bipolar devices.


To load and run this example, select the
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the
{bold} DeckBuild run 
button to execute the example.

{subsection} amex03.in : LOCOS Isolation Structure

Requires: /SSuprem 4/Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the fabrication of a trench isolation
structure using
{bold} Elite 
and
{bold} SSuprem 4 
to model etching and
oxidation processes. We test this as a nonplanar structure application for
base mesh generation.

The example begins without a grid definition.
The
{bold} GRID.MODEL 
statement specifies a grid type
{bold} LOCOS
.

Finally, the structure is plotted using
{bold} TonyPlot 
and the structure is saved to a file.

To load and run this example, select the
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the
{bold} DeckBuild run 
button to execute the example.

{subsection} amex04.in : Tilt Implant and Anneal on Irregular Mesh

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R


This example shows the tilt implantation into a trench
structure using adaptive gridding technique in
{bold} SSuprem 4
.

The example begins with an initial grid structure.
The
{bold} METHOD ADAPT 
statement specifies the adaptive gridding option.

To load and run this example, select the
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the
{bold} DeckBuild run 
button to execute the example.

{subsection} amex05.in : MOS Device Structure

Requires: SSuprem 4/Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example shows the fabrication of a MOS 
structure using
{bold} Elite 
and 
{bold} SSuprem 4
. 
The grid is adaptive and the 
{bold} BASE.MESH 
feature is automatically applied to the initial mesh generation. This is a good
test for gridding of a planar structure.

The example begins without a grid definition.
A 
{bold} MOS 
grid template is used. This template is installed under the subdirectory
{bold} var/athena.grid 
in the Silvaco Installation Directory.
The template can be modified and reused for another similar simulation.

Finally, the structure is plotted using 
{bold} TonyPlot 
and the structure saved to a file.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} amex06.in : CCD Structure Formation

Requires: SSuprem 4
{newline}
Minimum Versions: Athena 5.21.2.R

In this example, a CCD structure is constructed using Athena. This structure can be passed to ATLAS for electrical testing.

The first stage of the input constructs the CCD geometry and doping
profiles in Athena. The CCD device consists of a storage node on the
left of the structure controlled by a polysilicon gate. A transfer node
to the right of this structure is also controlled by both a polysilicon gate and a drain
region of heavy n+ doping with a metal contact.

The CCD structure has a n- active region at the surface above a p-type
substrate. Under the transfer node an extra p-type implant is given.
This implant is performed at sufficient dose level to create a potential
difference between the storage and transfer nodes, but is not so large
as to create a junction.

The process simulation is designed to run extremely quickly so there is
a minimum of diffusion steps included. The final stages of the Athena
input performs the electrode definition needed by ATLAS.  Also some
EXTRACT statements are used to measure the junction depth of the active
region under the storage and transfer nodes.

    
To load and run this example, select the
{bold} Load example 
button while this text is displayed. The input file and several support
files will   be copied to your current working directory at this time.
Once loaded into DeckBuild, select the
{bold} run 
button to execute the example.

{subsection} amex07.in : Flash EPROM Formation

Requires: SSuprem 4 and Elite
{newline}
Minimum Versions: Athena 5.21.2.R

This example uses
{bold} Adaptive griding 
to allow fast, accurate and easy simulation over a complex topography
created using
{bold} SSUPREM 
and
{bold} Elite.
The EPROMs are fabricated by Athena using the autogrid capability.

The example begins with a silicon substrate that is 10 microns wide
and 10 micron deep.  Two parameters on the
{bold} adapt.parm 
statement specify the error criteria and the dopants for refinement.
The parameter
{bold} accur.mult 
specifies the multiplication factor for accurate control.
This results in easy control for the dopant simulation in Athena.

To load and run this example, select the
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the
{bold} DeckBuild run 
button to execute the example.


{section} DOE : Design of Experiments Examples 

{subsection} doeex01.in : Implant Dose Effect at Different Energies 

Requires: SSuprem 4, MCIMPLANT
{newline}
Minimum Versions: Athena 5.20.0.R

This example shows how to use the 
{bold} DBInternal 
capability of DeckBuild to investigate the dose
effect on As implant profiles at different energies. A simple template
Athena input deck "doeex01_tmpl.in" is created. It includes one BCA
implant statement with dose and energy specified using set capability
of Deckbuild. The content of "doeex01_tmpl.in can be seen inside the Experiment
input deck file doeex01.in. 

The Experiment file starts with the 
{bold} go internal 
command which transfers control from the current simulator (i.e. Athena) to
DBInternal. The Experiment file consist of two main parts. The    
{bold} load 
command specifies which template file should be used for multiple runs. The
{bold} sweep 
command specifies how the variables set in the template file should be changed.
Both parameters specified by the 
{bold} set 
command in the template file are set to be changed.
The 
{bold} range 
specifies the initial value of the parameter, final value value of the parameter, and number of points. The dose varies in log scale, so its values will be 1e13, 1e14, and 1e15. 
The energy is changed linearly, so its values will be 5keV, 10keV, and 15keV. The total number of simulations will be 3 X 3 = 9.

After all simulations are complete, the resulting profiles are combined in
3 TonyPlots.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.

{subsection} doeex02.in : Doping dependence of resistivity and electron mobility 

Requires: Atlas
{newline}
Minimum Versions: Atlas 5.18.3.R

This example shows how to use the DBInternal capability to investigate the doping 
dependence of resistivity and electron mobility. The simulations will reproduce 
the graphs of mobility and resistivity for n-type silicon shown in Figures 18 
and 21 in chapter 1 of S.M. Sze's "Physics of Semiconductor Devices".  The 
template
Atlas input deck "doeex02_tmpl.in" for a simple resistor is created. The  
uniform doping is specified by the set command of Deckbuild. The parameters of 
interest,
resistivity and mobility, are extracted using "extract from curve" capability.
The content of the template file can be seen inside the Experiment input deck 
file "doeex02.in". 

The Experiment file starts with the 
{bold} go internal 
command which transfers control from the current simulator (i.e. Atlas) to
DBInternal. The Experiment file consists of the following sections:

{bullet}The    
{bold} load 
command specifies which template file should be used for multiple runs. 

{bullet}The
{bold} sweep 
command specifies how the variables set in the template file should be changed.
In this example the doping varies from 1e12 to 1e21. The number of simulations
is set to 37. 

{bullet}The 
{bold} save 
command tells DBInternal to collate the data 
generated in all extract commands into the file "doeex02.dat".

After all simulations are complete, the resulting resistivity vs doping and 
mobility vs doping dependencies are plotted in TonyPlot.

To load and run this example, select the 
{bold} Load example 
button. This action will copy all associated files to your
current working directory. Select the 
{bold} DeckBuild run 
button to execute the example.



{section} VICTORYPROCESS : 1D/2D/3D Process Simulation Examples


{subsection} vpex01.in : 1D/2D Victory Process tutorial 
{newline}
Requires: Victory Process : Core Simulator, 2D Diffusion & Implantation, 2D Oxidation
{newline}
Minimum Version: Victory Process 6.8.0

This example demonstrates 2D process simulation for 28nm NMOS transistor
with STI (Shallow Trench Isolation). The simulation deck  
consists of about 20 actual process steps - etching, deposition, ion implantation,
diffusion/oxidation, and more then 50 auxiliary statements, including initialization,
mesh generation, exporting structure for visualization,and  parameter extraction.

The goal of this example is to provide a basic tutorial for Victory Process in 2D mode.
It also demonstrates generic compatibility with Athena syntax  as well as some 
advantages (including better internal meshing and convergence) over Athena.

Most of time consuming numerical algorithms of Victory Process are efficiently parallelized.
By default Victory Process runs on just one processor.
To ensure the best performance on your computer the following simulation condition
{bold} simflags="-P all"
is specified in the 
{bold} go
line starting Victory Process. This means that all processors available will be used in
parallel section of Victory Process.
 If you want to use a smaller number of processors you can substitute "all" with a desired number, e.g.
{bold} simflags="-P 4".

Simulation starts with
{bold} Init
statement, which specifies 
{newline}
{bullet} wafer properties: material, orientation, initial doping,
{newline}
{bullet} simulation domain: lateral (x-direction) interval [0,0.45], substrate depth, and
height of gas region above substrate. This domain corresponds to right half of the NMOS device with STI.
The complete structure suitable for device simulation will be obtain by "mirroring" command in the end of simulation.
{newline}
{bold} Note:
 always make sure that the total thickness of all layers deposited above substrate will not be larger than GASHEIGHT.
{newline}
{bullet} the size of mesh cells (0.01 micron) of the base grid which is used for geometry representation.In fact Victory Process uses Nested Cartesian Grid approach to represent geometry and material boundary movements. By default 
{bold} meshdepth = 2
,which means that only one nested mesh level will be used during this process. As the result the minimum resolution of the layer boundaries representation will be 0.0025 microns. 
The resolution can be further increased by either decreasing of base grid cell size or specifying 
{bold} meshdepth > 2.

Victory Process uses non-uniform Cartesian grid to resolve volumetric data, e.g. doping or defect concentration, stress, etc. In 2D mode this grid is defined by a set of 
{bold} line x
 and
{bold} line z 
statements. This grid is similar to initial grid generated by Athena. The differences are: the "depth" coordinate is "z" (not "y"), the lines apply to the whole simulation domain including 
gas region, and triangle elements are not generated in Victory Process.

This example uses automatic selection of simulation dimensionality. This means that simulation will start in 1D and will switch to 2D when required by the process flow. This is a default mode and,
 as in Athena, this capability saves simulation time without loosing any accuracy. If you want to force Victory Process to run in 2D from the very beginning you can specify 
{bold} flow.dim=2d
.

The first process sequence is N-well formation consisted from boron implant and diffusion cycle with temperature ramp-up, constant, and ramp-down steps. Default analytical implant model
 and default diffusion model are used in this sequence. In the end of this process sequence the structure is still 1D. It is saved for visualization using 
{bold} export
command. The well profile is visualized using TonyPlot.

The next process sequence is STI formation. A half of 0.3 microns shallow trench with 85 degrees side wall is formed by geometrical etch and then oxidized in dry ambient. 
The active area is masked with nitride layer. Note that Victory Process allows to specify the deposition interval, using parameters 
{bold} left.to, right.to, between
. Full physical oxidation model should be used for this non-planar structure. The oxidation simulation is slightly slower then Athena for similar structures. In the same time Victory
 Process is usually more stable than Athena which often produces oxidation artifacts due to irregular grid around slopped trench walls.
 The trench then filled with oxide which is automatically planarized. This is achieved by using parameters
{bold} max
and
{bold} thick=0.0
in the deposit statement which means that the trench will be filled up to horizontal plane at the highest point of the structure. 
This capability is more convenient and stable than deposition step followed by "etch above" step in Athena.  

The next step is Vt implant which uses( as all subsequent implants ) Monte Carlo model. 
The Monte Carlo implant model is very efficiently parallelized. If you want to increase simulation speed and number of processors set in the 
{bold} go 
statement is not set to "all" you can set higher number
of processors used by Monte Carlo implant using parameter
{bold} parallel
. 
{newline}
The number of simulated ion trajectories ( parameter 
{bold} n.ion 
) is very important because it determines a trade-off between accuracy and simulation time. For 2D simulation  this number should be preferably in interval between 200000 and 1000000.
 You always can start with lower number of trajectories during first stages of simulation flow design and increase it for final runs.

Following removal of sacrificial oxide, thin (~7nm) gate oxide layer is grown using full physical oxidation model.
{bold} Extract
capability of Deckbuild is used to measure gate oxide thickness. 

After that, the poly-silicon gate is formed using geometrical deposition and then re-oxidized in a dry ambient.

The HALO implant with 25 degrees tilt is performed using Monte Carlo model. Note that Victory Process allows to specify several rotation angles in one implant statement. In this case 
{bold} rotation=0
and
{bold} rotation=180
are used to assure implant symmetry.
 The low energy Arsenic implant is used to dope extension before spacer is formed using geometrical deposition and etching of nitride. The shape of the spacer is shown by TonyPlot.

The final process sequence of this example is S/D formation. The 
{bold} plus.one
model is specified in the high dose arsenic implant statement. The model estimates interstitial profile generated after implant by scaling the impurity profile with factor
{bold} dam.fac.
 The advanced 
{bold} single-pair
diffusion model is used for final S/D anneal. This model should be used when there are substantial amount of point defects generated during preceding process step. In this specific case high dose 
S/D implant is the source of interstitial which tend to pair with impurities and therefore affect final distribution.
 The single_pair model takes into account only dominant or primary impurity-defect pairs, e.g. Boron-Interstitial pairs. The scaling factor
{bold} dam.fac
usually serve as calibration parameter.

In the end of simulation, two parameters of the simulated device - S/D junction depth and estimated (1D) threshold voltage - are extracted.
 Finally, the contact metal is added using geometrical etch and deposition and the full structure ready for device simulation is obtained using 
(bold} mirror
capability in the 
{export}
statement.

To load and run this example, select the
{bold} Load example 
button in DeckBuild Examples window. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


Several intermediate structures will be created. The following plots demonstrate different steps of the process flow:


{pngview}  vpex01_well.png
 shows the 1D well profile.

{pngview}  vpex01_cmp.png
 shows the 2D structure after trench etch, oxidation and planarization.

{pngview}  vpex01_spacer.png
 shows the shape of spacer area obtained using geometrical deposition and etch commands

{pngview} vpex01_final.png
 shows the final full structure with absolute net doping which is ready for device simulation. During the export the structure is also mirrored to obtain a full MOS device with source and drain side.

{subsection} vpex02.in : 3D Victory Process tutorial (process mode)

Requires: Victory Process : Core Simulator, 3D Physical Etch & Deposit, 3D Diffusion & Implantation, 3D Oxidation
{newline}
Minimum Version: Victory Process 6.8.0

This example demonstrates 3D process simulation by using all fundamental 
process simulation capabilities of Victory Process. You may consider this
example as a tutorial for performing a 3D simulation in process mode
of Victory Process. 


List of key syntax:

{bold} Init: 
Defines simulation volume, meshing resolution and number of 
Adaptive Mesh Refinement 
{bold} (AMR) 
levels


{bold} Line: 
Adjusts volume data mesh


{bold} Etch: 
Etching with geometrical mode


{bold} Deposit: 
Deposition with geometrical mode 


{bold} Etch: 
Etching with physical mode


{bold} Deposit: 
Deposition with physical mode 


{bold} Implant: 
Ion implantation


{bold} Diffuse: 
Performs oxidation, dopant activation and dopant diffusion


{bold} Lithography: 
Performs aerial image simulation and creates aerial image based 
mask layers

{bold} Export: 
Exports the simulation result for visualization or to be used by 
other tools. As in this case, structures created by 
Export Victory(Conformal) are supposed to be used within 
Victory Device.  


To load and run this example, select the
{bold} Load example 
button in DeckBuild Examples window. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} vpex03.in : 3D Victory Process tutorial (structure editor mode)

Requires: Victory Process : Core Simulator, 3D Structure Editor, 3D Diffusion and Implantation
{newline}
Minimum Versions: Victory Process 6.8.0

The goal of this example is to provide a tutorial on Victory Process cell mode
based on a 3D buffered super junction LDMOS device. The device simulation itself
and corresponding description can be found in powerex18 example. A Detailed description 
of the process syntax is mentioned in the text below as well as in the input deck itself. 

{bold} Super junctions
are used in LDMOS structures to
{bold} greatly increase the breakdown voltage
of small geometry devices
by allowing the drain depletion region to spread in two dimensions
instead of one at higher drain voltages
(the additional direction being laterally across the super junction).
The neat result is that the drain voltage can now be spread across
a much greater total distance than would otherwise be the case,
which greatly lowers the field at the drain
and therefore increases the breakdown voltage.


By default Victory Process runs on just one processor.
To ensure better performance on your computer the following simulation condition
{bold} simflags="-P all"
could be specified in the 
{bold} go
line starting Victory Process. This means that all processors available will be used.
If you want to use a smaller number of processors you can substitute "all" with a desired number, e.g.
{bold} simflags="-P 4".


Victory Process in cell mode starts with a definition of the initial wafer material, including its thickness
{bold} depth=10
and background doping
{bold} dopant=boron dopingvalue=1e15
, as well as the simulation domain. The horizontal extent of the simulation domain is automatically determined from the enclosing bounding box of the mask layers contained in the mask file
{bold} vpex03.lay
. This mask file is imported into Victory Process with the 
{bold} layout
parameter. The  
{bold} depth=10
and
{bold} gasheight=5
parameters set the vertical extent of the simulation domain as follows: the vertical position of the wafer surface is at "0" level on the Z-axis with the wafer of
{bold} 10 um
in thickness along the positive Z-direction. Above the wafer surface in the negative Z-direction lies a 'transparent' gas region with a thickness of
{bold} 5 um
.

After the wafer initialization, we manually define the volume data mesh by several 
{bold} line
statements. These mesh lines are especially intended for subsequent implantation and diffusion steps. Then, we implant boron 
and phosphorus ions into regions that are supposed to be p-base and n-buffer regions with the aid of "PBASE" and "NBUFF" mask 
layers and after that perform a diffusion process. The next step consists of defining a poly gate with "POLY" mask and forming 
n-pillar, p-pillar, n+ source/drain and p+ regions with "NILLAR", "PILLAR", "NSD", and "PPLUS" layers, respectively, by ion 
implantation and thermal diffusion. 

Finally, we make contact holes in the oxide layer and fill them with aluminum to form the source, drain, and substrate electrodes. The statement
{bold} electrodes "cont" aluminum
turns all exposed aluminum regions that are overlapped with "cont" layer into electrodes and assigns corresponding labels from "cont" layer as electrode names to those electrodes. Similarly, with the statement
{bold} electrodes "cont" polysilicon
all exposed polysilicon regions that are overlapped with "cont" layer become electrodes taking corresponding labels from "cont" layer as their names.

Victory Process in cell mode provides several options to export calculated process structure to a format suitable for device simulation. These include, e.g.,:

{bold} export 2d y=2:
Export a 2D cross-section of the geometry and the volume data across a plane parallel to one of the coordinate planes (Y=2).

{bold} export atlas3d(regular):
Export a prismatic mesh that contains all nodes of the volume data mesh and an approximated representation of the geometry of the process mesh.

{bold} export victory(delaunay):
Export an unstructured tetrahedral mesh with local mesh density controllable by users.

In addition, Victory Process in cell mode supports mirroring feature for all options of prismatic mesh export, e.g.,
{bold} export atlas3d(conformal) mirror="-x+y" 
,
{bold} export atlas3d(regular) mirror="x-y"
,
{bold} export atlas3d(reduced) mirror="-x-y" 
and enables cropping the structure with mask layers, e.g., "CRP" layer, within an unstructured tetrahedral mesh export
{bold} export victory(delaunay) crop.mask="CRP" 

To load and run this example, select the
{bold} Load example
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run
button to execute the example.
{subsection} vpex04.in : Physical deposition models example

Requires: Victory Process : Core Simulator, 3D Physical Etch & Deposit
{newline}
Minimum Versions: Victory Process 6.8.0

This example demonstrates three different default deposition models as well as 
geometrical deposition. This example also illustrates the 
definition of mask polygons in 
{bold} Victory Process.

The example shows a deposition steps performed with three different models 
on the same initial structure. Conformal, non-conformal and primary deposition model are used. 
The last illustrates a deposition model that uses the primary flux ballistic transport mode. 


List of key syntax:

{bold} Init: 
Defines simulation volume and meshing resolution and number of 
Adaptive Mesh Refinement 
{bold} (AMR) 
levels


{bold} SpecifyMaskPoly: 
Defines mask layer polygon


{bold} Deposit: 
Simple analytical deposition 


{bold} Deposit: 
Physical deposition process. Parameters include
{bold} model, 
to select the deposition model, 
{bold} material, 
to define the deposited material,
{bold} deposition rate, 
to define the deposition rate in um/sec, um/min or um/hour with um/min being the default, 
{bold} time 
to define the deposition time in sec, min, hour with min being the default and 
{bold} ratio 
to define the extend of directionality of the deposition.

To load and run this example, select the
{bold} Load example 
button in DeckBuild Example window. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} vpex05.in : Ion Milling Patterning of Nanostructure

Requires: Victory Process : Core Simulator, 3D Physical Etch & Deposit
{newline}
Minimum Versions: Victory Process 6.8.0

This example demonstrates simulation of ion milling pattering of magnetic nanostructures. The key capabilities of Ion Milling simulation are involved in this example:

{bullet} Ion beam rotation and beam divergence
{newline} 
{bullet} Redeposition of sputtered material
{newline}
{bullet} Semi-empirical Yamamura model for etch rates 
{newline}

Ion milling is an effective method for top-down nanoscale pattering of magnetic materials 
{bold} [1]
. The successful use of ion milling requires considerable  etch rate  selectivity between mask and magnetic material. Ion Milling etch rate is proportional to sputtering yield, i.e. number of sputtered 
(removed) material atoms per incident ion. The sputtering yield depends on many factors: the milling ion and its energy, 
as well as on composition, density and other material characteristics  of the material. 
In this test example Chromium is used as a magnetic material and Carbon with diamond characteristics for mask material.  

The typical rate ratio between magnetic materials and hard mask should be around 3 to 5 to achieve required selectivity. 
It is known that higher selectivity could be achieved at lower energies of order of few hundreds eV. Such low energies are also preferable 
to avoid excessive damage inside material during ion bombardment. 

Predictive simulation of Ion Milling of nanostructures requires accurate data on of angular dependence of etch rate. The angles between material surface segments and incoming ions are constantly changing during the milling process because of the surface movement and changing visibility within mask opening.
This angular dependency is impossible to predict from first principles. It was usually found in maskless experiments, so obtained measured dependency in a 
table form can be used through Victory Process open library interface. 

This approach is very reliable, but unfortunately it requires  new experiment for each ion, ion energy and material. This would make process optimization a very time consuming task. 

Victory Process provides an alternative approach in form of semi-empirical Yamamura model for ion milling etch rates. 
The model requires just one parameter to be calibrated using an experimental data for a typical ion energy and after 
that can be used for different energies in the energy range and different ion currents.The Yamamura model is used in this example.

Another critical issue for ion milling of nanostructures is limitations due to effect that some sputtered atoms do not escape back to the
 process chamber through mask openings but collide with sidewalls and deposit there. This effect in case of magnetic nanostructure pattering was observed and discussed in
{bold} [2]
.  
This redeposition effect is taken into account in this example.  

Following is the brief description of key steps and parameters of the ion milling simulation. Note that some of simulation and geometrical parameters are specified in the 
{bold} set 
statements, so they can be used for process optimization or DOE. 
  

{bullet} Base resolution set to 2 nm. Since by default mesh refinement depth set to 2 the minimum resolution will be 0.5 nm.
{newline} 

{bullet} The simulation domain in XY-plane  will be a slice of 30 nm by 4 nm.
{newline} 

{bullet} Both substrate thickness and mask thickness set to 20 nm
{newline}

{bullet} The mask opening
{bold}  CD 
set to 10 nm
{newline}

{bullet} The 
{bold} Init 
statement defines simulation volume and substrate material Chromium
{newline}

{bullet} The HARD mask is set using the
{bold} specifymaskpoly 
statements. 
{newline}

{bullet} The hard carbon (diamond) mask layer is deposited and then mask opening is etched.
{newline}

{bullet} The initial structure before Ion Milling is saved in the file vpex05_0.str
{newline}

{bullet} Redeposition efficiency set to 0.8, which means that 80% of sputtered particle will "stick" to the walls to form the redeposited layer.
{newline}

{bullet} The redeposition material is usually a complex mix of particles sputtered in all materials in the structure. In this specific case this material will obviously consists of Chromium atoms, 
but its characteristics could differ from bulk Chromium. It is logical to estimate that its density will be lower then that of Chromium. 
{newline}

{bullet} The
{bold} material 
statement specifies that the "alloy" has the same ion milling characteristics as chromium with only lower mass density.
{newline}

Now everything is ready for Ion Milling simulation. 

The
{bold} IonMill 
statement specify all conditions and parameters of the simulation:

{bullet} Parameter 
{bold} beamangle 
specifies that the angle between ion beam and surface normal will be 5 degrees
{newline}

{bullet} Parameter 
{bold} beamdivergence 
specifies that directions of the ions will be distributed around beamangle according to Gaussian-like formula with the peak at "beamangle" degrees from normal.
{newline}

{bullet} The duration of the ion milling process will be 5 minutes.
{newline}

{bullet} Next two parameters specifies the solver and automatic mesh refinement
{newline}

{bullet} parameter 
{bold} rotation=on 
means that ion beam will be continuously rotated around the wafer normal
{newline}

{bullet} Parameter
{bold} maxCFL  
controls simulation time steps. The values below 1 guarantees higher accuracy and "smoother" solution for redeposition layer.
{newline}

{bullet} Next 3 parameters specify physical characteristics of the ion beam. The 250 eV Argon ions with current density of 1.5 pA/(um^2) are used in this ion milling process.
{Bold} Note: 
if at least one of these 3 parameters is not specified the experimental etch rate table must be provided.
{newline}

The last 5 parameters of the 
{bold} IonMill 
statement specify and control simulation of redeposition effect:

{bullet} Parameter 
{bold} redepmaterial 
specifies that "new" material alloy will be formed. Its ion milling parameters according to 
{bold} material 
statement above will be the same as those of Chromium with lower density.
{newline}

{bullet} Parameter 
{bold} secefficiency 
specifies portion of sputtered particles which will participate in forming of the redeposited layer.
{newline}

{bullet} Parameter 
{bold} secLimit  
specifies accuracy of redeposition process. The higher accuracy of redeposition simulation is provided by taking into
account of sputtered particles generated outside the simulation domain. This is achieved by virtual reflections of 
the simulation domain. The lower the secLimit parameter the higher accuracy can be achieved. 
{newline}

{bullet} Parameters 
{bold} reflectX  
and
{bold} reflectY 
define maximum number of reflections in X and Y direction correspondingly. In this specific case only particle 
generated within the forming trench in Y direction could reach the side walls within simulation domain. If 
these parameters were not specified the reflections would continue until the required accuracy is achieved. 
{newline}

The 
{bold} export 
statement saves the structure for visualization using 
{bold} TonyPlot 3D 
and parameter extraction.
{newline}

The next section of example demonstrates how to generate a 2D structure and use it for extraction of geometrical parameters after ion milling. The experimental of 
{bold} [2] 
show that the redeposition effect limits the etching depth and results in non-vertical sidewalls with slopes of around 60 - 70 degrees. The extracted parameters 
{bold} "d" 
in microns and
{bold} angle 
in degrees could be used for calibration of this simulation process and/or optimization of process conditions. 
{newline}

Several input parameters  including mask opening width
{bold} CD
, mask thickness 
{bold} mask_thick 
as well as ion energy
{bold} energy
, ion current density 
{bold} currentdensity
, ion beam angle
{bold} beamAngle 
could be used for process optimization. Also, parameters 
{bold} seceff 
and 
{bold} alloy_density_coeff 
could be used for simulation calibration.

Finally, three files named "ratetable_<materialname>_<materialID>.str  containing angle dependency of ion milling rates calculated according 
to semi-empirical Yamamura model were generated during the simulation. The final plot compares those rates.

{bold} [1]
 D. Kercher, Pattering Magnetic Nanostructures with Ions, in Nanofabrication Handbook, editors S. Cabrini and S. Kawata, CRC Press, p. 421 (2012)

{bold} [2] 
D.Kercher, Geometrical Limitations of Ar Ion Beam Etching, EIPBN-2010

To load and run this example, select the
{bold} Load example 
button in DeckBuild Examples window. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} vpex06.in : Deep Reactive Ion Etch example

Requires: Victory Process : Core Simulator, 3D Physical Etch & Deposit
{newline}
Minimum Versions: Victory Process 6.8.0

This example demonstrates the syntax needed for the simulation of a reactive ion etch
and passivation process. This example also illustrates the definition of mask 
polygons in 
{bold} Victory Process

After preparing the initial structure using a polygon mask and a geometrical
deposition step, the reactive ion etch (RIE) model is activated. Finally the
reactive ion etch model is called in a sequence with a conformal passivation step.


List of key syntax:

{bold} Init: 
Defines simulation domain and geometrical mesh resolution and number of 
Adaptive Mesh Refinement 
{bold} (AMR) 
levels


{bold} SpecifyMaskPoly: 
Defines mask layer polygon


{bold} Deposit: 
Deposition with geometrical mode 


{bold} Etchdepoproperties: 
Defines material properties relevant to etch and depo steps. Parameters include:
{bold} name, 
to assign a deck name to the material properties for later reference, 
{bold} material, 
to define the material for which the following parameters are valid, 
{bold} rate, 
to define the etch rate in um/sec, um/min or um/hour with um/min being the default. 


{bold} Flux: 
Defines a c-function based flux model. In this case the 
{bold} rieetcherflux 
model which has two parameters and two dependencies.


{bold} TopographyModel: 
Once given a name, defines a deposition or etching model by combining a surface reaction 
model and a flux model.


{bold} Deposit: 
Performs a physical deposition process. Parameters include: 
{bold} model, 
to select the depo model, 
{bold} material, 
to define the deposited material, 
{bold} depositionrate, 
to define the deposition rate in um/sec, um/min or um/hour with um/min being the default and 
{bold} time 
to define the deposition time in sec, min or hour with min being the default.


{bold} Etch: 
Performs a physical etching step. Parameters include: 
{bold} model 
to select the etch model, 
{bold} materialproperties 
to select the material properties (see Etchdepoproperties statement), 
{bold} time 
to define the etching time in sec, min or hour with min being the default and 
{bold} maxCFL 
to control the maximal time step for the simulation of this process step. 

To load and run this example, select the 
{bold} Load example 
button in DeckBuild Example window. This will copy the input file and any support
files to your current working directory. Select the 
{bold} run 
button to execute the example.

{subsection} vpex07.in : Ion Enhanced Chemical Etching Example 

Requires: Victory Process : Core Simulator, 3D Physical Etch & Deposit
{newline}
Minimum Versions: Victory Process 6.8.0

This example demonstrates the ion enhanced chemical etching model.
The enhancement effect is demonstrated by performing two simulations
with different ion acceleration. Moreover this example illustrates 
the generation of round mask features.

List of key syntax:


{bold} Init: 
Defines simulation volume and meshing resolution


{bold} SpecifyMaskPoly: 
Defines mask layer polygon


{bold} Save: 
Saves simulation status 


{bold} Export: 
Exports simulation status in Tonyplot 3D format 


{bold} Deposit: 
Deposition with geometrical mode 


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} vpex08.in : Simulation of diffusion enhancement due to interstitial supersaturation

Requires: Victory Process : Core Simulator, 2D Diffusion & Implantation
{newline}
Minimum Version: Victory Process 6.8.0

This example demonstrates implantation induced interstitial supersaturation and 
the application of advanced diffusion models for the simulation of transient 
dopant diffusion enhancement. 

Moreover the junction extraction capability of Victory Process is 
demonstrated extensively as well as the capability to export 1D 
cross-sections.


List of key syntax:

{bold} Init: 
Defines simulation volume, meshing resolution and number of
Adaptive Mesh Refinement
{bold} (AMR) 
levels


{bold} Line:  
Adjusts volume data mesh (for diffusion simulation)


{bold} Deposit: 
Deposition with geometrical mode


{bold} Implant: 
Ion implantation


{bold} Diffuse: 
Performs dopant activation and dopant diffusion


{bold} Extract XJ: 
Extracts the position of the junction along a 1D cut-line


{bold} Export 1D: 
Exports a 1D cut-line for visualization in tonyplot


To load and run this example, select the
{bold} Load example 
button in DeckBuild Examples window. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.


The following plots demonstrate:


{pngview}  vpex08_01.png
 shows the implanted boron profile and the implantation induced interstitial profile.


{pngview}  vpex08_02.png
 shows the boron, interstitial and boron-interstitial pair profiles after 1ms of annealing..


{pngview} vpex08_plot0.png
 shows the position of the junction over time while the annealing progresses.

{subsection} vpex09.in : Oxidation example 

Requires: Victory Process : Core Simulator, 3D Diffusion & Implantation, 3D Oxidation
{newline}
Minimum Versions: Victory Process 6.8.0

This example demonstrates geometrical deposition, oxidation, 
layer thickness extraction and saving and restoring of simulation status.  
This example also illustrates the handling of external layout 
files (.lay format) in 
{bold} Victory Process.


List of key syntax:

{bold} Init: 
Defines simulation volume and meshing resolution


{bold} Deposit: 
Deposition with geometrical mode 


{bold} Oxidize: 
Oxidation emulation with analytical mode


{bold} Diffuse: 
Oxidation simulation with physical mode


{bold} Extract: 
Extracts properties from simulation result 


{bold} Save: 
Saves simulation status


{bold} Load: 
Restores simulation status

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{subsection} vpex10.in : Photolithography example 

Requires: Victory Process : Core Simulator
{newline}
Minimum Versions: Victory Process 6.8.0


This example demonstrates photolithography through a user defined mask.


List of key syntax:

{bold} Init: 
Defines simulation domain, geometrical mesh resolution and number of 
Adaptive Mesh Refinement 
{bold} (AMR) 
levels

{bold} Lithography: 
Photolithography for a predefined mask.
{bold} mask 
names the layer to which the photolithography step to be applied. 
{bold} maskAperture 
defines the numerical aperture of the optical system.
{bold} standardWl 
sets the wavelength to one of predefined values.
{bold} resultImage 
nominates the file where the areal image is stored.


{bold} Deposit: 
Deposition with geometrical mode

To load and run this example, select the
{bold} Load example 
button in DeckBuild Example window. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.
{section} VICTORYSTRESS : 2D/3D Stress Simulation

{subsection} vsex01.in : Stress in FinFET due to capping layer

Requires: Victory Process, Victory Stress
{newline}
Minimum Versions:Victory Process 7.6.8.R, Victory Stress 2.4.8.R

This example is executed in two steps:

First, Victory Process is used to generate the FinFET structure out of specifications provided in a
layout file. The 'line x|y|z..' statements are used to refine the mesh inside the FinFET structure 
in the area of the gate and the fin. At the end of the Victory Process simulation run the structure
is exported with a tetrahedral volume mesh and is saved to the file 
'vsex01_fine_victory_conformal_ex.str' which can be visualized with 
{bold} Tonyplot3d
.

In the second part of the simulation deck stress analysis is performed by Victory Stress. The
statement 

{bold} go victorystress

starts the Victory Stress simulator. Than, the FinFET structure created in the first part of the
simulation run is loaded with the
{bold} Init
statement. 

The
{bold} Material
statement defines different elastic properties of the materials contained in the
structure. Without those definitions, Victory Stress would load default values of these properties
from an internal material database. The 
{bold} Material 
statement overrides those default values.

The 
{bold} Method
statement chooses a particular linear equation system solver for solving the the system of elastic
stress equations. In this case the solver called 'ams' is selected.

The stress analysis itself is a one-step simulation and it is started by the
{bold} Stress 
statement. 
Note : Since it is not specified explictly in this examples, the default crystal orientations are
applied, which means that a (100) silicon wafer is used and the fin is oriented in the <100>
direction.

Once stress analysis simulation is complete the three-dimensional structure is saved with the 
{bold} Save 
statement and can be visualized using 
{bold} Tonyplot3d
.

To load and run this example, select the
{bold} Load example 
button in DeckBuild Examples window. This will copy the input file and any support
files to your current working directory. Select the
{bold} Run 
button to execute the example.

{subsection} vsex02.in : Effects of Stress/Strain on a 50 nm Silicon FinFET

Requires: Victory Process, Victory Stress and Victory Device
{newline}
Minimum Versions: Victory Process 7.14.3.R, Victory Stress 2.8.3.R, Victory Device 1.10.2.R

In modern semiconductor devices, the effects of physical lattice strain are 
playing an increasingly important role. One reason for this is that as device
dimensions have shrunk, strains due to lattice mismatch or differences in 
thermal expansion have become more prevalent. Another is that strain has 
become an important tool in modifying and enhancing the electrical properties 
of the semiconductor materials. Large strain induced gains in both electron 
and hole mobilities have been reported. 

This example demonstrates how SILVACO tools can be used to simulate the 
creation of a 3D FinFET using Victory Process, calculate the internal strains 
using Victory Stress, and analyze its electrical characteristics using 
Victory Device.

Victory Process was used to generate the FinFET structure based on specifications
provided in a mask layout file using the 
{bold} Layout 
statement. 
Victory Process was used to build up a FinFET structure with a 50x50 nm fin, 1um 
in length. The fin was deposited on a SiO2 substrate layer and a 2 nm gate 
isolation layer separated it from the 50 nm polysilicon gate crossing it 
at right angles. A 100 nm Si3N4 capping layer was deposited on top of the 
structure.

The structure created by Victory Process was imported into Victory Stress, which 
was used to perform a stress analysis over the whole FinFET device structure.
The Si3N4 capping layer was set to have uniform hydrostatic tensile stress of 
1 GPa using the statement
{bold} material nitride intrin.sig=1e10 
The evaluation of mobility enhancement factors along the fin is based on a full 
3D piezoresistive model.

The structure, along with the stress/strain and mobility enhancement data, was 
then loaded into Victory Device for electrical simulation and analysis. Source 
and drain electrodes were defined at either end of the Silicon fin, the Polysilicon 
region was defined to be the gate, and we put a substrate contact at the bottom 
of the device. We also set the workfunction of the gate to 4.17 eV.

Aside from the standard silicon models (cvt, consrh, etc), we used the strain 
dependent mobility enhancement models 
{bold} nhance 
and
{bold} phance 
defined in the 
{bold} mobility 
statement for this simulation. The mobility enhancement models apply the second 
order mobility enhancement tensor (calculated by Victory Stress) directly to the 
low field mobility. This results in directionally dependent (anisotropic) electron 
and hole mobilities.

Electrical simulations show that the effect of stress/strain results in drive 
current increase as expected.

To load and run this example, select the
{bold} Load example 
button in DeckBuild Examples window. This will copy the input file and any support
files to your current working directory. Select the
{bold} Run 
button to execute the example.

{subsection} vsex03.in : Stress simulation for a SoC Transistor TEG

Requires: Victory Process and Victory Stress
{newline}
Minimum Versions: Victory Process 7.6.8.R, Victory Stress 2.4.8.R

In recent years, it has become increasingly important to investigate the effects 
of stress in MOS transistors for SoC (System on Chip) design because 
stress/strain effects are now used to improve the performance of the 
MOS transistors. 
Particularly, SoC transistor TEGs have attracted considerable attention in 
order to study the effects of stress liner films and the dependence on active 
region length, trench width, and gate-pitch.  

This example demonstrates a stress simulation for a SoC transistor TEG. 
The 3D structure is created by about 30 command lines with three mask layers 
(GATE, ACTIVE, and CONTACT) using Victory Process. A 3D mesh is created for the 
stress calculation.
 
Then the stress distribution is simulated by Victory Stress. First, the result 
from Victory Process is loaded. The parameters of the materials such as young modulas, 
poisson ratio, and intrinsic stress are set. Then the matrix calculation method 
is set, and the stress is calculated. Finally, the structure, stress distribution 
and the stress enhanced mobility factors for electrons/holes are saved.    

To load and run this example, select the
{bold} Load example 
button in DeckBuild Examples window. This will copy the input file and any support
files to your current working directory. Select the
{bold} Run 
button to execute the example.

The image
{pngview}  vsex03_0_vp_ex.png
 shows the 3-D topography after trench etching using the mask of the active area.

The image
{pngview}  vsex03_1_vp_ex.png
 shows the 3-D topography after poly-silicon gates are formed using the mask of the gate.

The image
{pngview}  vsex03_2_vp_conformal_ex.png
 shows the 3-D topography after contacts are formed using the mask of the contact.

The image
{pngview}  vsex03_3_vp.png
 shows the stress distribution (sigmaXX) for the final 3-D structure.

The image
{pngview}  vsex03_4_vp.png
 shows the distribution of the enhanced factor for the electron's mobility.

The file
{txtview} vsex03.in
is the input deck for Victory Process and Victory Stress.

{subsection} vsex04.in : Stress simulation for a extremely thin SOI (ETSOI) CMOS

Requires: Victory Process and Victory Stress
{newline}
Minimum Versions: Victory Process 7.6.8.R, Victory Stress 2.4.8.R

Extremely thin SOI (ETSOI) devices are attractive for low power applications. The integration scheme
of the ETSOI technology allows formation of  raised source/drain (RSD) extensions
for both NFET and PFET by using a single mask. Another feature of ETSOI CMOS is the combination of
two strain enhancement techniques, (1) Si:C RSD for NFET and SiGe RSD for PFET,
and (2) stress liner effect coupled with faceted RSD.

Details and features of the ETSOI CMOS can be found in [1], [2]. This example demonstrates stress
simulation for ETSOI CMOS. Geometry parameters are taken from Figs.3 and 4, of Ref. [2]. 
The nominal gate length for this simulation is 26nm. The stress simulation has been performed for a
half of the device due to its symmetry.
The following geometry parameters can be changed in this simulation in order to investigate
the influence of the device geometry on stress distribution, and, therefore, on device performance:
1) - the gate length; 2) - the gate height; 3) - the RSD height; 4) - the thickness of stress liner;
5) -  the gate oxide thickness; 6) - the thickness of silicon on insulator (SOI); 
7) - the thickness of bottom oxide; 8) - proximity of the bottom of RSD to the gate; 
9) - proximity of the top of RSD to the gate (in case of faceted RSD); 
10) - the width of simulation domain.  
Also, the following 5 logical parameters can be used to vary simulation conditions: 

{bold} flag_faceted_RSD 
specifies that RSD has a slopped edge;

{bold} flag_RSD 
specifies that RSD serves as a stressor;

{bold} flag_liner 
specifies nitride stressor;

{bold} flag_poly 
specifies that poly serves as a stressor;

{bold} mat_RSD 
specifies that materials for RSD, mat_RSD=-1 corresponds to SiGe and mat_RSD=1 corresponds to Si:C. 

All above parameters can be varied  or used in design of experiments. The nominal values of
parameters are set to correspond to conditions presented in Figs. 3 and 4 of [2].

The 2D structure is obtain by Victory Process running in 2D mode and is subsequently used in Victory
Stress. The isotropic model for stress simulations is used in this simulation since 
the structure is 2D. Thereofre, the elastic properties of Si, SiGe, and  Si:C 
are considered to be the same as for polysilicon. All parameters mentioned 
above could be changed. Each run of this example produces stress distributions 
for three types of stressors: first is for RSD regions either of SiGe with 
negative intrinsic stress or of Si:C with positive intrinsic stress; the 
second is the stress-liner made of nitride; the third one is the stress 
memorized in the gate. As a result of the simulations the four files will be 
saved for two geometries of RSD (vertical and faceted) and for all three 
stressor types. 

In case of vertical RSD these four files are: vsex04_0.str 
(initial structure), vsex04_2.str (RSD-stressor), vsex04_4.str 
(stress-liner), and vsex04_6.str (poly gate stressor).

In case of faceted RSD these four files are: vsex04_1.str 
(initial structure), vsex04_3.str (RSD-stressor), vsex04_5.str 
(stress-liner), and vsex04_7.str (poly gate stressor).

To load and run this example, select the
{bold} Load example 
button in DeckBuild Examples window. This will copy the input file and any support
files to your current working directory. Select the
{bold} Run 
button to execute the example.


[1] K. Cheng, et al, Symp. VLSI Tech, 2009, p.212

[2] K. Cheng, et al, IEDM 2009, p. 49
{subsection} vsex05.in : Stress Effect on ETSOI IV characteristics

Requires: Athena Victory Stress and Atlas 
{newline}
Minimum Versions: Athena 5.21.2.R, Victory Stress 2.4.8.R, Atlas 5.19.20.R

Extremely thin SOI (ETSOI) devices are attractive for low power applications. The integration scheme
of the ETSOI technology allows formation of  raised source/drain (RSD) extensions  
for both NFET and PFET by using a single mask. Another feature of ETSOI CMOS is the combination of
two strain enhancement techniques, (1) Si:C RSD for NFET and SiGe RSD for PFET,  
and (2) stress liner effect coupled with faceted RSD.

Details and features of the ETSOI CMOS can be found in [1], [2]. Please refer to vsex04.in 
for a comprehensive description of the stress simulation.

The 2D structure is created in Athena and subsequently used in Victory Stress. In this
example we compare, IV characteristics obtained using Atlas, with stress-liner made 
of nitride with two geometries of RSD (vertical and faceted). 

Aside from the standard silicon models (cvt, srh, etc), we used the strain 
dependent mobility enhancement models 
{bold} nhance 
and
{bold} phance 
defined in the 
{bold} mobility 
statement  for this simulation. The mobility enhancement models apply the second 
order mobility enhancement tensor (calculated by Victory Stress) directly to the 
low field mobility. This results in directionally dependent (anisotropic) electron 
and hole mobilities. For the model to take effect the enhancement factors 
must be included in the structure file simulated by Victory Stress. This is done by 
setting 
{bold} nhance 
and
{bold} phance 
defined in the 
{bold} mobility 
statement of Victory Stress.

Electrical simulations show that the effect of stress/strain results in drive 
current increase and as shown in [2] higher increase with faceted RSD.

To load and run this example, select the
{bold} Load example 
button in DeckBuild Examples window. This will copy the input file and any support
files to your current working directory. Select the
{bold} Run 
button to execute the example.


[1] K. Cheng, et al, Symp. VLSI Tech, 2009, p.212

[2] K. Cheng, et al, IEDM 2009, p. 49

{subsection} vsex06.in : Stress Simulation in n-FinFET device

Requires: Victory Process and Victory Stress
{newline}
Minimum Versions: Victory Process 7.6.8.R , Victory Stress 2.4.8.R

The most common method of introducing desirable stresses into transistor channel region 
is the deposition of high tensile or high compressive films of nitride type materials.

A tensile film (when intrinsic stress value is positive) improves drive current in n-devices due 
to enhancement of electron mobility whereas a compressive film (when intrinsic stress value is 
negative) enhance the hole mobility for n-device.

This example is the first of two examples devoted to simulation of stresses and mobilities in a 
3D invertor cell. This example shows stress simulation in a single n-FinFET device while the 
next example vsex07 deals with the cell consisted from several FinFETs. Detailed results of 
these two examples are presented in the paper in Simulation Standard:

www.silvaco.com/tech_lib_TCAD/simulationstandard/2012/jan_feb_mar/a1/a1.html

The input deck consists of five Sections:
 
{bullet} Definition of geometrical domain and region limits for subsequent consistent mesh formation
{newline}
{bullet} Victory Process process steps
{newline}
{bullet} Cartesian mesh formation and saving the structure for stress calculation
{newline}
{bullet} Stress calculation
{newline}
{bullet} Visualization and analysis of simulation results, extraction of average stresses and mobility enhancement factors
{newline}


All details of device structure, simulation mesh, material parameters, process flow,
as well as visualization and  extraction procedures are described in comments within the input deck.  

To load and run this example, select the
{bold} Load example 
button in DeckBuild Examples window. This will copy the input file and any support
files to your current working directory. Select the
{bold} Run 
button to execute the example.

{bold} Note: 
To run this example you have to enable 
{bold} System commands 
in the
{bold} Options 
menu from
{bold} DeckBuild: Main Control
.

{subsection} vsex07.in : Stress Simulation in Inverter Cell

Requires: Victory Process and Victory Stress
{newline}
Minimum Versions: Victory Process 7.6.8.R , Victory Stress 2.4.8.R

The most common method of introducing desirable stresses into transistor channel region 
is the deposition of high tensile or high compressive films of nitride type materials.

This example is the second of two examples devoted to simulation of stresses and mobilities in a 
3D invertor cell. This example shows stress simulation in an inverter cell consisted of one n-type 
FinFET and two p-type FinFETS located parallel to each other. The previous example vsex06 deals 
with details of a separate n-FinFET. Detailed results of these two examples are presented in the 
paper in Simulation Standard:

www.silvaco.com/tech_lib_TCAD/simulationstandard/2012/jan_feb_mar/a1/a1.html

The input deck consists of five Sections:
 
{newline}
{bullet} Definition of geometrical domain and region limits for subsequent consistent mesh formation
{newline}
{bullet} Victory Process process steps
{newline}
{bullet} Cartesian mesh formation and saving the structure for stress calculation
{newline}
{bullet} Stress calculation
{newline}
{bullet} Visualization and analysis of simulation results, extraction of average stresses and mobility enhancement factors
{newline}


All details of device structure, simulation mesh, material parameters, process flow,
as well as visualization and  extraction procedures are described in comments within the input deck.  

To load and run this example, select the
{bold} Load example 
button in DeckBuild Examples window. This will copy the input file and any support
files to your current working directory. Select the
{bold} Run 
button to execute the example.

{bold} Note: 
To run this example you have to enable 
{bold} System commands 
in the
{bold} Options 
menu from
{bold} DeckBuild: Main Control
.

{subsection} vsex08.in : Use of Stress Evolution Model for Thick Stress Deposition in 2D

Requires: Athena and Victory Stress
{newline}
Minimum Versions: Athena 7.6.8.R , Victory Stress 2.4.8.R

Most commercial process and stress simulators consider deposition not as a physical process governed
by a time-dependent model, but rather as a mathematical abstraction in which a new layer just appears on
the top of the structure.  
In these simulators the stress equations are solved after a material layer or region has been
already added to the structure and not during the physical process of deposition.
This one-step approach couldn't accurately predict stresses built in the deposited layer and in
adjacent areas. 

In order to accurately predict stresses in  thick layers the process should be considered as a
series of deposition and relaxation steps to emulate mechanical quasi-equilibrium during this
physical deposition process. 
This more accurate simulation could be achieved by using "stress evolution" or "stress history"
model implemented in Victory Stress. 

This example demonstrates how the stress evolution model can be applied to the simulation of
stresses generated during thick layer deposition process and compare the results with standard
one-step model. Detailed results of this example are presented in Simulation Standard paper
"Simulation of Stress Evolution During Semiconductor Device Fabrication":

http://www.silvaco.com/tech_lib_TCAD/simulationstandard/2012/jul_aug_sep/jul_aug_sep2012.pdf 

The input deck consists of five sections:

{newline} 
{bullet} Formation of a test structure with one layer nitride stressor in Athena
{newline}
{bullet} Calculation of stresses in the test structure using the one-step model of Victory Stress
{newline}
{bullet} Formation of a test structure with multi-layer stressor in Athena 
{newline}
{bullet} Calculation of stresses using stress evolution model of Victory Stress and "looping" capability of DeckBuild
{newline}
{bullet} 2D visualization and average stress extraction for both models
{newline}


The stress evolution simulation uses the same structure  with 20 layers at each step while the effect
of new sub-layer deposition is emulated by changing the status of this new sub-layer from
"non-active" with properties inherited from "air" to "active" material region with properties
inherited from nitride and the intrinsic stress of 1 GPa. Then Victory Stress recalculates stresses
in the modified structure after each deposition step.

The simulation results are shown in two plots which compare Sxx and Syy stresses for two models. In
flat areas of deposited layer, both models produced similar and essentially uniform stress.
In the single layer case non-uniform stress regions appear only near corners of spacer/nitride.
However, in case of multi-layer stress history simulation a highly non-uniform stress field extends
diagonally from the spacer/substrate corner to the top of the film.  
In other words, stresses are significantly higher where the layers are sharply bent. 
As the result the integrated stresses under the gate appear to be 1.4 - 2 times higher when the
stress history method is used. The extracted averaged stresses are calculated and saved in
vsex08_0.dat and vsex08_1.dat. 


To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{bold} Note: 
To run this example you have to enable 
{bold} System commands 
in the
{bold} Options 
menu from
{bold} DeckBuild: Main Control
.

{subsection} vsex09.in : Use of Stress Evolution Model for Thick Stress Deposition in 3D

Requires: Victory Process and Victory Stress
{newline}
Minimum Versions: Victory Process 7.6.8.R , Victory Stress 2.4.8.R

This example is essentially a 3D version of the example vsex08. 

Most commercial process and stress simulators consider deposition not as a physical process governed  
by a time-dependent model, but rather a mathematical abstraction in which a new layer just appears on
the top of the structure. In these simulators the stress equations are solved after a material layer
or region has been already added to the structure and not during the physical process of
deposition. This one-step approach couldn't accurately predict stresses built in the deposited layer
and in adjacent areas. 

In order to accurately predict stresses in thick layers the process should be considered as a
series of deposition and relaxation steps to emulate mechanical quasi-equilibrium during this
physical deposition process. 

This more accurate simulation could be achieved by using "stress evolution" or "stress history"
model implemented in Victory Stress. 
More details regarding differences of the two models can be found in the Simulation Standard paper
"Simulation of Stress Evolution During Semiconductor Device Fabrication":

http://www.silvaco.com/tech_lib_TCAD/simulationstandard/2012/jul_aug_sep/jul_aug_sep2012.pdf 


This example demonstrates how the stress evolution model can be applied to simulation of stresses
generated during thick layer deposition process and compare the results with standard one-step
model. The test structure used in this example is a quarter of a a 40 nm MOS transistor. 

The input deck consists of five sections:

{newline} 
{bullet} Formation of a test structure with one layer nitride stressor in Victory Process. The
structure is shown in the first 3D plot. 
{newline}
{bullet} Calculation of stresses in the test structure using the one-step model of Victory Stress
{newline}
{bullet} Formation of a test structure with multi-layer stressor in Victory Stress. The structure is
shown in the second 3D plot.
{newline}
{bullet} Calculation of stresses using stress evolution model of Victory Stress and "looping"
capability of DeckBuild 
{newline}
{bullet} 3D and 2D visualization of simulation results for both models
{newline}


The stress evolution simulation uses the same structure with 20 layers at each step while effect
of new sub-layer deposition is emulated by changing the status of this new sub-layer from
"non-active" with properties inherited from "air" to "active" material region with properties
inherited from nitride and the intrinsic stress of 1 GPa. Then Victory Stress recalculates stresses
in the modified structure after each deposition step. 

The simulation results are shown in two 3D plots which compare Sxx stresses for two models. The Sxx
stresses are also compared in two cut planes: Y-Z (vertical plane which roughly corresponds to 2D
simulation of example vsex08) and X-Y (horizontal plane just 1 nm under silicon surface). The
first of 2D comparison plots is very similar to 2D simulation of example vsex08. It shows that
the stress evolution model predicts higher stress level under the gate. This fact is even better
illustrated in the second X-Y plane. The upper-left corner of this cut plane corresponds to the
gate area.

To load and run this example, select the
{bold} Load example 
button in DeckBuild. This will copy the input file and any support
files to your current working directory. Select the
{bold} run 
button to execute the example.

{bold} Note: 
To run this example you have to enable 
{bold} System commands 
in the
{bold} Options 
 menu from
{bold} DeckBuild: Main Control
.

{section} CLEVER : Cell Level Interconnect Parasitics 


{subsection} clex01.in : Metal Elbows with Manhattan Geometry 

Requires: CLEVER

CLEVER is used in this example to simulate an "L" shaped metal region, often found in custom cells, which is insulated from the silicon substrate by a 
0.5um oxide layer. The processing steps are very simple requiring only etching and deposition.

As with any CLEVER simulation the process etching steps are driven from a layout file generated from MaskViews. This file will be included in the support files when this example is loaded.

A basic etch and deposition model is used whereby a uniformly thick layer of metal is deposited and etched. This results in the classical "manhattan" 
 geometry where the rectangular shaped structures have the appearance of a Manhattan skyline.

Once the process simulation is complete the three-dimensional structure is saved with the 
{bold} Save
 statement and can be plotted using 
{bold} TonyPlot3d.

Finally the interconnect parasitic extraction is carried out using the 
{bold} Interconnect
 statement. Firstly, however, the material parameters of silicon are defined using the 
{bold} Material
 statement so that in this case silicon "inherits" the same material properties as silicon. In this example only the parasitic capacitance values are calculated
 from the field solver. During this calculation automatic mesh adaption is performed with the 
{bold} Adapt
 parameter whereby the mesh is modified until the error in the capacitance extraction is reduced to the default maximum of 5% of the capacitance. The structure and the SPICE netlist are then saved.

To load and run this example, select the 
{bold} Load example
 button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the 
{bold} run
 button to execute the example.

{subsection} clex02.in : Metal Elbows with Etch Models 

Requires: CLEVER

CLEVER is used in this example to simulate an "L" shaped metal region, often found in custom cells, which is insulated from the silicon substrate by a 
0.5um oxide layer. The processing steps are very simple requiring only etching and deposition.

As with any CLEVER simulation the process etching steps are driven from a layout file generated from MaskViews. This file will be included in the support files when this example is loaded.

A more advanced etching model is used compared with the previous example. In this model etching is performed along a material boundary at a specified 
{bold} Rate
 and 
{bold} Time
. An 
{bold} Isotropic
 component is also specified so that etching is performed laterally as well as vertically. This results in the "non-manhattan" 
 geometry where the sidewalls are no longer vertical but may have a "slope".

Once the process simulation is complete, the three-dimensional structure is saved with the 
{bold} Save
 statement and can be plotted using 
{bold} TonyPlot3d.

Finally the interconnect parasitic extraction is carried out using the 
{bold} Interconnect
 statement. Firstly, however, the material parameters of silicon are defined using the 
{bold} Material
 statement so that in this case silicon "inherits" the same material properties as silicon. In this example only the parasitic capacitance values are calculated
 from the field solver. During this calculation automatic mesh adaption is performed with the 
{bold} Adapt
 parameter whereby the mesh is modified until the error in the capacitance extraction is reduced to the default maximum of 5% of the capacitance. The structure and the SPICE netlist are then saved.

To load and run this example, select the 
{bold} Load example
 button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the 
{bold} run
 button to execute the example.

{subsection} clex03.in : Metal Elbows with Lithography Models 

Requires: CLEVER

CLEVER is used in this example to simulate an "L" shaped metal region, often found in custom cells, which is insulated from the silicon substrate by a 
0.5um oxide layer. The processing steps are very simple requiring only etching and deposition.

As with any CLEVER simulation the process etching steps are driven from a layout file generated from MaskViews. This file will be included in the support files when this example is loaded.

A more physical etch model is applied, compared with the previous example, where optical lithography is used. Now the wavelength of light is defined with the 
{bold} Illumination
 statement and optical lithography enabled with the 
{bold} Litho
 parameter of the 
{bold} Mask
 statement. This simulates the deposition of resist and its imaging through the
 mask. The resultant resist shape therefore becomes much more physical so that when the subsequent etch is performed a much more realistic metal shape is produced compared to Example 1. The etching model in this example is the same as in Example clex01.in.

Once the process simulation is complete the three-dimensional structure is saved with the 
{bold} Save
 statement and can be plotted using 
{bold} TonyPlot3d.

Finally the interconnect parasitic extraction is carried out using the 
{bold} Interconnect
 statement. Firstly, however, the material parameters of silicon are defined using the 
{bold} Material
 statement so that in this case silicon "inherits" the same material properties as silicon. In this example only the parasitic capacitance values are calculated
 from the field solver. During this calculation automatic mesh adaption is performed with the 
{bold} Adapt
 parameter whereby the mesh is modified until the error in the capacitance extraction is reduced to the default maximum of 5% of the capacitance. The structure and the spice netlist are then saved.

To load and run this example, select the 
{bold} Load example
 button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the 
{bold} run
 button to execute the example.

{subsection} clex04.in : Metal Elbows with Etch and Lithography Models 

Requires: CLEVER

CLEVER is used in this example to simulate an "L" shaped metal region, often found in custom cells, which is insulated from the silicon substrate by a 
0.5um oxide layer. The processing steps are very simple requiring only etching and deposition.

As with any CLEVER simulation the process etching steps are driven from a layout file generated from MaskViews. This file will be included in the support files when this example is loaded.

The deposition model remains the relatively simple model used and described in example clex01.in.
 However, for the etching process, this example has combined the non-manhattan etch model from example clex02.in with the physical lithographic masking and imaging from example clex03.in. 
The structure produced from this combination of models should therefore simulate reality to a much greater extent than the previous examples.

Once the process simulation is complete, the three-dimensional structure is saved with the 
{bold} Save
 statement and can be plotted using 
{bold} TonyPlot3d.

Finally the interconnect parasitic extraction is carried out using the 
{bold} Interconnect
 statement. Firstly, however, the material parameters of silicon are defined using the 
{bold} Material
 statement so that in this case silicon "inherits" the same material properties as silicon. In this example only the parasitic capacitance values are calculated
 from the field solver. During this calculation automatic mesh adaption is performed with the 
{bold} Adapt
 parameter whereby the mesh is modified until the error in the capacitance extraction is reduced to the default maximum of 5% of the capacitance. The structure and the SPICE netlist are then saved.

To load and run this example, select the 
{bold} Load example
 button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the 
{bold} run
 button to execute the example.


{subsection} clex05.in : Resistance of Metal Fork 

Requires: CLEVER

CLEVER is used in this example to simulate a more complex interconnect metal path.
 Such a complex shape adds additional problems to the extraction of the parasitics, especially the resistance along the metal lines.

The metal regions defined in this example have a number of electrodes, specified within their boundaries.
 As such it is clear that when the simulator extracts the resistance between electrodes certain regions along the metal path could be taken into account more than once.

To overcome this problem Clever will automatically subdivide the metal line into individual electrodes so that no region is included more than once in the parasitic resistances.
 These additional nodes are then back annotated onto the layout which is then re-saved at the end of the simulation.

To load and run this example, select the 
{bold} Load example
 button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the 
{bold} run
 button to execute the example.


{subsection} clex06.in : EXNOR Cell with Manhattan Geometry

Requires: CLEVER

This example is based upon an EXNOR custom cell layout and illustrates how CLEVER may be used to extract the full parasitic netlist from a complete cell.

Beginning from the process description, a 3-dimensional structure is created from which the resistance and capacitance are extracted using a field solver. The 
{bold} Adapt
 parameter on the 
{bold} Interconnect
 statement is used to specify the accuracy required by the field solver. The values of 0.1 and 0.05 require an accuracy of +/- 10% and 5% respectively.

Once the netlist is extracted it may be used in a SPICE input deck to anlayse the influence of cell parasitics on circuit performance.
 When this example is loaded support files that may be run in SmartSpice to show the circuit behaviour will also be loaded.  

This example has been described within the CLEVER tutorial in the manual. For further information on this example please read the CLEVER tutorial chapter.


To load and run this example, select the 
{bold} Load example
 button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the 
{bold} run
 button to execute the example.


{subsection} clex07.in : EXNOR Cell with Physical Geometry 

Requires: CLEVER

This example is identical to example clex06.in except that the etching models 
have been upgraded to a more physical 87 degree side-wall. 
The same EXNOR custom cell layout is used and illustrates how CLEVER may be
used to analyse the effect of the etching model on a complex custom cell.

The extracted netlist may be used in a SmartSpice input deck to analyse the
circuit performance which can then be compared to the previous example.

When this example is loaded support files, that may be run in SmartSPice to
show the circuit behaviour, will also be loaded.  

It should be noted that the high resolution geometries created by the realistic
physical process models used in this example require a usable memory of
approximately 300MB to run the parameter extraction programs due to the
intricate mesh thus created.  The simulation can be run on machines with less
memory but the program may take a significantly longer time to run due 
memory swapping between the RAM and hard disk.

To load and run this example, select the 
{bold} Load example 
button while this text is displayed. The input file and several support
files will   be copied to your current working directory at this time.
Once loaded into DeckBuild, select the
{bold} run
button to execute the example.


{subsection} clex08.in : Inverter Cell with Manhattan Geometry 

Requires: CLEVER

An inverter is one of the most common cells found in layouts. This example contains one inverter cell designed with 4 NMOS and 4 PMOS transistors. 
It is an illustration of how Clever inserts auxilliary nodes, as in example clex05.in, where necessary into the layout. 
The back-annotated layout may then be re-plotted in MaskViews. The etching process in this example is the simplest manhattan type.

This example has been used in the CLEVER tutorial in the manual and more information on it can be found there.

To load and run this example, select the 
{bold} Load example
 button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the 
{bold} run
 button to execute the example.



{subsection} clex09.in : Inverter Cell with Physical Geometry 

Requires: CLEVER

An inverter is one of the most common cells found in layouts. This example 
contains one inverter cell designed with 4 NMOS and 4 PMOS transistors. 
It is an illustration of how Clever inserts auxilliary nodes, as in example 
clex05.in, where necessary into the layout. 
The back-annotated layout may then be re-plotted in Maskviews. 

In this example, the etching process has the more physical 87 degree angled 
side-wall, so the structure was created using VictoryPorcess in cell mode.

This example has been used in the CLEVER Tutorial and more information on it 
can be found there.

To load and run this example, select the 
{bold} Load example 
button while this text is displayed. The input file and several support
files will   be copied to your current working directory at this time.
Once loaded into DeckBuild, select the
{bold} run
button to execute the example.



{subsection} clex10.in : Inverter Cell with Lithographic Geometry 

Requires: CLEVER

An inverter is one of the most common cells found in layouts. This example 
contains one inverter cell designed with 4 NMOS and 4 PMOS transistors. 
It is an illustration of how Clever inserts auxilliary nodes, as in example 
clex05.in, where necessary into the layout. 
The back-annotated layout may then be re-plotted in Maskviews. 

This example applies lithographic techniques to more accurately simulate the 
non-uniform barrier layer, formed by the resist after the imaging 
photolithographic stage.  VictoryProcess is called upon once again to simulate
the non Manhatton structure creation.  The etching process also uses a more 
physical 87 degree angled side-wall.

This example has been used in the CLEVER Tutorial and more information on it 
can be found there.

To load and run this example, select the 
{bold} Load example 
button while this text is displayed. The input file and several support
files will   be copied to your current working directory at this time.
Once loaded into DeckBuild, select the
{bold} run
button to execute the example.


{subsection} clex11.in : SRAM Cell with Multiple Metals and Dielectrics  

Requires: CLEVER

Modern designs make use of mask layers which are not always at right angles to each other. The layout used in this example illustrates a 45 degree angle for certain mask layers. 
This would normally make the calculation of parasitic resistances very difficult, but with CLEVER this is handled easily.

In many cases the back-end processing makes use of different non-standard materials for the insulators and the metal conductors.

This example is based upon the simulation of an SRAM cell which consists of four different metal layers, plus polysilicon. 

The initial processing stages demonstrate how Clever allows deposition of user-defined materials. Once the structure has been created these new materials can then be displayed within TonyPlot3D.

Before the parasitic extraction takes place using the 
{bold} Interconnect
 statement, the physical parameters of the new materials are defined using the 
{bold} Material
 statement. 

This example has been used in the CLEVER tutorial in the manual and further information may be obtained there.

To load and run this example, select the 
{bold} Load example
 button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the 
{bold} run
 button to execute the example.

{subsection} clex12.in : Performing a 2D Interconnect Simulation in Clever

Requires: CLEVER

A useful option included within Clever is its ability to operate in 2D or 1D 
mode.  This greatly reduces simulation time and allows the user to
check that important aspects of the process are correctly implemented.

This example consists of three layers of metal to illustrate the use of the
{bold} Cut line 
 feature in order to generate a 2D simulation.  The example then goes on to
perform the full 3D simulation of the same structure.  It will be noted that
the 3D simulation takes significantly longer to perform tasks such as the
capcitance matrix calculation.

This example also demonstrates the use of the
{bold} box
 command which forces Clever to increase the effective mask size by using the given
coordinate around the edge of the masks leading to a 3D simulation. 
This ensures that fringing capacitances are better accounted for by increasing
the volume around the perimeter which is meshed therefore increasing the
volume within which fringing field lines are solved.

Comparison of the 3D and 2D capacitance matricies yields the expected result of
larger capacitances for the 3D simulation.  This is because fringing
capacitances in the 2D simulation in the Z direction are effectively eliminated.
Notice the greatly reduced capacitance in the 2D calculation for non adjacent
layers which are effectively shielded in the Z direction.  Compare these
results with the full 3D simulation where significant fringing capacitance
occurs along the length of the structures.

Once the process simulation is complete the three-dimensional structure is
saved with the 
{bold} Save
 statement and can be plotted using 
{bold} TonyPlot3d.

To load and run this example, select the 
{bold} Load example
 button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the 
{bold} run
 button to execute the example.



{subsection} clex13.in : Local Interconnect - MOS Current Source

Requires: CLEVER

This example demonstrates the use of CLEVER to analyze non planerised structures
such as local interconnects commonly used in current sources and in memory 
cells.  To emphasise the true 3D capability CLEVER, a MOSFET with
TiN (titanium nitride) local interconnect between drain and gate is
implemented using a trench isolation structure together with realistic layer
depositions.

The 3D structure is created using the 3D process simulator VictoryProcess, 
and is then loaded into Clever for the resiistance extraction.

At the end of the 3D process simulation, a 2D cutline of the structure is
plotted to show a representative cross sectional view of the created device.
This 2D cross section may be plotted without running the simulation from the
stored structure file called "clex13_2D.str" by using the standard
{bold} tonyplot
program.  The 3 dimensional structure file can be plotted using
{bold} tonyplot3d.
It should be noted that when using the 
{bold} padding
command to create a wider boarder around the masks in conjunction with the
{bold} cut line
statement, a warning in the runtime output will occur informing the user that
the cutline defined is larger than the mask area.  This is to be expected since
the padding command generates a larger simulation volume.  This warning can
therefore be ignored.

The resistance of the local interconnect is extracted using the
{bold} Interconnect Resistance Adapt
statement in the usual way after defining the conductivity of the TiN material.
The value of the extracted resistance is stored in clex14.net.

To load and run this example, select the 
{bold} Load example 
button while this text is displayed. The input file and several support files
will be copied to your current working directory at this time.  Once loaded
into DeckBuild, select the
{bold} run
button to execute the example.



{subsection} clex14.in : Non Planarized, Low k Dielectric Capacitance Analysis

Requires: CLEVER

This example demonstrates the ability of CLEVER
 to deposit and field solve non planarised, multi-layer films for interconnect
capacitance analysis using CLEVER.
   The simulation is run in 2D
 as there is little to be gained by running the demonstration in 3D.  The user
may force the simulator to do the full 3D simulation by simply commenting
out the
{bold} cut line
 statement, together with the TonyPlot statement (since in this case there will
be no 2D structure for TonyPlot to plot).  As with example 14, the message:

{italic} Warning: point is outside of layout domain

 in the runtime output may be ignored since the program is merely informing the
user that the cut line is bigger than the mask size due to the use of the
{bold} padding
 statement which creates a larger boarder volume in order to improve accuracy.

To load and run this example, select the 
{bold} Load example
 button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the 
{bold} run
 button to execute the example.


{subsection} clex15.in : Local Oxidation (LOCOS)

Requires: CLEVER

This example demonstrates the analytical local oxidation model (LOCOS) included
in CLEVER.  Oxidation can be included in the process flow to more accurately 
model the geometry around the active device areas.

The user can choose the resolution of the "birds beak" formed during the LOCOS
process by stipulating the
{bold} Resolution
 parameter.  The resolution can be set to
{bold} Resolution=low
, 
{bold} Resolution=medium
 or
{bold} Resolution=high
.

Once the process simulation is complete the three-dimensional structure is
saved with the 
{bold} Save
 statement and can be plotted using 
{bold} TonyPlot3d.
 A two dimensional cross section of the structure is also plotted automatically,
further demonstrating the 
{bold} Cut Line
 facility.


To load and run this example, select the 
{bold} Load example
 button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the 
{bold} run
 button to execute the example.

{subsection} clex16.in : SRAM Analysis for Back Annotation into SPICE model

Requires: CLEVER

This example is a six-transistor, three metal, single poly SRAM cell.
The cell consists of four NMOS and two PMOS transistors.

The layout file defines various layers up to metal 3.  The rule file
exports six new masks, plus CLEVER defines another two masks -
{bold} *GATE 
 and 
{bold} *CONT.  
 These masks are gates and contacts, which are the NGATE and PGATE 
regions, plus the two exported contacts.  The modified layout
and a SPICE netlist of the devices are saved after the 
original layout file is initialized in the command file
and the rule file executed in the command file.

The gate oxide is defined as a separate material, called 
{bold} Gateox,
 distinct from silicon oxide.  
{bold} Gateox 
 is given a very low (but non-zero) permittivity.  As a result, 
the area calculation of
capacitance (i.e. determined by the transistor gate area over the
gate oxide and silicon) is very low.  This area capacitance of the 
gate over silicon is accurately calculated in
the SPICE model (since only the area and gate oxide thickness are
necessary).  Since CLEVER calculates the total field solution, it does
not distinguish the contribution of the capacitance due to the poly gate
over the silicon from either the fringe effects or capacitance with
other conducting lines.  This methodology of artificially lowering the
area capacitance in CLEVER avoids calculating this value twice,
once in CLEVER, and once again in the SPICE model.

The geometry of the structure is the idealized Manhattan cross-sections.
No advanced lithographic or etch models are used.

This example is also discussed in the CLEVER tutorial in the manual.

To load and run this example, select the 
{bold} Load example
 button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the 
{bold} run
 button to execute the example.



{subsection} clex17.in : Creating the clex16 SRAM structure in Victory Process

Requires: CLEVER, VICTORYPROCESS
Minimum Versions: Clever 3.10.13.A,  VictoryProcess 7.7.6.A

This example creates the same SRAM design as in clex16, but uses the Victory 
Process simulator to create a more realsitic structure. 

The more realistic structure is a result of three features in Victory Process:

Fisrstly, an optical solver creates an optical intensity map during photoresist
exposure from a user specifiable deep-UV light source, through a lens of user
specifiable numerical aperture (0.5 in this particular case).  The mask can 
also be deliberately defocussed by a user specifyable distance in um, above or
below the surface of the photoresist, using the
{bold} "maskdefocus"
parameter.

Secondly, photoresist mask development profile is calculated from an intensity 
contour map specifyable by the user as developing somewhere between zero 
intensity, and full intensity represented by specifying the 
{bold} "criticalintensity"
parameter.  A value of 0.5 was used in this example.

Thirdly once the photoresist mask pattern has been simulated, a geometric etch
feature is used to create sloped sidewalls of 87 degrees relative to horizontal.

To load and run this example, select the 
{bold} Load example
 button in DeckBuild. This will copy the input file and any support files to 
your current working directory. Select the 
{bold} run
 button to execute the example.



{subsection} clex18.in : GDS2, netlist reduction and contact statement

Requires: CLEVER

We show in this example that CLEVER can be used with a gds2 layout format
as input. The commands used are
{bold} GDS2="layout.gds"
 and
{bold} cell="cell_number1" 
 which allow the user to load a gds2file  and select a specific cell in the layout.

Netlist reduction for capacitance and resistance extraction are also available
in CLEVER. Since we perform the capacitance and resistance extraction with one
Interconnect command, we need to define two different minvalues. Therefore
the keywords 
{bold} minRES
 and 
{bold} minCAP 
 have to be set in the 
{bold} Interconnect 
 command like: 
   
Interconnect minRES = 0.001 minCAP=1.0e-18.
     
Finally we show in this example that the Interconnect statement was extended 
by the option
{bold} Contact = <string>.
 This allows the user to specify one particular conductor for which
CLEVER extracts the capacitance values with respect to all other
conductors. If more than one interconnect statements are invoked during
the course of the simulation, the last results of capacitance calculation
will replace the previously calculated values that already exist in the
netlist.

To load and run this example, select the 
{bold} Load example
 button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the 
{bold} run
 button to execute the example.

{subsection} clex19.in : Mesh Refinement 

Requires: CLEVER

This example illustrates the adaptative meshing capability of CLEVER.
You can see the evolution of the mesh refinement using the 
 command:    
{bold} interconnect capacitance AdaptC=0.04  structure="clex19".   
 As a result you get the following output: clex19.CAP.0.str, clex19.CAP.1.str,
clex19.CAP.2.str, ...... The numbers mean that if we specify 1 volt on conductor
i and 0 volt on other conductors, the capacitance values are calculated between
conductor i and other conductors. The file clex19.CAP.i.str is the final grid
structure after this simulation step.

To load and run this example, select the 
{bold} Load example
 button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the 
{bold} run
 button to execute the example.



{subsection} clex20.in : Simulating Micro-Loading Effects using Advanced Etching

Requires: CLEVER

Micro-loading etching effects describe the phenomenon whereby the effective
material etch rate depends on the hole size of the pattern masking layer.

This can be simulated using the advanced etching module in Victory Process.
Once the structure is created, it is loaded into Clever to simulate back end
parasitics.

The etch machine characteristics are described by the Fux, Topography and 
EtchDepoProperties statements.  Once the etch machine has been described, the
wafer is loaded into this virtual etch machine and is etched for 4 minutes.
The created trench structures are then filled with aluminum.  

For ease of observation of the micro-loading effects, a 2D cut line of the
3D structure is created and plotted, where it can be clearly seen that the
depth of each trench is dependent on the width of the trench.

To load and run this example, select the 
{bold} Load example 
button while this 
test is displayed.  The input file and several support files will be
copied to your current working directory.  Once loaded into DeckBuild,
select the 
{bold} run 
button to execute.


{subsection} clex21.in : Calculating Well Isolation and Source/Drain Capacitance

Requires: CLEVER Version 3.6.10 or Later

This example demonstrates how to:-

{bullet} Include well isolation depletion capacitance in the calculation.
{newline}
{bullet} Include source/drain depletion capacitance in the calculation.
{newline}
{bullet} Specify cyclical cell boundary conditions for emulating cascaded cells.


{bold} Including Well Capacitance in the Field Solver Parasitic Extraction

Diode isolated wells can be treated as a separate volume of silicon that is 
separated from the bulk wafer by a layer of insulator where the insulator 
thickness is the silicon depletion width and the insulator has the same 
permitivity as silicon.

For a first order calculation, the depletion width of a diode separated well 
or source/drain region increases with the square root of the doping 
concentration of the lowest doped side of the junction.  If you don't 
know the depletion width of the junctions, a good approximation can be 
obtained from the following formula:

Depletion Width (um) = SQRT ( 1e15 / Doping )

where the Doping is the volume doping of the lightly doped side of the 
junction in atoms/cm3.  So for 1e15/cm3 doping, use 1um, for 1e17/cm3, 
use 0.1um and for 1e19/cm3 use 0.01um etc.

In this example, the depletion region of the N-Well is simulated by first 
etching the silicon to the depth of the N-Well in the masked N-Well regions,  
and then by depositing a  0.1um thick film of a user defined material called 
{bold} "Nwell_Depletion"
 which is assigned a permittivity of 11.8 to match the permittivity of 
silicon.  The presumption here is that the nwell is bounded by a volume 
p-doping concentration of approximately 1e17/cm3.  Finally, the N-Well is 
then filled with silicon to represent the neutral region of the N-Doped well.


{bold} Including Well Capacitance in the Field Solver Parasitic Extraction

Simulating the Source/Drain diodes is the same process as the N-Well 
procedure described above, but with a thinner depletion insulating region 
of 0.02um to represent the higher doping in these regions.  The depletion 
capacitance of the source-drain diodes is simulated by using a user defined 
material called 
{bold} "SD_Depletion"
 and assigning it a permittivity of 11.8.  If you wish to remove this 
capacitance from the SPICE Netlist because it is decided to use the 
source/drain capacitance assigned to the active device model, then  
define the user defined material called "SD_Depletion", a permittivity value 
of say 0.1 such that the capacitance calculated will add less than 1% error 
to the SPICE Model Capacitance.  Do not assign any insulator a permittivity 
of zero, as this will cause discontinuities in the field solver


{bold} Specifying Cyclical Cell Boundary Conditions for Emulating Cascaded Cells

The simulated Inverter Cell in this example is cascadable such that numerous 
identical cells could be cascaded together to make a ring oscillator.  For 
this application, it is more appropriate to specify 
{bold} "CYCLIC"
 boundary conditions rather that the default 
{bold} "MIRROR"
 boundary conditions.  To specify CYCLIC boundary conditions, on the 
Interconnect Statement, specify:

{bold}   DomainBoundaryCondition="CYCLIC"

To load and run this example, select the 
{bold} Load example
 button in DeckBuild. This will copy the input file and any support files to your current working directory. Select the 
{bold} run
 button to execute the example.



{subsection} clex22.in : Liquid Crystal (LCD) Field Dependent Capacitance

Requires: CLEVER, VICTORYPROCESS

This example illustrates using Clever to simulate the physics in Liquid Crystal
films.  Liquid crystal films consist of long molecules, called 
{bold} directors 
which rotate in response to applied electric fields, that effectively supplies
a rotational torque.  The permittivity and hence the capacitance of these LCD
films, is highly directional and dependent on the the orientation of the long
molecules (directors). When an electric field is applied which rotates these 
molecules, the capacitance in the direction across the film, can change 
dramatically.  Clever simulates this physics, in order to calculate the voltage
(field) dependent capacitance of LCD layers.

The directional permittivities of the LCD versus director angle are defined in
the
{bold} setLC 
statement.

The layers which interface the LCD film can anchor the LCD molecules in a fixed
direction, regardless of applied field.  This creates an increasing angular 
rotation of the LCD molecules with applied field, the further they are away 
from these anchored interface regions.  These physical effects are also 
included in the simulations.  Specifying these fixed interface angles for top
and bottom interfaces is executed by the statements 
{bold} LCbndaryT 
and 
{bold} LCbndaryB 

Clearly, if an applied voltage changes the permittivity of a film, the stored
charge and capacitance is also voltage dependent. Since Q=CxV, where Q is 
stored charge, C is layer capacitance in a particular direction and V is 
applied voltage, mathematical instability can result at certain applied 
voltages due to the inter-dependence of all three parameters.  The purpose of
the 
{bold} cPenalty
parameter, is to introduce a modicum of numerical damping, to calm these 
numerical instabilities.

To load and run this example, select the 
{bold} Load example 
button while this 
test is displayed.  The input file and several support files will be
copied to your current working directory.  Once loaded into DeckBuild,
select the 
{bold} run 
button to execute.
{section} QUEST : 3D High Frequency Inductance Extractor 


{subsection} tutorial.in : Simulation of a simple square sided inductor

Requires: QUEST 
Minimum Versions: QUEST 2.0.2.R

This example is a square inductor. The input files for all examples 
are already in the software installation, and can be accessed using 
the DeckBuild GUI. Start
{bold} Deckbuild  
 with the command deckbuild then from the
{bold} Main Control  
 menu select
{bold} Examples. 
 Scroll down to the
{bold} QUEST 
 section, double-click to expand, then double-click 
on the required example. The description of the example is displayed.  
To load and run this example, select the  
{bold} Load example  
 button in DeckBuild. This will copy the input file, GDS II file and
results to your current working directory. Select the 
{bold} run  
 button to execute the example.

The GDSII file can be viewed in MaskViews, Expert or any other layout editing tool that 
can read GDSII format. The process is a generic process using six metal levels and 
standard values for the conductivity and permittivity.  

Since the inductor in this example has a diameter of approximately 400um, the depth 
of the substrate in the simulation was chosen to be 400um.  

A two port simulation is defined by using the reserved electrode name called 
"subs_ground". This grounds out the reference electrode for both the "IN" port and 
the "OUT" port of the two port network.  

All the results will be placed in a directory structure under the name "tutorial_db" 
which was defined with SAVE command.  

Three dimensional structure files can be viewed with TonyPlot3d.  All other RLCG and 
Q versus frequency data can be viewed with TonyPlot.  


{subsection} questex01.in : Create Electrodes 

Requires: QUEST 
Minimum Versions: QUEST 2.0.2.R

This example demonstrate how to created electrodes in QUEST. An electrode is the 
association of a label and a pad. To load and run this example, select the  
{bold} Load example 
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

The GDSII file can be viewed in MaskViews, Expert or any other layout editing tool that can read GDSII format. 

The GDS file is an octogonal inductor where only the "IN" label is present.  The objective
 is to create the "OUT" label and pads for both "IN" and "OUT". 
To create labels the 
{italic} addlabel 
 command is used. Label name and coordinates are specified. 
To create pads addpad command is used. This command used the existing labels in the 
GDS and automatically create corresponding pads with the size and datatype provided 
by the user.


{subsection} questex02.in : Create a "W element" spice model for coupled transmission lines

Requires: QUEST 
Minimum Versions: QUEST 2.0.2.R

To load and run this example, select the 
{bold} Load 
 example button while this text is displayed. To load and run this example, select the  
{bold} Load example  
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example. 

It is based on 3 parallel lines: 
{newline}
**********************************************************
{newline}
* three lines (100um) with the same conductivity. *
{newline}
{newline}
*  1st line: in1 -------- out1 width=1um *
{newline}
*                space=1um                *
{newline}
*  2nd line: in2 -------- out2 width=2um *
{newline}
*               space=0.5um              *
{newline}
*  3th line: in3 ------- out3 width=2um *
{newline}
{newline}
**********************************************************

This mode is dedicated to simulating uniform transmission lines. As an output we 
directly obtain files that can be simulated in a SPICE simulator. 
We can use the W-elements or S-parameters produced by QUEST depending on which  
simulation we want to run.

* W-elements: Used to model a coupled lossy uniform transmission line. It is
 based on RLGC Matrix versus frequency. W-elements can be used for any SPICE 
simulation (transient, AC...) and is a standard for major spice simulators including
SmartSpice. The File "questex02_RLGC_Transient.in" is an example of stimuli to study
the crosstalk between the 3 lines in a transient analysis. It directly loads the 
"questex02_welement.sp" file produced by quest. These files must be in the same directory.

* S-parameter:  Matrix of S-parameters (and Y and Z) versus frequency. It can be 
directly analyzed or used as input for other simulators (SPICE, RF simulator) for 
AC analysis. QUEST produces all the intermediary files to include them directly into 
SmartSpice. The File "questex02_S_devices.in" is an example of stimuli for
 SmartSpice to study the crosstalk between the 3 lines with an AC simulation.
 It shows that this phenomena is more important on high frequencies. It directly 
loads the "questex02_s_param.mod" and "questex02_s_param.par" 
produced by quest. These files must be in the same directory.


{subsection} questex03.in : Comparison of simulated and measured results for a square sided inductor

Requires: QUEST 
Minimum Versions: QUEST 2.0.2.R

To load and run this example, select the  
{bold} Load example  
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

This example is based on an IBM paper by Rob Groves et al. "Temperature Dependence of 
Q in Spiral Inductors Fabricated in a Silicon Germanium BiCMOS Technology" IEEE BCTM 
9.3 pp. 153-156 1996.  It shows the modeling of a 10nH spiral inductor that can be 
compared to measured results from the reference.

The GDSII file can be viewed in Maskviews, Expert or any other Layout editing tool that 
can read GDSII format. The input file was created using information from the paper.

The example demonstrates how to write the technology part of the input file. The
 attachment of electrode names in the GDSII layout file to bond/probe pads in the 
circuit is achieved by declaring the layer containing the text for the electrode names
 twice, once with text declared and once without text declared. These two layers (one 
with text declared and one without) are then electrically connected with the CONNECTION 
command to give the structure its electrode names.

Of note in the process part is the depth of the substrate and the height of the air 
above the device which is included into the modelled structure volume.  
It is vital for accurate inductance calculations, that the full volume of inductive 
flux lines are included.  As a general rule, a safe substrate depth and air height 
would be the diameter of the inductor being simulated.  Since the inductor in this 
example has a diameter of approximately 400um, the depth of the substrate in the 
simulation was chosen to be 400um.

It is also important to define both the conductivity and permittivity of the 
substrate for accurate modeling of the quality factor, Q, versus frequency.

A two port simulation is defined by using the reserved electrode name called 
"subs_ground". This grounds out the reference electrode for both the "IN" port 
and the "OUT" port of the two port network.

All the results will be placed in a directory structure under the name 
"questex03_db" which was defined with SAVE command.

Three dimensional structure files can be viewed with TonyPlot3d.  All other RLCG and 
Q versus frequency data can be viewed with TonyPlot.


{subsection} questex04.in : Simulation of an octagonal inductor

Requires: QUEST 
Minimum Versions: QUEST 2.0.2.R

This example is an octagonal inductor. To load and run this example, select the  
{bold} Load example 
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

The GDSII file can be viewed in Maskviews, Expert or any other Layout editing tool that 
can read GDSII format. The process is a generic process using six metal levels and 
standard values for conductivity and permittivity.

Since the inductor in this example has a diameter of approximately 300um, the depth 
of the substrate in the simulation was chosen to be 400um.

A two port simulation is defined by using the reserved electrode name called 
"subs_ground". This grounds out the reference electrode for both the "IN" port and 
the "OUT" port of the two port network.

All the results will be placed in a directory structure under the name "questex04_db" 
which was defined with SAVE command.

Three dimensional structure files can be viewed with TonyPlot3d.  All other RLCG and 
Q versus frequency data can be viewed with TonyPlot.

This example can be compared with the examples 'questex05', 'questex06' and 
'questex07' because this is the same inductor, but in the other examples a plate or a 
grid is below the inductor or a pattern is around the inductor.


{subsection} questex05.in : Octagonal inductor with un-patterned earth shield

Requires: QUEST
Minimum Versions: QUEST 2.0.2.R

This example is an octagonal inductor.  To load and run this example, select the  
{bold} Load example 
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

The GDSII file can be viewed in MaskViews, Expert or any other Layout editing tool that
 can read GDSII format. The process is a generic process using six metal levels and 
standard values for conductivity and permittivity.

Since the inductor in this example has a diameter of approximately 300um, the depth 
of the substrate in the simulation was chosen to be 400um. A plate is below the 
inductor.

A two port simulation is defined. The first port is between the electrodes "in" and 
"gnd1". The second port is between the electrodes "out" and "gnd2". The reference 
electrodes "gnd1" and "gnd2" are on the plate below the inductor.

All the results will be placed in a directory structure under the name "questex05_db" 
which was defined with SAVE command.

Three dimensional structure files can be viewed with TonyPlot3d.  All other RLCG and 
Q versus frequency data can be viewed with TonyPlot.

This example can be compared with the examples 'questex04', 'questex06' and 
'questex07' because this is the same inductori, but in the other examples the 
inductor is alone or a grid is below the inductor or a pattern is around the inductor.

For example in this case (inductor with a plate), the Q factor is very small because
the inductance value is small and the resistance value is large due to the path of 
the current return by the plate.  The capacitance is large because the ground plane 
is below all the surface of the inductor.


{subsection} questex06.in : Octagonal inductor with patterned earth shield

Requires: QUEST
Minimum Versions: QUEST 2.0.2.R

This example is an octagonal inductor.  To load and run this example, select the  
{bold} Load example 
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

The GDSII file can be viewed in MaskViews, Expert or any other Layout editing tool that can
 read the GDSII format. The process is a generic process using six metal levels and 
standard values for conductivity and permittivity.

Since the inductor in this example has a diameter of approximately 300um, the depth 
of the substrate in the simulation was chosen to be 400um. A grid is below the 
inductor.

A two port simulation is defined. The first port is between the electrodes "in" and 
"gnd1". The second port is between the electrodes "out" and "gnd2". The reference 
electrodes "gnd1" and "gnd2" are on the grid below the inductor.

All the results will be placed in a directory structure under the name "questex06_db" 
which was defined with the SAVE command.

Three dimensional structure files can be viewed with TonyPlot3d.  All other RLCG and 
Q versus frequency data can be viewed with TonyPlot.

This example can be compared with the examples 'questex04', 'questex05' and 'questex07'
 because this is the same inductor, but in the other examples the inductor is alone or
 a plate is below the inductor or a pattern is around the inductor.  

In this example (inductor with a grid) the Qfactor is high and the
resistance is constant
since the current return path is always through the grid.


{subsection} questex07.in : Octagonal inductor with surround earth shield

Requires: QUEST
Minimum Versions: QUEST 2.0.2.R

This example is an octagonal inductor.  To load and run this example, select the  
{bold} Load example 
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

The GDSII file can be viewed in MaskViews, Expert or other any layout editing tool that can
 read GDSII format. The process is a generic process using six metal levels and 
standard values for the conductivity and permittivity.

Since the inductor in this example has a diameter of approximately 300um, the depth 
of the substrate in the simulation was chosen to be 400um. A pattern is around the 
inductor.

A two port simulation is defined. The first port is between the electrodes "in" and 
"gnd1". The second port is between the electrodes "out" and "gnd2". The reference 
electrodes "gnd1" and "gnd2" are on the pattern around the inductor.

All the results will be placed in a directory structure under the name "questex07_db" 
which was defined with SAVE command.

Three dimensional structure files can be viewed with TonyPlot3d.  All other RLCG and 
Q versus frequency data can be viewed with TonyPlot.

This example can be compared with the examples 'questex04', 'questex05' and 'questex06'
 because this is the same inductor but in the other examples the inductor is alone or
 a plate or a grid are below the inductor.  

For example in this case (inductor with surround shield), the Q factor is large but 
the resistance decreases with the frequency because the current return goes via the 
substrate (no plate or grid is below the inductor).


{subsection} questex08.in : Different metals on the same level

Requires: QUEST
Minimum Versions: QUEST 2.0.2.R

This example is 3D Interconnect with different metals on the same level.  To load and run this example, select the  
{bold} Load example 
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

The GDSII file can be viewed in MaskViews, Expert or any other layout editing tool that 
can read GDSII format. 

The process is defined with multiple metals on the same level. The VIA "type" in the 
deposit command is not used. METAL "type" is used instead using layers in the gds. 
Use two consecutives conductor layers (to have two different conductor on the same 
level) as shown below:

deposit type = "metal" layername = "via1" thick = 0.3 matName = "copper" 
{newline}
deposit type = "metal" layername = "via2" thick = 0.3 matName = "aluminum" 

In this example derived layers of "via2" were created and used to connect M1to M3 
(via2_1 and via2_2 in the example). 

A two port simulation is defined by using the reserved electrode name called 
"subs_ground". This grounds out the reference electrode for both the "IN" port and 
the "OUT" port of the two port network.

All the results will be placed in a directory structure under the name "questex08_db" 
which was defined with SAVE command.

Three dimensional structure files can be viewed with TonyPlot3d.  All other RLCG and 
Q versus frequency data can be viewed with TonyPlot.


{subsection} questex09.in : A true curved spiral inductor design including ground shield pattern

Requires: QUEST
Minimum Versions: QUEST 2.0.2.R

This example is a true curved spiral inductor. To load and run this example, select the  
{bold} Load example 
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

The GDSII file can be viewed in MaskViews, Expert or any other layout editing tool that 
can read GDSII format. The process is a generic process using six metal levels and 
standard values for the conductivity and permittivity.

Since the inductor in this example has a diameter of approximately 300um, the depth 
of the substrate in the simulation was chosen to be 400um. A grid is above the 
inductor.

A two port simulation is defined. The first port is between the electrodes "in" and 
"gnd". The second port is between the electrodes "out" and "gnd". The reference 
electrode "gnd" is on the grid above the inductor.

All the results will be placed in a directory structure under the name "questex09_db" 
which was defined with the SAVE command.

Three dimensional structure files can be viewed with TonyPlot3d. All other RLCG and Q 
versus frequency data can be viewed with TonyPlot.


{subsection} questex10.in : Substrate loss tangent effects for a square inductor on GaAs

Requires: QUEST
Minimum Versions: QUEST 2.0.2.R

This example is based on a National University of Singapore paper by Wen-Yan Yin and 
al. "Model Description and Parameter Extraction of On-Chip Spiral Inductors for MMICs"
 International Journal on RF and Microwave CAE 14 pp.111-121 2004. It presents a 
statistical description of the global performance of on-chip spiral inductors based 
on extensive measurement.

To load and run this example, select the  
{bold} Load example 
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

The GDSII file can be viewed in MaskViews, Expert or any other layout editing tool that 
can read GDSII format. The process file was also created using information from the 
paper.

You can  compare the results of the inductor parameters (RLGC / Q factor) 
according to the substrate properties.

A two port simulation is defined by using the reserved electrode name called 
"subs_ground". This grounds out the reference electrode for both the "in" port and 
the "out" port of the two port network.

All the results will be placed in a directory structure under the name "questex10_db" 
which was defined with the SAVE command.

Three dimensional structure files can be viewed with TonyPlot3d. All other RLCG and Q 
versus frequency data can be viewed with TonyPlot.


{subsection} questex11.in : Comparing one turn and straight line inductors

Requires: QUEST
Minimum Versions: QUEST 2.0.2.R

This example demonstrates the advantages of straight line inductors.

Introduction:

It is often perceived that the highest inductance and Q factor are obtained using 
spiral inductors. This, however, is only true if the inductor has more than 
approximately 1.5 turns. Designers will often design 1 turn or 1.25 turn inductors 
out of habit, not realizing that a significantly better performing inductor can be 
designed with a straight line inductor.

The reason a straight inductor outperforms a one turn inductor in terms of 
inductance per length and Q factor is two fold:

1) If an inductor only has one turn, there is no added inductance from the mutual 
inductance of the other coils as occurs in a multi-turn inductor.

2) In a one turn inductor, inductance is lost due to the current travelling in 
opposite directions in the opposite conductor which is not mitigated by mutual 
inductance from other windings.

In a straight line inductor, there is also no mutual inductance benefit, BUT there 
is also no inductance lost due to opposite conductors having current flowing in
 opposite directions, because there are no opposite conductors in a straight line.

Experiment Description:

In this Quest experiment, two inductor layouts are compared:

(i) The first layout is a straight line inductor 480um long and 10um wide.

(ii) The second inductor has an identical length and width but is as a one turn 
design.

Results:

The results show that not only does the straight line inductor exhibit a greater 
inductance than its one turn counter part, but the maximum Q factor is also 
significantly higher.

Running the Example


To load and run this example, select the  
{bold} Load example 
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

questex11_command.in is the quest input file common to the line and one turn inductor gds. 
Two simulations will thus be run one after the other.  


{subsection} questex12.in : 3D MIM capacitance

Requires: QUEST
Minimum Versions: QUEST 2.0.2.R

This example demonstrates the use of QUEST for 3D MIM capacitance simulation.

Introduction:

The Metal-Insulator-Metal (MIM) capacitor is a key passive component in RF and
 analog integrated circuits. MIM capacitors have attracted great attention because 
of their high capacitance density that supplies a small area, increases circuit density 
and further reduces fabrication cost.  

Running the Example

To load and run this example, select the  
{bold} Load example 
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

Results analysis


The objective of the analysis is to extract the R,L and C parameter of the simple RLC 
MIM device equivalent model. 

For that purpose we use the B element of the ABCD matrix (questex12_abcd.dat). From the 
imaginary part of the B element we extract C and L according to the following 
equation B_I=Lw -1/CW using the build-in optimizer by the JavaScript capability. The real 
part of B gives directly the Resistance R. 

To run the script use the RUNJAVASCRIPT command or type the following command:

quest -v -b javascript_name.js

This example also shows the 
{bold} DBinternal 
 capability to investigate the MIM Thickness effect on the capacitance value. Please 
refer to DeckBuild example DOE: Design of Experiment Examples for detailed explanation
 of the 
{bold} DBinternal
 syntax.


{subsection} questex13.in : Complex number calculation

Requires: QUEST
Minimum Versions: QUEST 2.0.2.R

This example demonstrates the use of JavaScript analysis of QUEST to perform 
calculations using complex numbers.

Introduction:


It is sometimes interesting to compare simulation and experimental results on 
quantities that are not extracted by default with QUEST. It could be a quantity 
like Qdiff defined as a function of S-param:

Sd_dut=0.5*(S11+S22-S12-S21)
{newline}
Zd_in=100*(1+Sd_dut)/(1-Sd_dut)
{newline}
Ldiff = Im(Zd_in)*1/w
{newline}
Qdiff = I(Zd_in)/R(Zd_in)

It could also be interesting to transform the measured S-param to the measured Y-param also 
for comparison purpose in QUEST.

In all cases calculation with complex numbers are needed.

Running the Example


To load and run this example, select the  
{bold} Load example  
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

Results analysis


This example illustrates the complex number calculation syntax used in the JavaScript 
analysis of QUEST:

1. Creation of scalar S-param table (CSV) from simulation (questex13_S_simu.js). 
Note that this file format (CSV) can also be used with measurement data.

2. From the previous S-param table, calculation of Y11-param (questex13_Y11.js).

3. General transformation of S to Y-param can be done by using the Macro function 
convert_S_to_Y (quest13_Y.js).

2 and 3 can typically be used to convert measured S-Param to Y-param. Y11 real and 
imaginary are of course identical if we compare them from the 3 different calculations 
described above. 

4. Calculation of L and Q from Y-param calculated from 2 above. (questex13_L_Q.js)

Note that:

A. Q can be directly compared to Q calculted in QUEST.

B. This is not the case for L since here L is calculated from Y11 and not 
from Y21 as it is done by default in QUEST. It thus shows that quantities that are 
not calculated by default in QUEST can easily be created using QUEST JavaScript 
analysis.

TO RUN all the scripts, use the RUNJAVASCRIPT command or just run

quest -v -b javascript_name.js


{subsection} questex14.in : Parameterized Inductor layout

Requires: QUEST
Minimum Versions: QUEST 2.0.2.R

This example demonstrates the use of an Expert LISA script used by QUEST to generate
a parameterized gds layout.

Introduction:

In order to build an inductance model or make a variation of layout parameters it 
is especially interesting to have parametrized gds. This is possible in QUEST  
using Expert's LISA scripting language. 

Running the Example

To load and run this example, select the  
{bold} Load example  
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

In this example, four layout variables are defined (number of coils, radius,wire_width 
and space) and the layout is created accordingly using the creategds command in 
QUEST associated with the EXPERT script file.

Results analysis


Inductor performance is monitored using the extract capability of DeckBuild.

This example shows how to use the 
{bold} DBinternal 
 capability to investigate the geometrical layout variation on the inductor 
performance. Please refer to the DeckBuild example DOE: Design of Experiment Examples 
for detailed explanation of the 
{bold} DBinternal 
 syntax and the DeckBuild manual.

When loaded in SPAYN (start SPAYN and load inductor.db) a quadratic model of L as a 
function of 3 layout variables can be done. For that in SPAYN go to tool 
regression and select L as target and NB_COILS, WIRE_WIDTH and RADIUS as predictors. 
Perform a quadratic model with interaction and click on TonyPlot. You thus have a 
Response Surface Model (RSM) that you can use for synthesis for example.
 
{subsection} questex15.in : User inductor spice model

Requires: QUEST 
Minimum Versions: QUEST 2.0.2.R

This example demonstrates how to create and extract user-defined
inductor SPICE model parameters. Please refer to previous examples to learn 
how to create a QUEST input deck.

To load and run this example, select the  
{bold} Load example  
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

In this example the parameter
{bold} ut4.batchfile 
 is used in the save statement to save QUEST results (s-parameter)
in UTMOST4 format (questex15_ind_model.uds)

UTMOST4 will indeed be used to perform SPICE model parameter extraction. 
A project in UTMOST4 has to be created using the UTMOST4 GUI including both 
the user defined SPICE model as well as the extraction strategy 
(questex15.prj).  

A SPICE model extraction can be performed either using the UTMOST4 GUI
or UTMOST under DeckBuild. 

To use the UTMOST GUI, open an existing database 
or create a new one (see UTMOST4 manual for details) and click on 'import 
dataset' (select questex15_ind_model.uds) and 'import project' (select 
questex15.prj). Double click on questex15 and the project will open. 
Click on 'run'. 

To run UTMOSTIV under DeckBuild, just run UTMOSTIV
at the end of the QUEST simulation. 
 
 
{subsection} questex16.in : Parameterized MIM Capacitor layout

Requires: QUEST
Minimum Versions: QUEST 2.0.2.R

This example demonstrates the use of an Expert LISA script used by QUEST to generate
a parametrized MIM Capacitor gds layout.

Introduction:


In order to build an MIM capacitor model or simply make variation of layout parameters it 
is especially interesting to have parametrized gds. This is possible in QUEST by 
using the Expert layout editor's LISA scripting language. 

Running the Example

To load and run this example, select the  
{bold} Load example 
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

In this example, two layout variables are defined (Width, Length) and the layout is 
created accordingly using the creategds command of QUEST associated with the Expert 
script file.

Results analysis

Inductor performance is monitored using the extract capability in DeckBuild.


{subsection} questex17.in : Frequency dependent loss tangent and permittivity

Requires: QUEST

This example is based on Questex04.

To load and run this example, select the  
{bold} Load example 
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

The GDSII file can be viewed in MaskViews, Expert or any other layout editing tool that 
can read GDSII format. 

You can compare the results of the inductor parameter (Q factor) according to 
the substrate properties and permittivities. The files questex17_losstangent.txt and 
questex17_permittivity.txt, where losstangent and permittivity are defined versus 
frequency, are loaded using the parameters
{bold} permit.file 
 and
{bold} loss.file 
 in the material statement. The frequency range used during QUEST simulation 
should match the frequency used to define questex17_losstangent.txt and 
questex17_permittivity.txt files. For that, use the
{bold} list 
 parameter on the frequency statement.
  

A two port simulation is defined by using the reserved electrode name called 
"subs_ground". This grounds out the reference electrode for both the "in" port and 
the "out" port of the two port network.

All the results will be placed in a directory structure under the name "questex17_db" 
which was defined with SAVE command.

Three dimensional structure files can be viewed with TonyPlot3d. All other RLCG and Q 
versus frequency data can be viewed with TonyPlot.


{subsection} questex18.in : multiple layouts simulation

Requires: QUEST
Minimum Versions: QUEST 2.0.2.R

This example demonstrates how to load and run multiple layouts.

Introduction:


This example is based on questex14. 

Running the Example

To load and run this example, select the  
{bold} Load example  
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

In this example, two layouts are loaded using two consecutive layout gdsfile statements.
 These are 
{bold} layout gdsfile = "questex18_nb=4_oct.gds" cell = "CELL"  
 and
{bold} layout gdsfile = "questex18_nb=5_oct.gds" cell = "CELL" 

Results analysis

These two layouts differ from each other by the number of turns. Inductor performance 
are monitored using the TonyPlot  overlay feature as well as the extract capability 
in DeckBuild.

{subsection} questex19.in : optimization procedure

Requires: QUEST, OPTIMIZER
Minimum Versions: QUEST 2.0.2.R

This example can  be used as a tutorial for setting up an optimization 
procedure with a so-called curved target. This example is based on 
questex14.in 

Running the Example


An experimental profile is provided with the example in a simple XY format 
which can be read into the OPTIMIZER
{bold} questex19.opt.

To load and run this example, select the  
{bold} Load example 
 button in DeckBuild. This will copy the input file, GDSII file and results to your current working directory. Select the 
{bold} run 
 button to execute the example.

The goal of the example is to find 
{bold} Metal1 Thickness and conductivity
 that will give a Q factor versus frequency close to the experimental one. 
To achieve this, select
{bold} Optimizer... 
 from the
{bold} Main Control 
 menu. The
{bold} DeckBuild: Optimizer 
 screen will appear in a moment. 

First, select
{bold} Parameters 
 from the
{bold} Mode  
 menu; this will display the Parameter worksheet. To define the parameters, 
select (highlight) the
MATERIAL name = "m1" statement from the input deck and choose
{bold} Add 
 from the 
{bold} Edit 
 pulldown menu. The
{bold} Parameter define 
 popup will appear. Check cond, then press
{bold} Apply. 
 Redo the same thing with the DEPOSIT deposit type = "metal" layername = "M1"
statement and select thick. By default all min/max values for parameters are
+-50%. To edit any of these numeric values position the pointer over the 
corresponding cell of the worksheet, click the left-hand mouse button, edit 
the value, and do not forget to press return after finishing the 
editing. You should change the default +-50% in this case. Set Minimum value 
of the conductivity to 1e+06 and maximum to 1e+08 and Minimum value for thickness
to 0.25 and Maximum to 1.

The next step is setting the curved target. Select
{bold} Targets 
 from the 
{bold} Mode 
 menu. Highlight the 
{bold} extract name="simu" 
 line. This line extracts the Q factor verus frequency. Choose
{bold} Add 
 from the
{bold} Edit 
 pulldown menu. A new row will be inserted into the Target worksheet.
The target name will correspond to the name in the extract statement.
To insert a curved target select the only row in the worksheet 
by double-clicking the left-hand button while the pointer is positioned 
anywhere in the row, then choose
{bold} From File 
 from the
{bold} Insert 
 submenu from the 
{bold} X/Y Data 
 menu under the 
{bold} Edit 
 pulldown menu. As the result the 
{bold} Optimizer X/Y Target Data 
 popup will appear. Select
{bold} questex19.opt 
 file and then press 
{bold} Load.

Once the parameters, targets, and setup information have been
defined, the Optimization process can be started by pressing the
{bold} Optimize  
 button. During the optimization run, the 
{bold} Graphics 
 mode shows real-time updates of parameter, target, and error values.


Results analysis


After optimization is completed you may execute the 
{bold} tonyplot 
 command which will plot the comparison between optimized and measured profiles. 












